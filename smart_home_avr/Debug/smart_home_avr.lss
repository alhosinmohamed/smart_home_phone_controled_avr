
smart_home_avr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00003b9a  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         0000014a  00800060  00003b9a  00003c2e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .bss          00000004  008001aa  008001aa  00003d78  2**0
                  ALLOC
  3 .stab         0000318c  00000000  00000000  00003d78  2**2
                  CONTENTS, READONLY, DEBUGGING
  4 .stabstr      00000f13  00000000  00000000  00006f04  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_aranges 00000140  00000000  00000000  00007e17  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_pubnames 00000170  00000000  00000000  00007f57  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_info   00001c49  00000000  00000000  000080c7  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00000eeb  00000000  00000000  00009d10  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_line   00000dad  00000000  00000000  0000abfb  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_frame  00000160  00000000  00000000  0000b9a8  2**2
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_str    0000028d  00000000  00000000  0000bb08  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_loc    000007ce  00000000  00000000  0000bd95  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00000050  00000000  00000000  0000c563  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
       4:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       8:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
       c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      10:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      14:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      18:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      1c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      20:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      24:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      28:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      2c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      30:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      34:	0c 94 12 16 	jmp	0x2c24	; 0x2c24 <__vector_13>
      38:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      3c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      40:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      44:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      48:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      4c:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>
      50:	0c 94 47 00 	jmp	0x8e	; 0x8e <__bad_interrupt>

00000054 <__ctors_end>:
      54:	11 24       	eor	r1, r1
      56:	1f be       	out	0x3f, r1	; 63
      58:	cf e5       	ldi	r28, 0x5F	; 95
      5a:	d8 e0       	ldi	r29, 0x08	; 8
      5c:	de bf       	out	0x3e, r29	; 62
      5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
      60:	11 e0       	ldi	r17, 0x01	; 1
      62:	a0 e6       	ldi	r26, 0x60	; 96
      64:	b0 e0       	ldi	r27, 0x00	; 0
      66:	ea e9       	ldi	r30, 0x9A	; 154
      68:	fb e3       	ldi	r31, 0x3B	; 59
      6a:	02 c0       	rjmp	.+4      	; 0x70 <.do_copy_data_start>

0000006c <.do_copy_data_loop>:
      6c:	05 90       	lpm	r0, Z+
      6e:	0d 92       	st	X+, r0

00000070 <.do_copy_data_start>:
      70:	aa 3a       	cpi	r26, 0xAA	; 170
      72:	b1 07       	cpc	r27, r17
      74:	d9 f7       	brne	.-10     	; 0x6c <.do_copy_data_loop>

00000076 <__do_clear_bss>:
      76:	11 e0       	ldi	r17, 0x01	; 1
      78:	aa ea       	ldi	r26, 0xAA	; 170
      7a:	b1 e0       	ldi	r27, 0x01	; 1
      7c:	01 c0       	rjmp	.+2      	; 0x80 <.do_clear_bss_start>

0000007e <.do_clear_bss_loop>:
      7e:	1d 92       	st	X+, r1

00000080 <.do_clear_bss_start>:
      80:	ae 3a       	cpi	r26, 0xAE	; 174
      82:	b1 07       	cpc	r27, r17
      84:	e1 f7       	brne	.-8      	; 0x7e <.do_clear_bss_loop>
      86:	0e 94 53 16 	call	0x2ca6	; 0x2ca6 <main>
      8a:	0c 94 cb 1d 	jmp	0x3b96	; 0x3b96 <_exit>

0000008e <__bad_interrupt>:
      8e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000092 <__fixunssfsi>:
      92:	ef 92       	push	r14
      94:	ff 92       	push	r15
      96:	0f 93       	push	r16
      98:	1f 93       	push	r17
      9a:	7b 01       	movw	r14, r22
      9c:	8c 01       	movw	r16, r24
      9e:	20 e0       	ldi	r18, 0x00	; 0
      a0:	30 e0       	ldi	r19, 0x00	; 0
      a2:	40 e0       	ldi	r20, 0x00	; 0
      a4:	5f e4       	ldi	r21, 0x4F	; 79
      a6:	0e 94 49 03 	call	0x692	; 0x692 <__gesf2>
      aa:	88 23       	and	r24, r24
      ac:	8c f0       	brlt	.+34     	; 0xd0 <__fixunssfsi+0x3e>
      ae:	c8 01       	movw	r24, r16
      b0:	b7 01       	movw	r22, r14
      b2:	20 e0       	ldi	r18, 0x00	; 0
      b4:	30 e0       	ldi	r19, 0x00	; 0
      b6:	40 e0       	ldi	r20, 0x00	; 0
      b8:	5f e4       	ldi	r21, 0x4F	; 79
      ba:	0e 94 c1 01 	call	0x382	; 0x382 <__subsf3>
      be:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      c2:	9b 01       	movw	r18, r22
      c4:	ac 01       	movw	r20, r24
      c6:	20 50       	subi	r18, 0x00	; 0
      c8:	30 40       	sbci	r19, 0x00	; 0
      ca:	40 40       	sbci	r20, 0x00	; 0
      cc:	50 48       	sbci	r21, 0x80	; 128
      ce:	06 c0       	rjmp	.+12     	; 0xdc <__fixunssfsi+0x4a>
      d0:	c8 01       	movw	r24, r16
      d2:	b7 01       	movw	r22, r14
      d4:	0e 94 a9 03 	call	0x752	; 0x752 <__fixsfsi>
      d8:	9b 01       	movw	r18, r22
      da:	ac 01       	movw	r20, r24
      dc:	b9 01       	movw	r22, r18
      de:	ca 01       	movw	r24, r20
      e0:	1f 91       	pop	r17
      e2:	0f 91       	pop	r16
      e4:	ff 90       	pop	r15
      e6:	ef 90       	pop	r14
      e8:	08 95       	ret

000000ea <_fpadd_parts>:
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	eb e7       	ldi	r30, 0x7B	; 123
      f0:	f0 e0       	ldi	r31, 0x00	; 0
      f2:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__prologue_saves__>
      f6:	dc 01       	movw	r26, r24
      f8:	2b 01       	movw	r4, r22
      fa:	fa 01       	movw	r30, r20
      fc:	9c 91       	ld	r25, X
      fe:	92 30       	cpi	r25, 0x02	; 2
     100:	08 f4       	brcc	.+2      	; 0x104 <_fpadd_parts+0x1a>
     102:	39 c1       	rjmp	.+626    	; 0x376 <_fpadd_parts+0x28c>
     104:	eb 01       	movw	r28, r22
     106:	88 81       	ld	r24, Y
     108:	82 30       	cpi	r24, 0x02	; 2
     10a:	08 f4       	brcc	.+2      	; 0x10e <_fpadd_parts+0x24>
     10c:	33 c1       	rjmp	.+614    	; 0x374 <_fpadd_parts+0x28a>
     10e:	94 30       	cpi	r25, 0x04	; 4
     110:	69 f4       	brne	.+26     	; 0x12c <_fpadd_parts+0x42>
     112:	84 30       	cpi	r24, 0x04	; 4
     114:	09 f0       	breq	.+2      	; 0x118 <_fpadd_parts+0x2e>
     116:	2f c1       	rjmp	.+606    	; 0x376 <_fpadd_parts+0x28c>
     118:	11 96       	adiw	r26, 0x01	; 1
     11a:	9c 91       	ld	r25, X
     11c:	11 97       	sbiw	r26, 0x01	; 1
     11e:	89 81       	ldd	r24, Y+1	; 0x01
     120:	98 17       	cp	r25, r24
     122:	09 f4       	brne	.+2      	; 0x126 <_fpadd_parts+0x3c>
     124:	28 c1       	rjmp	.+592    	; 0x376 <_fpadd_parts+0x28c>
     126:	a1 e0       	ldi	r26, 0x01	; 1
     128:	b1 e0       	ldi	r27, 0x01	; 1
     12a:	25 c1       	rjmp	.+586    	; 0x376 <_fpadd_parts+0x28c>
     12c:	84 30       	cpi	r24, 0x04	; 4
     12e:	09 f4       	brne	.+2      	; 0x132 <_fpadd_parts+0x48>
     130:	21 c1       	rjmp	.+578    	; 0x374 <_fpadd_parts+0x28a>
     132:	82 30       	cpi	r24, 0x02	; 2
     134:	a9 f4       	brne	.+42     	; 0x160 <_fpadd_parts+0x76>
     136:	92 30       	cpi	r25, 0x02	; 2
     138:	09 f0       	breq	.+2      	; 0x13c <_fpadd_parts+0x52>
     13a:	1d c1       	rjmp	.+570    	; 0x376 <_fpadd_parts+0x28c>
     13c:	9a 01       	movw	r18, r20
     13e:	ad 01       	movw	r20, r26
     140:	88 e0       	ldi	r24, 0x08	; 8
     142:	ea 01       	movw	r28, r20
     144:	09 90       	ld	r0, Y+
     146:	ae 01       	movw	r20, r28
     148:	e9 01       	movw	r28, r18
     14a:	09 92       	st	Y+, r0
     14c:	9e 01       	movw	r18, r28
     14e:	81 50       	subi	r24, 0x01	; 1
     150:	c1 f7       	brne	.-16     	; 0x142 <_fpadd_parts+0x58>
     152:	e2 01       	movw	r28, r4
     154:	89 81       	ldd	r24, Y+1	; 0x01
     156:	11 96       	adiw	r26, 0x01	; 1
     158:	9c 91       	ld	r25, X
     15a:	89 23       	and	r24, r25
     15c:	81 83       	std	Z+1, r24	; 0x01
     15e:	08 c1       	rjmp	.+528    	; 0x370 <_fpadd_parts+0x286>
     160:	92 30       	cpi	r25, 0x02	; 2
     162:	09 f4       	brne	.+2      	; 0x166 <_fpadd_parts+0x7c>
     164:	07 c1       	rjmp	.+526    	; 0x374 <_fpadd_parts+0x28a>
     166:	12 96       	adiw	r26, 0x02	; 2
     168:	2d 90       	ld	r2, X+
     16a:	3c 90       	ld	r3, X
     16c:	13 97       	sbiw	r26, 0x03	; 3
     16e:	eb 01       	movw	r28, r22
     170:	8a 81       	ldd	r24, Y+2	; 0x02
     172:	9b 81       	ldd	r25, Y+3	; 0x03
     174:	14 96       	adiw	r26, 0x04	; 4
     176:	ad 90       	ld	r10, X+
     178:	bd 90       	ld	r11, X+
     17a:	cd 90       	ld	r12, X+
     17c:	dc 90       	ld	r13, X
     17e:	17 97       	sbiw	r26, 0x07	; 7
     180:	ec 80       	ldd	r14, Y+4	; 0x04
     182:	fd 80       	ldd	r15, Y+5	; 0x05
     184:	0e 81       	ldd	r16, Y+6	; 0x06
     186:	1f 81       	ldd	r17, Y+7	; 0x07
     188:	91 01       	movw	r18, r2
     18a:	28 1b       	sub	r18, r24
     18c:	39 0b       	sbc	r19, r25
     18e:	b9 01       	movw	r22, r18
     190:	37 ff       	sbrs	r19, 7
     192:	04 c0       	rjmp	.+8      	; 0x19c <_fpadd_parts+0xb2>
     194:	66 27       	eor	r22, r22
     196:	77 27       	eor	r23, r23
     198:	62 1b       	sub	r22, r18
     19a:	73 0b       	sbc	r23, r19
     19c:	60 32       	cpi	r22, 0x20	; 32
     19e:	71 05       	cpc	r23, r1
     1a0:	0c f0       	brlt	.+2      	; 0x1a4 <_fpadd_parts+0xba>
     1a2:	61 c0       	rjmp	.+194    	; 0x266 <_fpadd_parts+0x17c>
     1a4:	12 16       	cp	r1, r18
     1a6:	13 06       	cpc	r1, r19
     1a8:	6c f5       	brge	.+90     	; 0x204 <_fpadd_parts+0x11a>
     1aa:	37 01       	movw	r6, r14
     1ac:	48 01       	movw	r8, r16
     1ae:	06 2e       	mov	r0, r22
     1b0:	04 c0       	rjmp	.+8      	; 0x1ba <_fpadd_parts+0xd0>
     1b2:	96 94       	lsr	r9
     1b4:	87 94       	ror	r8
     1b6:	77 94       	ror	r7
     1b8:	67 94       	ror	r6
     1ba:	0a 94       	dec	r0
     1bc:	d2 f7       	brpl	.-12     	; 0x1b2 <_fpadd_parts+0xc8>
     1be:	21 e0       	ldi	r18, 0x01	; 1
     1c0:	30 e0       	ldi	r19, 0x00	; 0
     1c2:	40 e0       	ldi	r20, 0x00	; 0
     1c4:	50 e0       	ldi	r21, 0x00	; 0
     1c6:	04 c0       	rjmp	.+8      	; 0x1d0 <_fpadd_parts+0xe6>
     1c8:	22 0f       	add	r18, r18
     1ca:	33 1f       	adc	r19, r19
     1cc:	44 1f       	adc	r20, r20
     1ce:	55 1f       	adc	r21, r21
     1d0:	6a 95       	dec	r22
     1d2:	d2 f7       	brpl	.-12     	; 0x1c8 <_fpadd_parts+0xde>
     1d4:	21 50       	subi	r18, 0x01	; 1
     1d6:	30 40       	sbci	r19, 0x00	; 0
     1d8:	40 40       	sbci	r20, 0x00	; 0
     1da:	50 40       	sbci	r21, 0x00	; 0
     1dc:	2e 21       	and	r18, r14
     1de:	3f 21       	and	r19, r15
     1e0:	40 23       	and	r20, r16
     1e2:	51 23       	and	r21, r17
     1e4:	21 15       	cp	r18, r1
     1e6:	31 05       	cpc	r19, r1
     1e8:	41 05       	cpc	r20, r1
     1ea:	51 05       	cpc	r21, r1
     1ec:	21 f0       	breq	.+8      	; 0x1f6 <_fpadd_parts+0x10c>
     1ee:	21 e0       	ldi	r18, 0x01	; 1
     1f0:	30 e0       	ldi	r19, 0x00	; 0
     1f2:	40 e0       	ldi	r20, 0x00	; 0
     1f4:	50 e0       	ldi	r21, 0x00	; 0
     1f6:	79 01       	movw	r14, r18
     1f8:	8a 01       	movw	r16, r20
     1fa:	e6 28       	or	r14, r6
     1fc:	f7 28       	or	r15, r7
     1fe:	08 29       	or	r16, r8
     200:	19 29       	or	r17, r9
     202:	3c c0       	rjmp	.+120    	; 0x27c <_fpadd_parts+0x192>
     204:	23 2b       	or	r18, r19
     206:	d1 f1       	breq	.+116    	; 0x27c <_fpadd_parts+0x192>
     208:	26 0e       	add	r2, r22
     20a:	37 1e       	adc	r3, r23
     20c:	35 01       	movw	r6, r10
     20e:	46 01       	movw	r8, r12
     210:	06 2e       	mov	r0, r22
     212:	04 c0       	rjmp	.+8      	; 0x21c <_fpadd_parts+0x132>
     214:	96 94       	lsr	r9
     216:	87 94       	ror	r8
     218:	77 94       	ror	r7
     21a:	67 94       	ror	r6
     21c:	0a 94       	dec	r0
     21e:	d2 f7       	brpl	.-12     	; 0x214 <_fpadd_parts+0x12a>
     220:	21 e0       	ldi	r18, 0x01	; 1
     222:	30 e0       	ldi	r19, 0x00	; 0
     224:	40 e0       	ldi	r20, 0x00	; 0
     226:	50 e0       	ldi	r21, 0x00	; 0
     228:	04 c0       	rjmp	.+8      	; 0x232 <_fpadd_parts+0x148>
     22a:	22 0f       	add	r18, r18
     22c:	33 1f       	adc	r19, r19
     22e:	44 1f       	adc	r20, r20
     230:	55 1f       	adc	r21, r21
     232:	6a 95       	dec	r22
     234:	d2 f7       	brpl	.-12     	; 0x22a <_fpadd_parts+0x140>
     236:	21 50       	subi	r18, 0x01	; 1
     238:	30 40       	sbci	r19, 0x00	; 0
     23a:	40 40       	sbci	r20, 0x00	; 0
     23c:	50 40       	sbci	r21, 0x00	; 0
     23e:	2a 21       	and	r18, r10
     240:	3b 21       	and	r19, r11
     242:	4c 21       	and	r20, r12
     244:	5d 21       	and	r21, r13
     246:	21 15       	cp	r18, r1
     248:	31 05       	cpc	r19, r1
     24a:	41 05       	cpc	r20, r1
     24c:	51 05       	cpc	r21, r1
     24e:	21 f0       	breq	.+8      	; 0x258 <_fpadd_parts+0x16e>
     250:	21 e0       	ldi	r18, 0x01	; 1
     252:	30 e0       	ldi	r19, 0x00	; 0
     254:	40 e0       	ldi	r20, 0x00	; 0
     256:	50 e0       	ldi	r21, 0x00	; 0
     258:	59 01       	movw	r10, r18
     25a:	6a 01       	movw	r12, r20
     25c:	a6 28       	or	r10, r6
     25e:	b7 28       	or	r11, r7
     260:	c8 28       	or	r12, r8
     262:	d9 28       	or	r13, r9
     264:	0b c0       	rjmp	.+22     	; 0x27c <_fpadd_parts+0x192>
     266:	82 15       	cp	r24, r2
     268:	93 05       	cpc	r25, r3
     26a:	2c f0       	brlt	.+10     	; 0x276 <_fpadd_parts+0x18c>
     26c:	1c 01       	movw	r2, r24
     26e:	aa 24       	eor	r10, r10
     270:	bb 24       	eor	r11, r11
     272:	65 01       	movw	r12, r10
     274:	03 c0       	rjmp	.+6      	; 0x27c <_fpadd_parts+0x192>
     276:	ee 24       	eor	r14, r14
     278:	ff 24       	eor	r15, r15
     27a:	87 01       	movw	r16, r14
     27c:	11 96       	adiw	r26, 0x01	; 1
     27e:	9c 91       	ld	r25, X
     280:	d2 01       	movw	r26, r4
     282:	11 96       	adiw	r26, 0x01	; 1
     284:	8c 91       	ld	r24, X
     286:	98 17       	cp	r25, r24
     288:	09 f4       	brne	.+2      	; 0x28c <_fpadd_parts+0x1a2>
     28a:	45 c0       	rjmp	.+138    	; 0x316 <_fpadd_parts+0x22c>
     28c:	99 23       	and	r25, r25
     28e:	39 f0       	breq	.+14     	; 0x29e <_fpadd_parts+0x1b4>
     290:	a8 01       	movw	r20, r16
     292:	97 01       	movw	r18, r14
     294:	2a 19       	sub	r18, r10
     296:	3b 09       	sbc	r19, r11
     298:	4c 09       	sbc	r20, r12
     29a:	5d 09       	sbc	r21, r13
     29c:	06 c0       	rjmp	.+12     	; 0x2aa <_fpadd_parts+0x1c0>
     29e:	a6 01       	movw	r20, r12
     2a0:	95 01       	movw	r18, r10
     2a2:	2e 19       	sub	r18, r14
     2a4:	3f 09       	sbc	r19, r15
     2a6:	40 0b       	sbc	r20, r16
     2a8:	51 0b       	sbc	r21, r17
     2aa:	57 fd       	sbrc	r21, 7
     2ac:	08 c0       	rjmp	.+16     	; 0x2be <_fpadd_parts+0x1d4>
     2ae:	11 82       	std	Z+1, r1	; 0x01
     2b0:	33 82       	std	Z+3, r3	; 0x03
     2b2:	22 82       	std	Z+2, r2	; 0x02
     2b4:	24 83       	std	Z+4, r18	; 0x04
     2b6:	35 83       	std	Z+5, r19	; 0x05
     2b8:	46 83       	std	Z+6, r20	; 0x06
     2ba:	57 83       	std	Z+7, r21	; 0x07
     2bc:	1d c0       	rjmp	.+58     	; 0x2f8 <_fpadd_parts+0x20e>
     2be:	81 e0       	ldi	r24, 0x01	; 1
     2c0:	81 83       	std	Z+1, r24	; 0x01
     2c2:	33 82       	std	Z+3, r3	; 0x03
     2c4:	22 82       	std	Z+2, r2	; 0x02
     2c6:	88 27       	eor	r24, r24
     2c8:	99 27       	eor	r25, r25
     2ca:	dc 01       	movw	r26, r24
     2cc:	82 1b       	sub	r24, r18
     2ce:	93 0b       	sbc	r25, r19
     2d0:	a4 0b       	sbc	r26, r20
     2d2:	b5 0b       	sbc	r27, r21
     2d4:	84 83       	std	Z+4, r24	; 0x04
     2d6:	95 83       	std	Z+5, r25	; 0x05
     2d8:	a6 83       	std	Z+6, r26	; 0x06
     2da:	b7 83       	std	Z+7, r27	; 0x07
     2dc:	0d c0       	rjmp	.+26     	; 0x2f8 <_fpadd_parts+0x20e>
     2de:	22 0f       	add	r18, r18
     2e0:	33 1f       	adc	r19, r19
     2e2:	44 1f       	adc	r20, r20
     2e4:	55 1f       	adc	r21, r21
     2e6:	24 83       	std	Z+4, r18	; 0x04
     2e8:	35 83       	std	Z+5, r19	; 0x05
     2ea:	46 83       	std	Z+6, r20	; 0x06
     2ec:	57 83       	std	Z+7, r21	; 0x07
     2ee:	82 81       	ldd	r24, Z+2	; 0x02
     2f0:	93 81       	ldd	r25, Z+3	; 0x03
     2f2:	01 97       	sbiw	r24, 0x01	; 1
     2f4:	93 83       	std	Z+3, r25	; 0x03
     2f6:	82 83       	std	Z+2, r24	; 0x02
     2f8:	24 81       	ldd	r18, Z+4	; 0x04
     2fa:	35 81       	ldd	r19, Z+5	; 0x05
     2fc:	46 81       	ldd	r20, Z+6	; 0x06
     2fe:	57 81       	ldd	r21, Z+7	; 0x07
     300:	da 01       	movw	r26, r20
     302:	c9 01       	movw	r24, r18
     304:	01 97       	sbiw	r24, 0x01	; 1
     306:	a1 09       	sbc	r26, r1
     308:	b1 09       	sbc	r27, r1
     30a:	8f 5f       	subi	r24, 0xFF	; 255
     30c:	9f 4f       	sbci	r25, 0xFF	; 255
     30e:	af 4f       	sbci	r26, 0xFF	; 255
     310:	bf 43       	sbci	r27, 0x3F	; 63
     312:	28 f3       	brcs	.-54     	; 0x2de <_fpadd_parts+0x1f4>
     314:	0b c0       	rjmp	.+22     	; 0x32c <_fpadd_parts+0x242>
     316:	91 83       	std	Z+1, r25	; 0x01
     318:	33 82       	std	Z+3, r3	; 0x03
     31a:	22 82       	std	Z+2, r2	; 0x02
     31c:	ea 0c       	add	r14, r10
     31e:	fb 1c       	adc	r15, r11
     320:	0c 1d       	adc	r16, r12
     322:	1d 1d       	adc	r17, r13
     324:	e4 82       	std	Z+4, r14	; 0x04
     326:	f5 82       	std	Z+5, r15	; 0x05
     328:	06 83       	std	Z+6, r16	; 0x06
     32a:	17 83       	std	Z+7, r17	; 0x07
     32c:	83 e0       	ldi	r24, 0x03	; 3
     32e:	80 83       	st	Z, r24
     330:	24 81       	ldd	r18, Z+4	; 0x04
     332:	35 81       	ldd	r19, Z+5	; 0x05
     334:	46 81       	ldd	r20, Z+6	; 0x06
     336:	57 81       	ldd	r21, Z+7	; 0x07
     338:	57 ff       	sbrs	r21, 7
     33a:	1a c0       	rjmp	.+52     	; 0x370 <_fpadd_parts+0x286>
     33c:	c9 01       	movw	r24, r18
     33e:	aa 27       	eor	r26, r26
     340:	97 fd       	sbrc	r25, 7
     342:	a0 95       	com	r26
     344:	ba 2f       	mov	r27, r26
     346:	81 70       	andi	r24, 0x01	; 1
     348:	90 70       	andi	r25, 0x00	; 0
     34a:	a0 70       	andi	r26, 0x00	; 0
     34c:	b0 70       	andi	r27, 0x00	; 0
     34e:	56 95       	lsr	r21
     350:	47 95       	ror	r20
     352:	37 95       	ror	r19
     354:	27 95       	ror	r18
     356:	82 2b       	or	r24, r18
     358:	93 2b       	or	r25, r19
     35a:	a4 2b       	or	r26, r20
     35c:	b5 2b       	or	r27, r21
     35e:	84 83       	std	Z+4, r24	; 0x04
     360:	95 83       	std	Z+5, r25	; 0x05
     362:	a6 83       	std	Z+6, r26	; 0x06
     364:	b7 83       	std	Z+7, r27	; 0x07
     366:	82 81       	ldd	r24, Z+2	; 0x02
     368:	93 81       	ldd	r25, Z+3	; 0x03
     36a:	01 96       	adiw	r24, 0x01	; 1
     36c:	93 83       	std	Z+3, r25	; 0x03
     36e:	82 83       	std	Z+2, r24	; 0x02
     370:	df 01       	movw	r26, r30
     372:	01 c0       	rjmp	.+2      	; 0x376 <_fpadd_parts+0x28c>
     374:	d2 01       	movw	r26, r4
     376:	cd 01       	movw	r24, r26
     378:	cd b7       	in	r28, 0x3d	; 61
     37a:	de b7       	in	r29, 0x3e	; 62
     37c:	e2 e1       	ldi	r30, 0x12	; 18
     37e:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__epilogue_restores__>

00000382 <__subsf3>:
     382:	a0 e2       	ldi	r26, 0x20	; 32
     384:	b0 e0       	ldi	r27, 0x00	; 0
     386:	e7 ec       	ldi	r30, 0xC7	; 199
     388:	f1 e0       	ldi	r31, 0x01	; 1
     38a:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <__prologue_saves__+0x18>
     38e:	69 83       	std	Y+1, r22	; 0x01
     390:	7a 83       	std	Y+2, r23	; 0x02
     392:	8b 83       	std	Y+3, r24	; 0x03
     394:	9c 83       	std	Y+4, r25	; 0x04
     396:	2d 83       	std	Y+5, r18	; 0x05
     398:	3e 83       	std	Y+6, r19	; 0x06
     39a:	4f 83       	std	Y+7, r20	; 0x07
     39c:	58 87       	std	Y+8, r21	; 0x08
     39e:	e9 e0       	ldi	r30, 0x09	; 9
     3a0:	ee 2e       	mov	r14, r30
     3a2:	f1 2c       	mov	r15, r1
     3a4:	ec 0e       	add	r14, r28
     3a6:	fd 1e       	adc	r15, r29
     3a8:	ce 01       	movw	r24, r28
     3aa:	01 96       	adiw	r24, 0x01	; 1
     3ac:	b7 01       	movw	r22, r14
     3ae:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3b2:	8e 01       	movw	r16, r28
     3b4:	0f 5e       	subi	r16, 0xEF	; 239
     3b6:	1f 4f       	sbci	r17, 0xFF	; 255
     3b8:	ce 01       	movw	r24, r28
     3ba:	05 96       	adiw	r24, 0x05	; 5
     3bc:	b8 01       	movw	r22, r16
     3be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     3c2:	8a 89       	ldd	r24, Y+18	; 0x12
     3c4:	91 e0       	ldi	r25, 0x01	; 1
     3c6:	89 27       	eor	r24, r25
     3c8:	8a 8b       	std	Y+18, r24	; 0x12
     3ca:	c7 01       	movw	r24, r14
     3cc:	b8 01       	movw	r22, r16
     3ce:	ae 01       	movw	r20, r28
     3d0:	47 5e       	subi	r20, 0xE7	; 231
     3d2:	5f 4f       	sbci	r21, 0xFF	; 255
     3d4:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     3d8:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     3dc:	a0 96       	adiw	r28, 0x20	; 32
     3de:	e6 e0       	ldi	r30, 0x06	; 6
     3e0:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__epilogue_restores__+0x18>

000003e4 <__addsf3>:
     3e4:	a0 e2       	ldi	r26, 0x20	; 32
     3e6:	b0 e0       	ldi	r27, 0x00	; 0
     3e8:	e8 ef       	ldi	r30, 0xF8	; 248
     3ea:	f1 e0       	ldi	r31, 0x01	; 1
     3ec:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <__prologue_saves__+0x18>
     3f0:	69 83       	std	Y+1, r22	; 0x01
     3f2:	7a 83       	std	Y+2, r23	; 0x02
     3f4:	8b 83       	std	Y+3, r24	; 0x03
     3f6:	9c 83       	std	Y+4, r25	; 0x04
     3f8:	2d 83       	std	Y+5, r18	; 0x05
     3fa:	3e 83       	std	Y+6, r19	; 0x06
     3fc:	4f 83       	std	Y+7, r20	; 0x07
     3fe:	58 87       	std	Y+8, r21	; 0x08
     400:	f9 e0       	ldi	r31, 0x09	; 9
     402:	ef 2e       	mov	r14, r31
     404:	f1 2c       	mov	r15, r1
     406:	ec 0e       	add	r14, r28
     408:	fd 1e       	adc	r15, r29
     40a:	ce 01       	movw	r24, r28
     40c:	01 96       	adiw	r24, 0x01	; 1
     40e:	b7 01       	movw	r22, r14
     410:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     414:	8e 01       	movw	r16, r28
     416:	0f 5e       	subi	r16, 0xEF	; 239
     418:	1f 4f       	sbci	r17, 0xFF	; 255
     41a:	ce 01       	movw	r24, r28
     41c:	05 96       	adiw	r24, 0x05	; 5
     41e:	b8 01       	movw	r22, r16
     420:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     424:	c7 01       	movw	r24, r14
     426:	b8 01       	movw	r22, r16
     428:	ae 01       	movw	r20, r28
     42a:	47 5e       	subi	r20, 0xE7	; 231
     42c:	5f 4f       	sbci	r21, 0xFF	; 255
     42e:	0e 94 75 00 	call	0xea	; 0xea <_fpadd_parts>
     432:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     436:	a0 96       	adiw	r28, 0x20	; 32
     438:	e6 e0       	ldi	r30, 0x06	; 6
     43a:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__epilogue_restores__+0x18>

0000043e <__mulsf3>:
     43e:	a0 e2       	ldi	r26, 0x20	; 32
     440:	b0 e0       	ldi	r27, 0x00	; 0
     442:	e5 e2       	ldi	r30, 0x25	; 37
     444:	f2 e0       	ldi	r31, 0x02	; 2
     446:	0c 94 8b 1d 	jmp	0x3b16	; 0x3b16 <__prologue_saves__>
     44a:	69 83       	std	Y+1, r22	; 0x01
     44c:	7a 83       	std	Y+2, r23	; 0x02
     44e:	8b 83       	std	Y+3, r24	; 0x03
     450:	9c 83       	std	Y+4, r25	; 0x04
     452:	2d 83       	std	Y+5, r18	; 0x05
     454:	3e 83       	std	Y+6, r19	; 0x06
     456:	4f 83       	std	Y+7, r20	; 0x07
     458:	58 87       	std	Y+8, r21	; 0x08
     45a:	ce 01       	movw	r24, r28
     45c:	01 96       	adiw	r24, 0x01	; 1
     45e:	be 01       	movw	r22, r28
     460:	67 5f       	subi	r22, 0xF7	; 247
     462:	7f 4f       	sbci	r23, 0xFF	; 255
     464:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     468:	ce 01       	movw	r24, r28
     46a:	05 96       	adiw	r24, 0x05	; 5
     46c:	be 01       	movw	r22, r28
     46e:	6f 5e       	subi	r22, 0xEF	; 239
     470:	7f 4f       	sbci	r23, 0xFF	; 255
     472:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     476:	99 85       	ldd	r25, Y+9	; 0x09
     478:	92 30       	cpi	r25, 0x02	; 2
     47a:	88 f0       	brcs	.+34     	; 0x49e <__mulsf3+0x60>
     47c:	89 89       	ldd	r24, Y+17	; 0x11
     47e:	82 30       	cpi	r24, 0x02	; 2
     480:	c8 f0       	brcs	.+50     	; 0x4b4 <__mulsf3+0x76>
     482:	94 30       	cpi	r25, 0x04	; 4
     484:	19 f4       	brne	.+6      	; 0x48c <__mulsf3+0x4e>
     486:	82 30       	cpi	r24, 0x02	; 2
     488:	51 f4       	brne	.+20     	; 0x49e <__mulsf3+0x60>
     48a:	04 c0       	rjmp	.+8      	; 0x494 <__mulsf3+0x56>
     48c:	84 30       	cpi	r24, 0x04	; 4
     48e:	29 f4       	brne	.+10     	; 0x49a <__mulsf3+0x5c>
     490:	92 30       	cpi	r25, 0x02	; 2
     492:	81 f4       	brne	.+32     	; 0x4b4 <__mulsf3+0x76>
     494:	81 e0       	ldi	r24, 0x01	; 1
     496:	91 e0       	ldi	r25, 0x01	; 1
     498:	c6 c0       	rjmp	.+396    	; 0x626 <__mulsf3+0x1e8>
     49a:	92 30       	cpi	r25, 0x02	; 2
     49c:	49 f4       	brne	.+18     	; 0x4b0 <__mulsf3+0x72>
     49e:	20 e0       	ldi	r18, 0x00	; 0
     4a0:	9a 85       	ldd	r25, Y+10	; 0x0a
     4a2:	8a 89       	ldd	r24, Y+18	; 0x12
     4a4:	98 13       	cpse	r25, r24
     4a6:	21 e0       	ldi	r18, 0x01	; 1
     4a8:	2a 87       	std	Y+10, r18	; 0x0a
     4aa:	ce 01       	movw	r24, r28
     4ac:	09 96       	adiw	r24, 0x09	; 9
     4ae:	bb c0       	rjmp	.+374    	; 0x626 <__mulsf3+0x1e8>
     4b0:	82 30       	cpi	r24, 0x02	; 2
     4b2:	49 f4       	brne	.+18     	; 0x4c6 <__mulsf3+0x88>
     4b4:	20 e0       	ldi	r18, 0x00	; 0
     4b6:	9a 85       	ldd	r25, Y+10	; 0x0a
     4b8:	8a 89       	ldd	r24, Y+18	; 0x12
     4ba:	98 13       	cpse	r25, r24
     4bc:	21 e0       	ldi	r18, 0x01	; 1
     4be:	2a 8b       	std	Y+18, r18	; 0x12
     4c0:	ce 01       	movw	r24, r28
     4c2:	41 96       	adiw	r24, 0x11	; 17
     4c4:	b0 c0       	rjmp	.+352    	; 0x626 <__mulsf3+0x1e8>
     4c6:	2d 84       	ldd	r2, Y+13	; 0x0d
     4c8:	3e 84       	ldd	r3, Y+14	; 0x0e
     4ca:	4f 84       	ldd	r4, Y+15	; 0x0f
     4cc:	58 88       	ldd	r5, Y+16	; 0x10
     4ce:	6d 88       	ldd	r6, Y+21	; 0x15
     4d0:	7e 88       	ldd	r7, Y+22	; 0x16
     4d2:	8f 88       	ldd	r8, Y+23	; 0x17
     4d4:	98 8c       	ldd	r9, Y+24	; 0x18
     4d6:	ee 24       	eor	r14, r14
     4d8:	ff 24       	eor	r15, r15
     4da:	87 01       	movw	r16, r14
     4dc:	aa 24       	eor	r10, r10
     4de:	bb 24       	eor	r11, r11
     4e0:	65 01       	movw	r12, r10
     4e2:	40 e0       	ldi	r20, 0x00	; 0
     4e4:	50 e0       	ldi	r21, 0x00	; 0
     4e6:	60 e0       	ldi	r22, 0x00	; 0
     4e8:	70 e0       	ldi	r23, 0x00	; 0
     4ea:	e0 e0       	ldi	r30, 0x00	; 0
     4ec:	f0 e0       	ldi	r31, 0x00	; 0
     4ee:	c1 01       	movw	r24, r2
     4f0:	81 70       	andi	r24, 0x01	; 1
     4f2:	90 70       	andi	r25, 0x00	; 0
     4f4:	89 2b       	or	r24, r25
     4f6:	e9 f0       	breq	.+58     	; 0x532 <__mulsf3+0xf4>
     4f8:	e6 0c       	add	r14, r6
     4fa:	f7 1c       	adc	r15, r7
     4fc:	08 1d       	adc	r16, r8
     4fe:	19 1d       	adc	r17, r9
     500:	9a 01       	movw	r18, r20
     502:	ab 01       	movw	r20, r22
     504:	2a 0d       	add	r18, r10
     506:	3b 1d       	adc	r19, r11
     508:	4c 1d       	adc	r20, r12
     50a:	5d 1d       	adc	r21, r13
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a0 e0       	ldi	r26, 0x00	; 0
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e6 14       	cp	r14, r6
     516:	f7 04       	cpc	r15, r7
     518:	08 05       	cpc	r16, r8
     51a:	19 05       	cpc	r17, r9
     51c:	20 f4       	brcc	.+8      	; 0x526 <__mulsf3+0xe8>
     51e:	81 e0       	ldi	r24, 0x01	; 1
     520:	90 e0       	ldi	r25, 0x00	; 0
     522:	a0 e0       	ldi	r26, 0x00	; 0
     524:	b0 e0       	ldi	r27, 0x00	; 0
     526:	ba 01       	movw	r22, r20
     528:	a9 01       	movw	r20, r18
     52a:	48 0f       	add	r20, r24
     52c:	59 1f       	adc	r21, r25
     52e:	6a 1f       	adc	r22, r26
     530:	7b 1f       	adc	r23, r27
     532:	aa 0c       	add	r10, r10
     534:	bb 1c       	adc	r11, r11
     536:	cc 1c       	adc	r12, r12
     538:	dd 1c       	adc	r13, r13
     53a:	97 fe       	sbrs	r9, 7
     53c:	08 c0       	rjmp	.+16     	; 0x54e <__mulsf3+0x110>
     53e:	81 e0       	ldi	r24, 0x01	; 1
     540:	90 e0       	ldi	r25, 0x00	; 0
     542:	a0 e0       	ldi	r26, 0x00	; 0
     544:	b0 e0       	ldi	r27, 0x00	; 0
     546:	a8 2a       	or	r10, r24
     548:	b9 2a       	or	r11, r25
     54a:	ca 2a       	or	r12, r26
     54c:	db 2a       	or	r13, r27
     54e:	31 96       	adiw	r30, 0x01	; 1
     550:	e0 32       	cpi	r30, 0x20	; 32
     552:	f1 05       	cpc	r31, r1
     554:	49 f0       	breq	.+18     	; 0x568 <__mulsf3+0x12a>
     556:	66 0c       	add	r6, r6
     558:	77 1c       	adc	r7, r7
     55a:	88 1c       	adc	r8, r8
     55c:	99 1c       	adc	r9, r9
     55e:	56 94       	lsr	r5
     560:	47 94       	ror	r4
     562:	37 94       	ror	r3
     564:	27 94       	ror	r2
     566:	c3 cf       	rjmp	.-122    	; 0x4ee <__mulsf3+0xb0>
     568:	fa 85       	ldd	r31, Y+10	; 0x0a
     56a:	ea 89       	ldd	r30, Y+18	; 0x12
     56c:	2b 89       	ldd	r18, Y+19	; 0x13
     56e:	3c 89       	ldd	r19, Y+20	; 0x14
     570:	8b 85       	ldd	r24, Y+11	; 0x0b
     572:	9c 85       	ldd	r25, Y+12	; 0x0c
     574:	28 0f       	add	r18, r24
     576:	39 1f       	adc	r19, r25
     578:	2e 5f       	subi	r18, 0xFE	; 254
     57a:	3f 4f       	sbci	r19, 0xFF	; 255
     57c:	17 c0       	rjmp	.+46     	; 0x5ac <__mulsf3+0x16e>
     57e:	ca 01       	movw	r24, r20
     580:	81 70       	andi	r24, 0x01	; 1
     582:	90 70       	andi	r25, 0x00	; 0
     584:	89 2b       	or	r24, r25
     586:	61 f0       	breq	.+24     	; 0x5a0 <__mulsf3+0x162>
     588:	16 95       	lsr	r17
     58a:	07 95       	ror	r16
     58c:	f7 94       	ror	r15
     58e:	e7 94       	ror	r14
     590:	80 e0       	ldi	r24, 0x00	; 0
     592:	90 e0       	ldi	r25, 0x00	; 0
     594:	a0 e0       	ldi	r26, 0x00	; 0
     596:	b0 e8       	ldi	r27, 0x80	; 128
     598:	e8 2a       	or	r14, r24
     59a:	f9 2a       	or	r15, r25
     59c:	0a 2b       	or	r16, r26
     59e:	1b 2b       	or	r17, r27
     5a0:	76 95       	lsr	r23
     5a2:	67 95       	ror	r22
     5a4:	57 95       	ror	r21
     5a6:	47 95       	ror	r20
     5a8:	2f 5f       	subi	r18, 0xFF	; 255
     5aa:	3f 4f       	sbci	r19, 0xFF	; 255
     5ac:	77 fd       	sbrc	r23, 7
     5ae:	e7 cf       	rjmp	.-50     	; 0x57e <__mulsf3+0x140>
     5b0:	0c c0       	rjmp	.+24     	; 0x5ca <__mulsf3+0x18c>
     5b2:	44 0f       	add	r20, r20
     5b4:	55 1f       	adc	r21, r21
     5b6:	66 1f       	adc	r22, r22
     5b8:	77 1f       	adc	r23, r23
     5ba:	17 fd       	sbrc	r17, 7
     5bc:	41 60       	ori	r20, 0x01	; 1
     5be:	ee 0c       	add	r14, r14
     5c0:	ff 1c       	adc	r15, r15
     5c2:	00 1f       	adc	r16, r16
     5c4:	11 1f       	adc	r17, r17
     5c6:	21 50       	subi	r18, 0x01	; 1
     5c8:	30 40       	sbci	r19, 0x00	; 0
     5ca:	40 30       	cpi	r20, 0x00	; 0
     5cc:	90 e0       	ldi	r25, 0x00	; 0
     5ce:	59 07       	cpc	r21, r25
     5d0:	90 e0       	ldi	r25, 0x00	; 0
     5d2:	69 07       	cpc	r22, r25
     5d4:	90 e4       	ldi	r25, 0x40	; 64
     5d6:	79 07       	cpc	r23, r25
     5d8:	60 f3       	brcs	.-40     	; 0x5b2 <__mulsf3+0x174>
     5da:	2b 8f       	std	Y+27, r18	; 0x1b
     5dc:	3c 8f       	std	Y+28, r19	; 0x1c
     5de:	db 01       	movw	r26, r22
     5e0:	ca 01       	movw	r24, r20
     5e2:	8f 77       	andi	r24, 0x7F	; 127
     5e4:	90 70       	andi	r25, 0x00	; 0
     5e6:	a0 70       	andi	r26, 0x00	; 0
     5e8:	b0 70       	andi	r27, 0x00	; 0
     5ea:	80 34       	cpi	r24, 0x40	; 64
     5ec:	91 05       	cpc	r25, r1
     5ee:	a1 05       	cpc	r26, r1
     5f0:	b1 05       	cpc	r27, r1
     5f2:	61 f4       	brne	.+24     	; 0x60c <__mulsf3+0x1ce>
     5f4:	47 fd       	sbrc	r20, 7
     5f6:	0a c0       	rjmp	.+20     	; 0x60c <__mulsf3+0x1ce>
     5f8:	e1 14       	cp	r14, r1
     5fa:	f1 04       	cpc	r15, r1
     5fc:	01 05       	cpc	r16, r1
     5fe:	11 05       	cpc	r17, r1
     600:	29 f0       	breq	.+10     	; 0x60c <__mulsf3+0x1ce>
     602:	40 5c       	subi	r20, 0xC0	; 192
     604:	5f 4f       	sbci	r21, 0xFF	; 255
     606:	6f 4f       	sbci	r22, 0xFF	; 255
     608:	7f 4f       	sbci	r23, 0xFF	; 255
     60a:	40 78       	andi	r20, 0x80	; 128
     60c:	1a 8e       	std	Y+26, r1	; 0x1a
     60e:	fe 17       	cp	r31, r30
     610:	11 f0       	breq	.+4      	; 0x616 <__mulsf3+0x1d8>
     612:	81 e0       	ldi	r24, 0x01	; 1
     614:	8a 8f       	std	Y+26, r24	; 0x1a
     616:	4d 8f       	std	Y+29, r20	; 0x1d
     618:	5e 8f       	std	Y+30, r21	; 0x1e
     61a:	6f 8f       	std	Y+31, r22	; 0x1f
     61c:	78 a3       	std	Y+32, r23	; 0x20
     61e:	83 e0       	ldi	r24, 0x03	; 3
     620:	89 8f       	std	Y+25, r24	; 0x19
     622:	ce 01       	movw	r24, r28
     624:	49 96       	adiw	r24, 0x19	; 25
     626:	0e 94 fd 03 	call	0x7fa	; 0x7fa <__pack_f>
     62a:	a0 96       	adiw	r28, 0x20	; 32
     62c:	e2 e1       	ldi	r30, 0x12	; 18
     62e:	0c 94 a7 1d 	jmp	0x3b4e	; 0x3b4e <__epilogue_restores__>

00000632 <__gtsf2>:
     632:	a8 e1       	ldi	r26, 0x18	; 24
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	ef e1       	ldi	r30, 0x1F	; 31
     638:	f3 e0       	ldi	r31, 0x03	; 3
     63a:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <__prologue_saves__+0x18>
     63e:	69 83       	std	Y+1, r22	; 0x01
     640:	7a 83       	std	Y+2, r23	; 0x02
     642:	8b 83       	std	Y+3, r24	; 0x03
     644:	9c 83       	std	Y+4, r25	; 0x04
     646:	2d 83       	std	Y+5, r18	; 0x05
     648:	3e 83       	std	Y+6, r19	; 0x06
     64a:	4f 83       	std	Y+7, r20	; 0x07
     64c:	58 87       	std	Y+8, r21	; 0x08
     64e:	89 e0       	ldi	r24, 0x09	; 9
     650:	e8 2e       	mov	r14, r24
     652:	f1 2c       	mov	r15, r1
     654:	ec 0e       	add	r14, r28
     656:	fd 1e       	adc	r15, r29
     658:	ce 01       	movw	r24, r28
     65a:	01 96       	adiw	r24, 0x01	; 1
     65c:	b7 01       	movw	r22, r14
     65e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     662:	8e 01       	movw	r16, r28
     664:	0f 5e       	subi	r16, 0xEF	; 239
     666:	1f 4f       	sbci	r17, 0xFF	; 255
     668:	ce 01       	movw	r24, r28
     66a:	05 96       	adiw	r24, 0x05	; 5
     66c:	b8 01       	movw	r22, r16
     66e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     672:	89 85       	ldd	r24, Y+9	; 0x09
     674:	82 30       	cpi	r24, 0x02	; 2
     676:	40 f0       	brcs	.+16     	; 0x688 <__gtsf2+0x56>
     678:	89 89       	ldd	r24, Y+17	; 0x11
     67a:	82 30       	cpi	r24, 0x02	; 2
     67c:	28 f0       	brcs	.+10     	; 0x688 <__gtsf2+0x56>
     67e:	c7 01       	movw	r24, r14
     680:	b8 01       	movw	r22, r16
     682:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     686:	01 c0       	rjmp	.+2      	; 0x68a <__gtsf2+0x58>
     688:	8f ef       	ldi	r24, 0xFF	; 255
     68a:	68 96       	adiw	r28, 0x18	; 24
     68c:	e6 e0       	ldi	r30, 0x06	; 6
     68e:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__epilogue_restores__+0x18>

00000692 <__gesf2>:
     692:	a8 e1       	ldi	r26, 0x18	; 24
     694:	b0 e0       	ldi	r27, 0x00	; 0
     696:	ef e4       	ldi	r30, 0x4F	; 79
     698:	f3 e0       	ldi	r31, 0x03	; 3
     69a:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <__prologue_saves__+0x18>
     69e:	69 83       	std	Y+1, r22	; 0x01
     6a0:	7a 83       	std	Y+2, r23	; 0x02
     6a2:	8b 83       	std	Y+3, r24	; 0x03
     6a4:	9c 83       	std	Y+4, r25	; 0x04
     6a6:	2d 83       	std	Y+5, r18	; 0x05
     6a8:	3e 83       	std	Y+6, r19	; 0x06
     6aa:	4f 83       	std	Y+7, r20	; 0x07
     6ac:	58 87       	std	Y+8, r21	; 0x08
     6ae:	89 e0       	ldi	r24, 0x09	; 9
     6b0:	e8 2e       	mov	r14, r24
     6b2:	f1 2c       	mov	r15, r1
     6b4:	ec 0e       	add	r14, r28
     6b6:	fd 1e       	adc	r15, r29
     6b8:	ce 01       	movw	r24, r28
     6ba:	01 96       	adiw	r24, 0x01	; 1
     6bc:	b7 01       	movw	r22, r14
     6be:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6c2:	8e 01       	movw	r16, r28
     6c4:	0f 5e       	subi	r16, 0xEF	; 239
     6c6:	1f 4f       	sbci	r17, 0xFF	; 255
     6c8:	ce 01       	movw	r24, r28
     6ca:	05 96       	adiw	r24, 0x05	; 5
     6cc:	b8 01       	movw	r22, r16
     6ce:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     6d2:	89 85       	ldd	r24, Y+9	; 0x09
     6d4:	82 30       	cpi	r24, 0x02	; 2
     6d6:	40 f0       	brcs	.+16     	; 0x6e8 <__gesf2+0x56>
     6d8:	89 89       	ldd	r24, Y+17	; 0x11
     6da:	82 30       	cpi	r24, 0x02	; 2
     6dc:	28 f0       	brcs	.+10     	; 0x6e8 <__gesf2+0x56>
     6de:	c7 01       	movw	r24, r14
     6e0:	b8 01       	movw	r22, r16
     6e2:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     6e6:	01 c0       	rjmp	.+2      	; 0x6ea <__gesf2+0x58>
     6e8:	8f ef       	ldi	r24, 0xFF	; 255
     6ea:	68 96       	adiw	r28, 0x18	; 24
     6ec:	e6 e0       	ldi	r30, 0x06	; 6
     6ee:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__epilogue_restores__+0x18>

000006f2 <__ltsf2>:
     6f2:	a8 e1       	ldi	r26, 0x18	; 24
     6f4:	b0 e0       	ldi	r27, 0x00	; 0
     6f6:	ef e7       	ldi	r30, 0x7F	; 127
     6f8:	f3 e0       	ldi	r31, 0x03	; 3
     6fa:	0c 94 97 1d 	jmp	0x3b2e	; 0x3b2e <__prologue_saves__+0x18>
     6fe:	69 83       	std	Y+1, r22	; 0x01
     700:	7a 83       	std	Y+2, r23	; 0x02
     702:	8b 83       	std	Y+3, r24	; 0x03
     704:	9c 83       	std	Y+4, r25	; 0x04
     706:	2d 83       	std	Y+5, r18	; 0x05
     708:	3e 83       	std	Y+6, r19	; 0x06
     70a:	4f 83       	std	Y+7, r20	; 0x07
     70c:	58 87       	std	Y+8, r21	; 0x08
     70e:	89 e0       	ldi	r24, 0x09	; 9
     710:	e8 2e       	mov	r14, r24
     712:	f1 2c       	mov	r15, r1
     714:	ec 0e       	add	r14, r28
     716:	fd 1e       	adc	r15, r29
     718:	ce 01       	movw	r24, r28
     71a:	01 96       	adiw	r24, 0x01	; 1
     71c:	b7 01       	movw	r22, r14
     71e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     722:	8e 01       	movw	r16, r28
     724:	0f 5e       	subi	r16, 0xEF	; 239
     726:	1f 4f       	sbci	r17, 0xFF	; 255
     728:	ce 01       	movw	r24, r28
     72a:	05 96       	adiw	r24, 0x05	; 5
     72c:	b8 01       	movw	r22, r16
     72e:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     732:	89 85       	ldd	r24, Y+9	; 0x09
     734:	82 30       	cpi	r24, 0x02	; 2
     736:	40 f0       	brcs	.+16     	; 0x748 <__ltsf2+0x56>
     738:	89 89       	ldd	r24, Y+17	; 0x11
     73a:	82 30       	cpi	r24, 0x02	; 2
     73c:	28 f0       	brcs	.+10     	; 0x748 <__ltsf2+0x56>
     73e:	c7 01       	movw	r24, r14
     740:	b8 01       	movw	r22, r16
     742:	0e 94 4a 05 	call	0xa94	; 0xa94 <__fpcmp_parts_f>
     746:	01 c0       	rjmp	.+2      	; 0x74a <__ltsf2+0x58>
     748:	81 e0       	ldi	r24, 0x01	; 1
     74a:	68 96       	adiw	r28, 0x18	; 24
     74c:	e6 e0       	ldi	r30, 0x06	; 6
     74e:	0c 94 b3 1d 	jmp	0x3b66	; 0x3b66 <__epilogue_restores__+0x18>

00000752 <__fixsfsi>:
     752:	ac e0       	ldi	r26, 0x0C	; 12
     754:	b0 e0       	ldi	r27, 0x00	; 0
     756:	ef ea       	ldi	r30, 0xAF	; 175
     758:	f3 e0       	ldi	r31, 0x03	; 3
     75a:	0c 94 9b 1d 	jmp	0x3b36	; 0x3b36 <__prologue_saves__+0x20>
     75e:	69 83       	std	Y+1, r22	; 0x01
     760:	7a 83       	std	Y+2, r23	; 0x02
     762:	8b 83       	std	Y+3, r24	; 0x03
     764:	9c 83       	std	Y+4, r25	; 0x04
     766:	ce 01       	movw	r24, r28
     768:	01 96       	adiw	r24, 0x01	; 1
     76a:	be 01       	movw	r22, r28
     76c:	6b 5f       	subi	r22, 0xFB	; 251
     76e:	7f 4f       	sbci	r23, 0xFF	; 255
     770:	0e 94 d2 04 	call	0x9a4	; 0x9a4 <__unpack_f>
     774:	8d 81       	ldd	r24, Y+5	; 0x05
     776:	82 30       	cpi	r24, 0x02	; 2
     778:	61 f1       	breq	.+88     	; 0x7d2 <__fixsfsi+0x80>
     77a:	82 30       	cpi	r24, 0x02	; 2
     77c:	50 f1       	brcs	.+84     	; 0x7d2 <__fixsfsi+0x80>
     77e:	84 30       	cpi	r24, 0x04	; 4
     780:	21 f4       	brne	.+8      	; 0x78a <__fixsfsi+0x38>
     782:	8e 81       	ldd	r24, Y+6	; 0x06
     784:	88 23       	and	r24, r24
     786:	51 f1       	breq	.+84     	; 0x7dc <__fixsfsi+0x8a>
     788:	2e c0       	rjmp	.+92     	; 0x7e6 <__fixsfsi+0x94>
     78a:	2f 81       	ldd	r18, Y+7	; 0x07
     78c:	38 85       	ldd	r19, Y+8	; 0x08
     78e:	37 fd       	sbrc	r19, 7
     790:	20 c0       	rjmp	.+64     	; 0x7d2 <__fixsfsi+0x80>
     792:	6e 81       	ldd	r22, Y+6	; 0x06
     794:	2f 31       	cpi	r18, 0x1F	; 31
     796:	31 05       	cpc	r19, r1
     798:	1c f0       	brlt	.+6      	; 0x7a0 <__fixsfsi+0x4e>
     79a:	66 23       	and	r22, r22
     79c:	f9 f0       	breq	.+62     	; 0x7dc <__fixsfsi+0x8a>
     79e:	23 c0       	rjmp	.+70     	; 0x7e6 <__fixsfsi+0x94>
     7a0:	8e e1       	ldi	r24, 0x1E	; 30
     7a2:	90 e0       	ldi	r25, 0x00	; 0
     7a4:	82 1b       	sub	r24, r18
     7a6:	93 0b       	sbc	r25, r19
     7a8:	29 85       	ldd	r18, Y+9	; 0x09
     7aa:	3a 85       	ldd	r19, Y+10	; 0x0a
     7ac:	4b 85       	ldd	r20, Y+11	; 0x0b
     7ae:	5c 85       	ldd	r21, Y+12	; 0x0c
     7b0:	04 c0       	rjmp	.+8      	; 0x7ba <__fixsfsi+0x68>
     7b2:	56 95       	lsr	r21
     7b4:	47 95       	ror	r20
     7b6:	37 95       	ror	r19
     7b8:	27 95       	ror	r18
     7ba:	8a 95       	dec	r24
     7bc:	d2 f7       	brpl	.-12     	; 0x7b2 <__fixsfsi+0x60>
     7be:	66 23       	and	r22, r22
     7c0:	b1 f0       	breq	.+44     	; 0x7ee <__fixsfsi+0x9c>
     7c2:	50 95       	com	r21
     7c4:	40 95       	com	r20
     7c6:	30 95       	com	r19
     7c8:	21 95       	neg	r18
     7ca:	3f 4f       	sbci	r19, 0xFF	; 255
     7cc:	4f 4f       	sbci	r20, 0xFF	; 255
     7ce:	5f 4f       	sbci	r21, 0xFF	; 255
     7d0:	0e c0       	rjmp	.+28     	; 0x7ee <__fixsfsi+0x9c>
     7d2:	20 e0       	ldi	r18, 0x00	; 0
     7d4:	30 e0       	ldi	r19, 0x00	; 0
     7d6:	40 e0       	ldi	r20, 0x00	; 0
     7d8:	50 e0       	ldi	r21, 0x00	; 0
     7da:	09 c0       	rjmp	.+18     	; 0x7ee <__fixsfsi+0x9c>
     7dc:	2f ef       	ldi	r18, 0xFF	; 255
     7de:	3f ef       	ldi	r19, 0xFF	; 255
     7e0:	4f ef       	ldi	r20, 0xFF	; 255
     7e2:	5f e7       	ldi	r21, 0x7F	; 127
     7e4:	04 c0       	rjmp	.+8      	; 0x7ee <__fixsfsi+0x9c>
     7e6:	20 e0       	ldi	r18, 0x00	; 0
     7e8:	30 e0       	ldi	r19, 0x00	; 0
     7ea:	40 e0       	ldi	r20, 0x00	; 0
     7ec:	50 e8       	ldi	r21, 0x80	; 128
     7ee:	b9 01       	movw	r22, r18
     7f0:	ca 01       	movw	r24, r20
     7f2:	2c 96       	adiw	r28, 0x0c	; 12
     7f4:	e2 e0       	ldi	r30, 0x02	; 2
     7f6:	0c 94 b7 1d 	jmp	0x3b6e	; 0x3b6e <__epilogue_restores__+0x20>

000007fa <__pack_f>:
     7fa:	df 92       	push	r13
     7fc:	ef 92       	push	r14
     7fe:	ff 92       	push	r15
     800:	0f 93       	push	r16
     802:	1f 93       	push	r17
     804:	fc 01       	movw	r30, r24
     806:	e4 80       	ldd	r14, Z+4	; 0x04
     808:	f5 80       	ldd	r15, Z+5	; 0x05
     80a:	06 81       	ldd	r16, Z+6	; 0x06
     80c:	17 81       	ldd	r17, Z+7	; 0x07
     80e:	d1 80       	ldd	r13, Z+1	; 0x01
     810:	80 81       	ld	r24, Z
     812:	82 30       	cpi	r24, 0x02	; 2
     814:	48 f4       	brcc	.+18     	; 0x828 <__pack_f+0x2e>
     816:	80 e0       	ldi	r24, 0x00	; 0
     818:	90 e0       	ldi	r25, 0x00	; 0
     81a:	a0 e1       	ldi	r26, 0x10	; 16
     81c:	b0 e0       	ldi	r27, 0x00	; 0
     81e:	e8 2a       	or	r14, r24
     820:	f9 2a       	or	r15, r25
     822:	0a 2b       	or	r16, r26
     824:	1b 2b       	or	r17, r27
     826:	a5 c0       	rjmp	.+330    	; 0x972 <__stack+0x113>
     828:	84 30       	cpi	r24, 0x04	; 4
     82a:	09 f4       	brne	.+2      	; 0x82e <__pack_f+0x34>
     82c:	9f c0       	rjmp	.+318    	; 0x96c <__stack+0x10d>
     82e:	82 30       	cpi	r24, 0x02	; 2
     830:	21 f4       	brne	.+8      	; 0x83a <__pack_f+0x40>
     832:	ee 24       	eor	r14, r14
     834:	ff 24       	eor	r15, r15
     836:	87 01       	movw	r16, r14
     838:	05 c0       	rjmp	.+10     	; 0x844 <__pack_f+0x4a>
     83a:	e1 14       	cp	r14, r1
     83c:	f1 04       	cpc	r15, r1
     83e:	01 05       	cpc	r16, r1
     840:	11 05       	cpc	r17, r1
     842:	19 f4       	brne	.+6      	; 0x84a <__pack_f+0x50>
     844:	e0 e0       	ldi	r30, 0x00	; 0
     846:	f0 e0       	ldi	r31, 0x00	; 0
     848:	96 c0       	rjmp	.+300    	; 0x976 <__stack+0x117>
     84a:	62 81       	ldd	r22, Z+2	; 0x02
     84c:	73 81       	ldd	r23, Z+3	; 0x03
     84e:	9f ef       	ldi	r25, 0xFF	; 255
     850:	62 38       	cpi	r22, 0x82	; 130
     852:	79 07       	cpc	r23, r25
     854:	0c f0       	brlt	.+2      	; 0x858 <__pack_f+0x5e>
     856:	5b c0       	rjmp	.+182    	; 0x90e <__stack+0xaf>
     858:	22 e8       	ldi	r18, 0x82	; 130
     85a:	3f ef       	ldi	r19, 0xFF	; 255
     85c:	26 1b       	sub	r18, r22
     85e:	37 0b       	sbc	r19, r23
     860:	2a 31       	cpi	r18, 0x1A	; 26
     862:	31 05       	cpc	r19, r1
     864:	2c f0       	brlt	.+10     	; 0x870 <__stack+0x11>
     866:	20 e0       	ldi	r18, 0x00	; 0
     868:	30 e0       	ldi	r19, 0x00	; 0
     86a:	40 e0       	ldi	r20, 0x00	; 0
     86c:	50 e0       	ldi	r21, 0x00	; 0
     86e:	2a c0       	rjmp	.+84     	; 0x8c4 <__stack+0x65>
     870:	b8 01       	movw	r22, r16
     872:	a7 01       	movw	r20, r14
     874:	02 2e       	mov	r0, r18
     876:	04 c0       	rjmp	.+8      	; 0x880 <__stack+0x21>
     878:	76 95       	lsr	r23
     87a:	67 95       	ror	r22
     87c:	57 95       	ror	r21
     87e:	47 95       	ror	r20
     880:	0a 94       	dec	r0
     882:	d2 f7       	brpl	.-12     	; 0x878 <__stack+0x19>
     884:	81 e0       	ldi	r24, 0x01	; 1
     886:	90 e0       	ldi	r25, 0x00	; 0
     888:	a0 e0       	ldi	r26, 0x00	; 0
     88a:	b0 e0       	ldi	r27, 0x00	; 0
     88c:	04 c0       	rjmp	.+8      	; 0x896 <__stack+0x37>
     88e:	88 0f       	add	r24, r24
     890:	99 1f       	adc	r25, r25
     892:	aa 1f       	adc	r26, r26
     894:	bb 1f       	adc	r27, r27
     896:	2a 95       	dec	r18
     898:	d2 f7       	brpl	.-12     	; 0x88e <__stack+0x2f>
     89a:	01 97       	sbiw	r24, 0x01	; 1
     89c:	a1 09       	sbc	r26, r1
     89e:	b1 09       	sbc	r27, r1
     8a0:	8e 21       	and	r24, r14
     8a2:	9f 21       	and	r25, r15
     8a4:	a0 23       	and	r26, r16
     8a6:	b1 23       	and	r27, r17
     8a8:	00 97       	sbiw	r24, 0x00	; 0
     8aa:	a1 05       	cpc	r26, r1
     8ac:	b1 05       	cpc	r27, r1
     8ae:	21 f0       	breq	.+8      	; 0x8b8 <__stack+0x59>
     8b0:	81 e0       	ldi	r24, 0x01	; 1
     8b2:	90 e0       	ldi	r25, 0x00	; 0
     8b4:	a0 e0       	ldi	r26, 0x00	; 0
     8b6:	b0 e0       	ldi	r27, 0x00	; 0
     8b8:	9a 01       	movw	r18, r20
     8ba:	ab 01       	movw	r20, r22
     8bc:	28 2b       	or	r18, r24
     8be:	39 2b       	or	r19, r25
     8c0:	4a 2b       	or	r20, r26
     8c2:	5b 2b       	or	r21, r27
     8c4:	da 01       	movw	r26, r20
     8c6:	c9 01       	movw	r24, r18
     8c8:	8f 77       	andi	r24, 0x7F	; 127
     8ca:	90 70       	andi	r25, 0x00	; 0
     8cc:	a0 70       	andi	r26, 0x00	; 0
     8ce:	b0 70       	andi	r27, 0x00	; 0
     8d0:	80 34       	cpi	r24, 0x40	; 64
     8d2:	91 05       	cpc	r25, r1
     8d4:	a1 05       	cpc	r26, r1
     8d6:	b1 05       	cpc	r27, r1
     8d8:	39 f4       	brne	.+14     	; 0x8e8 <__stack+0x89>
     8da:	27 ff       	sbrs	r18, 7
     8dc:	09 c0       	rjmp	.+18     	; 0x8f0 <__stack+0x91>
     8de:	20 5c       	subi	r18, 0xC0	; 192
     8e0:	3f 4f       	sbci	r19, 0xFF	; 255
     8e2:	4f 4f       	sbci	r20, 0xFF	; 255
     8e4:	5f 4f       	sbci	r21, 0xFF	; 255
     8e6:	04 c0       	rjmp	.+8      	; 0x8f0 <__stack+0x91>
     8e8:	21 5c       	subi	r18, 0xC1	; 193
     8ea:	3f 4f       	sbci	r19, 0xFF	; 255
     8ec:	4f 4f       	sbci	r20, 0xFF	; 255
     8ee:	5f 4f       	sbci	r21, 0xFF	; 255
     8f0:	e0 e0       	ldi	r30, 0x00	; 0
     8f2:	f0 e0       	ldi	r31, 0x00	; 0
     8f4:	20 30       	cpi	r18, 0x00	; 0
     8f6:	a0 e0       	ldi	r26, 0x00	; 0
     8f8:	3a 07       	cpc	r19, r26
     8fa:	a0 e0       	ldi	r26, 0x00	; 0
     8fc:	4a 07       	cpc	r20, r26
     8fe:	a0 e4       	ldi	r26, 0x40	; 64
     900:	5a 07       	cpc	r21, r26
     902:	10 f0       	brcs	.+4      	; 0x908 <__stack+0xa9>
     904:	e1 e0       	ldi	r30, 0x01	; 1
     906:	f0 e0       	ldi	r31, 0x00	; 0
     908:	79 01       	movw	r14, r18
     90a:	8a 01       	movw	r16, r20
     90c:	27 c0       	rjmp	.+78     	; 0x95c <__stack+0xfd>
     90e:	60 38       	cpi	r22, 0x80	; 128
     910:	71 05       	cpc	r23, r1
     912:	64 f5       	brge	.+88     	; 0x96c <__stack+0x10d>
     914:	fb 01       	movw	r30, r22
     916:	e1 58       	subi	r30, 0x81	; 129
     918:	ff 4f       	sbci	r31, 0xFF	; 255
     91a:	d8 01       	movw	r26, r16
     91c:	c7 01       	movw	r24, r14
     91e:	8f 77       	andi	r24, 0x7F	; 127
     920:	90 70       	andi	r25, 0x00	; 0
     922:	a0 70       	andi	r26, 0x00	; 0
     924:	b0 70       	andi	r27, 0x00	; 0
     926:	80 34       	cpi	r24, 0x40	; 64
     928:	91 05       	cpc	r25, r1
     92a:	a1 05       	cpc	r26, r1
     92c:	b1 05       	cpc	r27, r1
     92e:	39 f4       	brne	.+14     	; 0x93e <__stack+0xdf>
     930:	e7 fe       	sbrs	r14, 7
     932:	0d c0       	rjmp	.+26     	; 0x94e <__stack+0xef>
     934:	80 e4       	ldi	r24, 0x40	; 64
     936:	90 e0       	ldi	r25, 0x00	; 0
     938:	a0 e0       	ldi	r26, 0x00	; 0
     93a:	b0 e0       	ldi	r27, 0x00	; 0
     93c:	04 c0       	rjmp	.+8      	; 0x946 <__stack+0xe7>
     93e:	8f e3       	ldi	r24, 0x3F	; 63
     940:	90 e0       	ldi	r25, 0x00	; 0
     942:	a0 e0       	ldi	r26, 0x00	; 0
     944:	b0 e0       	ldi	r27, 0x00	; 0
     946:	e8 0e       	add	r14, r24
     948:	f9 1e       	adc	r15, r25
     94a:	0a 1f       	adc	r16, r26
     94c:	1b 1f       	adc	r17, r27
     94e:	17 ff       	sbrs	r17, 7
     950:	05 c0       	rjmp	.+10     	; 0x95c <__stack+0xfd>
     952:	16 95       	lsr	r17
     954:	07 95       	ror	r16
     956:	f7 94       	ror	r15
     958:	e7 94       	ror	r14
     95a:	31 96       	adiw	r30, 0x01	; 1
     95c:	87 e0       	ldi	r24, 0x07	; 7
     95e:	16 95       	lsr	r17
     960:	07 95       	ror	r16
     962:	f7 94       	ror	r15
     964:	e7 94       	ror	r14
     966:	8a 95       	dec	r24
     968:	d1 f7       	brne	.-12     	; 0x95e <__stack+0xff>
     96a:	05 c0       	rjmp	.+10     	; 0x976 <__stack+0x117>
     96c:	ee 24       	eor	r14, r14
     96e:	ff 24       	eor	r15, r15
     970:	87 01       	movw	r16, r14
     972:	ef ef       	ldi	r30, 0xFF	; 255
     974:	f0 e0       	ldi	r31, 0x00	; 0
     976:	6e 2f       	mov	r22, r30
     978:	67 95       	ror	r22
     97a:	66 27       	eor	r22, r22
     97c:	67 95       	ror	r22
     97e:	90 2f       	mov	r25, r16
     980:	9f 77       	andi	r25, 0x7F	; 127
     982:	d7 94       	ror	r13
     984:	dd 24       	eor	r13, r13
     986:	d7 94       	ror	r13
     988:	8e 2f       	mov	r24, r30
     98a:	86 95       	lsr	r24
     98c:	49 2f       	mov	r20, r25
     98e:	46 2b       	or	r20, r22
     990:	58 2f       	mov	r21, r24
     992:	5d 29       	or	r21, r13
     994:	b7 01       	movw	r22, r14
     996:	ca 01       	movw	r24, r20
     998:	1f 91       	pop	r17
     99a:	0f 91       	pop	r16
     99c:	ff 90       	pop	r15
     99e:	ef 90       	pop	r14
     9a0:	df 90       	pop	r13
     9a2:	08 95       	ret

000009a4 <__unpack_f>:
     9a4:	fc 01       	movw	r30, r24
     9a6:	db 01       	movw	r26, r22
     9a8:	40 81       	ld	r20, Z
     9aa:	51 81       	ldd	r21, Z+1	; 0x01
     9ac:	22 81       	ldd	r18, Z+2	; 0x02
     9ae:	62 2f       	mov	r22, r18
     9b0:	6f 77       	andi	r22, 0x7F	; 127
     9b2:	70 e0       	ldi	r23, 0x00	; 0
     9b4:	22 1f       	adc	r18, r18
     9b6:	22 27       	eor	r18, r18
     9b8:	22 1f       	adc	r18, r18
     9ba:	93 81       	ldd	r25, Z+3	; 0x03
     9bc:	89 2f       	mov	r24, r25
     9be:	88 0f       	add	r24, r24
     9c0:	82 2b       	or	r24, r18
     9c2:	28 2f       	mov	r18, r24
     9c4:	30 e0       	ldi	r19, 0x00	; 0
     9c6:	99 1f       	adc	r25, r25
     9c8:	99 27       	eor	r25, r25
     9ca:	99 1f       	adc	r25, r25
     9cc:	11 96       	adiw	r26, 0x01	; 1
     9ce:	9c 93       	st	X, r25
     9d0:	11 97       	sbiw	r26, 0x01	; 1
     9d2:	21 15       	cp	r18, r1
     9d4:	31 05       	cpc	r19, r1
     9d6:	a9 f5       	brne	.+106    	; 0xa42 <__unpack_f+0x9e>
     9d8:	41 15       	cp	r20, r1
     9da:	51 05       	cpc	r21, r1
     9dc:	61 05       	cpc	r22, r1
     9de:	71 05       	cpc	r23, r1
     9e0:	11 f4       	brne	.+4      	; 0x9e6 <__unpack_f+0x42>
     9e2:	82 e0       	ldi	r24, 0x02	; 2
     9e4:	37 c0       	rjmp	.+110    	; 0xa54 <__unpack_f+0xb0>
     9e6:	82 e8       	ldi	r24, 0x82	; 130
     9e8:	9f ef       	ldi	r25, 0xFF	; 255
     9ea:	13 96       	adiw	r26, 0x03	; 3
     9ec:	9c 93       	st	X, r25
     9ee:	8e 93       	st	-X, r24
     9f0:	12 97       	sbiw	r26, 0x02	; 2
     9f2:	9a 01       	movw	r18, r20
     9f4:	ab 01       	movw	r20, r22
     9f6:	67 e0       	ldi	r22, 0x07	; 7
     9f8:	22 0f       	add	r18, r18
     9fa:	33 1f       	adc	r19, r19
     9fc:	44 1f       	adc	r20, r20
     9fe:	55 1f       	adc	r21, r21
     a00:	6a 95       	dec	r22
     a02:	d1 f7       	brne	.-12     	; 0x9f8 <__unpack_f+0x54>
     a04:	83 e0       	ldi	r24, 0x03	; 3
     a06:	8c 93       	st	X, r24
     a08:	0d c0       	rjmp	.+26     	; 0xa24 <__unpack_f+0x80>
     a0a:	22 0f       	add	r18, r18
     a0c:	33 1f       	adc	r19, r19
     a0e:	44 1f       	adc	r20, r20
     a10:	55 1f       	adc	r21, r21
     a12:	12 96       	adiw	r26, 0x02	; 2
     a14:	8d 91       	ld	r24, X+
     a16:	9c 91       	ld	r25, X
     a18:	13 97       	sbiw	r26, 0x03	; 3
     a1a:	01 97       	sbiw	r24, 0x01	; 1
     a1c:	13 96       	adiw	r26, 0x03	; 3
     a1e:	9c 93       	st	X, r25
     a20:	8e 93       	st	-X, r24
     a22:	12 97       	sbiw	r26, 0x02	; 2
     a24:	20 30       	cpi	r18, 0x00	; 0
     a26:	80 e0       	ldi	r24, 0x00	; 0
     a28:	38 07       	cpc	r19, r24
     a2a:	80 e0       	ldi	r24, 0x00	; 0
     a2c:	48 07       	cpc	r20, r24
     a2e:	80 e4       	ldi	r24, 0x40	; 64
     a30:	58 07       	cpc	r21, r24
     a32:	58 f3       	brcs	.-42     	; 0xa0a <__unpack_f+0x66>
     a34:	14 96       	adiw	r26, 0x04	; 4
     a36:	2d 93       	st	X+, r18
     a38:	3d 93       	st	X+, r19
     a3a:	4d 93       	st	X+, r20
     a3c:	5c 93       	st	X, r21
     a3e:	17 97       	sbiw	r26, 0x07	; 7
     a40:	08 95       	ret
     a42:	2f 3f       	cpi	r18, 0xFF	; 255
     a44:	31 05       	cpc	r19, r1
     a46:	79 f4       	brne	.+30     	; 0xa66 <__unpack_f+0xc2>
     a48:	41 15       	cp	r20, r1
     a4a:	51 05       	cpc	r21, r1
     a4c:	61 05       	cpc	r22, r1
     a4e:	71 05       	cpc	r23, r1
     a50:	19 f4       	brne	.+6      	; 0xa58 <__unpack_f+0xb4>
     a52:	84 e0       	ldi	r24, 0x04	; 4
     a54:	8c 93       	st	X, r24
     a56:	08 95       	ret
     a58:	64 ff       	sbrs	r22, 4
     a5a:	03 c0       	rjmp	.+6      	; 0xa62 <__unpack_f+0xbe>
     a5c:	81 e0       	ldi	r24, 0x01	; 1
     a5e:	8c 93       	st	X, r24
     a60:	12 c0       	rjmp	.+36     	; 0xa86 <__unpack_f+0xe2>
     a62:	1c 92       	st	X, r1
     a64:	10 c0       	rjmp	.+32     	; 0xa86 <__unpack_f+0xe2>
     a66:	2f 57       	subi	r18, 0x7F	; 127
     a68:	30 40       	sbci	r19, 0x00	; 0
     a6a:	13 96       	adiw	r26, 0x03	; 3
     a6c:	3c 93       	st	X, r19
     a6e:	2e 93       	st	-X, r18
     a70:	12 97       	sbiw	r26, 0x02	; 2
     a72:	83 e0       	ldi	r24, 0x03	; 3
     a74:	8c 93       	st	X, r24
     a76:	87 e0       	ldi	r24, 0x07	; 7
     a78:	44 0f       	add	r20, r20
     a7a:	55 1f       	adc	r21, r21
     a7c:	66 1f       	adc	r22, r22
     a7e:	77 1f       	adc	r23, r23
     a80:	8a 95       	dec	r24
     a82:	d1 f7       	brne	.-12     	; 0xa78 <__unpack_f+0xd4>
     a84:	70 64       	ori	r23, 0x40	; 64
     a86:	14 96       	adiw	r26, 0x04	; 4
     a88:	4d 93       	st	X+, r20
     a8a:	5d 93       	st	X+, r21
     a8c:	6d 93       	st	X+, r22
     a8e:	7c 93       	st	X, r23
     a90:	17 97       	sbiw	r26, 0x07	; 7
     a92:	08 95       	ret

00000a94 <__fpcmp_parts_f>:
     a94:	1f 93       	push	r17
     a96:	dc 01       	movw	r26, r24
     a98:	fb 01       	movw	r30, r22
     a9a:	9c 91       	ld	r25, X
     a9c:	92 30       	cpi	r25, 0x02	; 2
     a9e:	08 f4       	brcc	.+2      	; 0xaa2 <__fpcmp_parts_f+0xe>
     aa0:	47 c0       	rjmp	.+142    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aa2:	80 81       	ld	r24, Z
     aa4:	82 30       	cpi	r24, 0x02	; 2
     aa6:	08 f4       	brcc	.+2      	; 0xaaa <__fpcmp_parts_f+0x16>
     aa8:	43 c0       	rjmp	.+134    	; 0xb30 <__fpcmp_parts_f+0x9c>
     aaa:	94 30       	cpi	r25, 0x04	; 4
     aac:	51 f4       	brne	.+20     	; 0xac2 <__fpcmp_parts_f+0x2e>
     aae:	11 96       	adiw	r26, 0x01	; 1
     ab0:	1c 91       	ld	r17, X
     ab2:	84 30       	cpi	r24, 0x04	; 4
     ab4:	99 f5       	brne	.+102    	; 0xb1c <__fpcmp_parts_f+0x88>
     ab6:	81 81       	ldd	r24, Z+1	; 0x01
     ab8:	68 2f       	mov	r22, r24
     aba:	70 e0       	ldi	r23, 0x00	; 0
     abc:	61 1b       	sub	r22, r17
     abe:	71 09       	sbc	r23, r1
     ac0:	3f c0       	rjmp	.+126    	; 0xb40 <__fpcmp_parts_f+0xac>
     ac2:	84 30       	cpi	r24, 0x04	; 4
     ac4:	21 f0       	breq	.+8      	; 0xace <__fpcmp_parts_f+0x3a>
     ac6:	92 30       	cpi	r25, 0x02	; 2
     ac8:	31 f4       	brne	.+12     	; 0xad6 <__fpcmp_parts_f+0x42>
     aca:	82 30       	cpi	r24, 0x02	; 2
     acc:	b9 f1       	breq	.+110    	; 0xb3c <__fpcmp_parts_f+0xa8>
     ace:	81 81       	ldd	r24, Z+1	; 0x01
     ad0:	88 23       	and	r24, r24
     ad2:	89 f1       	breq	.+98     	; 0xb36 <__fpcmp_parts_f+0xa2>
     ad4:	2d c0       	rjmp	.+90     	; 0xb30 <__fpcmp_parts_f+0x9c>
     ad6:	11 96       	adiw	r26, 0x01	; 1
     ad8:	1c 91       	ld	r17, X
     ada:	11 97       	sbiw	r26, 0x01	; 1
     adc:	82 30       	cpi	r24, 0x02	; 2
     ade:	f1 f0       	breq	.+60     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae0:	81 81       	ldd	r24, Z+1	; 0x01
     ae2:	18 17       	cp	r17, r24
     ae4:	d9 f4       	brne	.+54     	; 0xb1c <__fpcmp_parts_f+0x88>
     ae6:	12 96       	adiw	r26, 0x02	; 2
     ae8:	2d 91       	ld	r18, X+
     aea:	3c 91       	ld	r19, X
     aec:	13 97       	sbiw	r26, 0x03	; 3
     aee:	82 81       	ldd	r24, Z+2	; 0x02
     af0:	93 81       	ldd	r25, Z+3	; 0x03
     af2:	82 17       	cp	r24, r18
     af4:	93 07       	cpc	r25, r19
     af6:	94 f0       	brlt	.+36     	; 0xb1c <__fpcmp_parts_f+0x88>
     af8:	28 17       	cp	r18, r24
     afa:	39 07       	cpc	r19, r25
     afc:	bc f0       	brlt	.+46     	; 0xb2c <__fpcmp_parts_f+0x98>
     afe:	14 96       	adiw	r26, 0x04	; 4
     b00:	8d 91       	ld	r24, X+
     b02:	9d 91       	ld	r25, X+
     b04:	0d 90       	ld	r0, X+
     b06:	bc 91       	ld	r27, X
     b08:	a0 2d       	mov	r26, r0
     b0a:	24 81       	ldd	r18, Z+4	; 0x04
     b0c:	35 81       	ldd	r19, Z+5	; 0x05
     b0e:	46 81       	ldd	r20, Z+6	; 0x06
     b10:	57 81       	ldd	r21, Z+7	; 0x07
     b12:	28 17       	cp	r18, r24
     b14:	39 07       	cpc	r19, r25
     b16:	4a 07       	cpc	r20, r26
     b18:	5b 07       	cpc	r21, r27
     b1a:	18 f4       	brcc	.+6      	; 0xb22 <__fpcmp_parts_f+0x8e>
     b1c:	11 23       	and	r17, r17
     b1e:	41 f0       	breq	.+16     	; 0xb30 <__fpcmp_parts_f+0x9c>
     b20:	0a c0       	rjmp	.+20     	; 0xb36 <__fpcmp_parts_f+0xa2>
     b22:	82 17       	cp	r24, r18
     b24:	93 07       	cpc	r25, r19
     b26:	a4 07       	cpc	r26, r20
     b28:	b5 07       	cpc	r27, r21
     b2a:	40 f4       	brcc	.+16     	; 0xb3c <__fpcmp_parts_f+0xa8>
     b2c:	11 23       	and	r17, r17
     b2e:	19 f0       	breq	.+6      	; 0xb36 <__fpcmp_parts_f+0xa2>
     b30:	61 e0       	ldi	r22, 0x01	; 1
     b32:	70 e0       	ldi	r23, 0x00	; 0
     b34:	05 c0       	rjmp	.+10     	; 0xb40 <__fpcmp_parts_f+0xac>
     b36:	6f ef       	ldi	r22, 0xFF	; 255
     b38:	7f ef       	ldi	r23, 0xFF	; 255
     b3a:	02 c0       	rjmp	.+4      	; 0xb40 <__fpcmp_parts_f+0xac>
     b3c:	60 e0       	ldi	r22, 0x00	; 0
     b3e:	70 e0       	ldi	r23, 0x00	; 0
     b40:	cb 01       	movw	r24, r22
     b42:	1f 91       	pop	r17
     b44:	08 95       	ret

00000b46 <Dio_voidSetPinDirection>:
#include "Dio_Private.h"
#include "Dio_Cfg.h"
#include "Dio_Reg.h"


void Dio_voidSetPinDirection (u8 Cpy_u8Port , u8 Cpy_u8Pin , u8 Cpy_u8Dirc){
     b46:	df 93       	push	r29
     b48:	cf 93       	push	r28
     b4a:	cd b7       	in	r28, 0x3d	; 61
     b4c:	de b7       	in	r29, 0x3e	; 62
     b4e:	27 97       	sbiw	r28, 0x07	; 7
     b50:	0f b6       	in	r0, 0x3f	; 63
     b52:	f8 94       	cli
     b54:	de bf       	out	0x3e, r29	; 62
     b56:	0f be       	out	0x3f, r0	; 63
     b58:	cd bf       	out	0x3d, r28	; 61
     b5a:	89 83       	std	Y+1, r24	; 0x01
     b5c:	6a 83       	std	Y+2, r22	; 0x02
     b5e:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_u8Dirc == DIO_INPUT)
     b60:	8b 81       	ldd	r24, Y+3	; 0x03
     b62:	88 23       	and	r24, r24
     b64:	09 f0       	breq	.+2      	; 0xb68 <Dio_voidSetPinDirection+0x22>
     b66:	74 c0       	rjmp	.+232    	; 0xc50 <Dio_voidSetPinDirection+0x10a>
	{
		switch (Cpy_u8Port){
     b68:	89 81       	ldd	r24, Y+1	; 0x01
     b6a:	28 2f       	mov	r18, r24
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	3f 83       	std	Y+7, r19	; 0x07
     b70:	2e 83       	std	Y+6, r18	; 0x06
     b72:	8e 81       	ldd	r24, Y+6	; 0x06
     b74:	9f 81       	ldd	r25, Y+7	; 0x07
     b76:	81 30       	cpi	r24, 0x01	; 1
     b78:	91 05       	cpc	r25, r1
     b7a:	59 f1       	breq	.+86     	; 0xbd2 <Dio_voidSetPinDirection+0x8c>
     b7c:	2e 81       	ldd	r18, Y+6	; 0x06
     b7e:	3f 81       	ldd	r19, Y+7	; 0x07
     b80:	22 30       	cpi	r18, 0x02	; 2
     b82:	31 05       	cpc	r19, r1
     b84:	2c f4       	brge	.+10     	; 0xb90 <Dio_voidSetPinDirection+0x4a>
     b86:	8e 81       	ldd	r24, Y+6	; 0x06
     b88:	9f 81       	ldd	r25, Y+7	; 0x07
     b8a:	00 97       	sbiw	r24, 0x00	; 0
     b8c:	69 f0       	breq	.+26     	; 0xba8 <Dio_voidSetPinDirection+0x62>
     b8e:	d2 c0       	rjmp	.+420    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
     b90:	2e 81       	ldd	r18, Y+6	; 0x06
     b92:	3f 81       	ldd	r19, Y+7	; 0x07
     b94:	22 30       	cpi	r18, 0x02	; 2
     b96:	31 05       	cpc	r19, r1
     b98:	89 f1       	breq	.+98     	; 0xbfc <Dio_voidSetPinDirection+0xb6>
     b9a:	8e 81       	ldd	r24, Y+6	; 0x06
     b9c:	9f 81       	ldd	r25, Y+7	; 0x07
     b9e:	83 30       	cpi	r24, 0x03	; 3
     ba0:	91 05       	cpc	r25, r1
     ba2:	09 f4       	brne	.+2      	; 0xba6 <Dio_voidSetPinDirection+0x60>
     ba4:	40 c0       	rjmp	.+128    	; 0xc26 <Dio_voidSetPinDirection+0xe0>
     ba6:	c6 c0       	rjmp	.+396    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTA : clear_Bit(DDRA , Cpy_u8Pin) ; break;
     ba8:	aa e3       	ldi	r26, 0x3A	; 58
     baa:	b0 e0       	ldi	r27, 0x00	; 0
     bac:	ea e3       	ldi	r30, 0x3A	; 58
     bae:	f0 e0       	ldi	r31, 0x00	; 0
     bb0:	80 81       	ld	r24, Z
     bb2:	48 2f       	mov	r20, r24
     bb4:	8a 81       	ldd	r24, Y+2	; 0x02
     bb6:	28 2f       	mov	r18, r24
     bb8:	30 e0       	ldi	r19, 0x00	; 0
     bba:	81 e0       	ldi	r24, 0x01	; 1
     bbc:	90 e0       	ldi	r25, 0x00	; 0
     bbe:	02 2e       	mov	r0, r18
     bc0:	02 c0       	rjmp	.+4      	; 0xbc6 <Dio_voidSetPinDirection+0x80>
     bc2:	88 0f       	add	r24, r24
     bc4:	99 1f       	adc	r25, r25
     bc6:	0a 94       	dec	r0
     bc8:	e2 f7       	brpl	.-8      	; 0xbc2 <Dio_voidSetPinDirection+0x7c>
     bca:	80 95       	com	r24
     bcc:	84 23       	and	r24, r20
     bce:	8c 93       	st	X, r24
     bd0:	b1 c0       	rjmp	.+354    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTB : clear_Bit(DDRB , Cpy_u8Pin); break;
     bd2:	a7 e3       	ldi	r26, 0x37	; 55
     bd4:	b0 e0       	ldi	r27, 0x00	; 0
     bd6:	e7 e3       	ldi	r30, 0x37	; 55
     bd8:	f0 e0       	ldi	r31, 0x00	; 0
     bda:	80 81       	ld	r24, Z
     bdc:	48 2f       	mov	r20, r24
     bde:	8a 81       	ldd	r24, Y+2	; 0x02
     be0:	28 2f       	mov	r18, r24
     be2:	30 e0       	ldi	r19, 0x00	; 0
     be4:	81 e0       	ldi	r24, 0x01	; 1
     be6:	90 e0       	ldi	r25, 0x00	; 0
     be8:	02 2e       	mov	r0, r18
     bea:	02 c0       	rjmp	.+4      	; 0xbf0 <Dio_voidSetPinDirection+0xaa>
     bec:	88 0f       	add	r24, r24
     bee:	99 1f       	adc	r25, r25
     bf0:	0a 94       	dec	r0
     bf2:	e2 f7       	brpl	.-8      	; 0xbec <Dio_voidSetPinDirection+0xa6>
     bf4:	80 95       	com	r24
     bf6:	84 23       	and	r24, r20
     bf8:	8c 93       	st	X, r24
     bfa:	9c c0       	rjmp	.+312    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTC : clear_Bit(DDRC , Cpy_u8Pin); break;
     bfc:	a4 e3       	ldi	r26, 0x34	; 52
     bfe:	b0 e0       	ldi	r27, 0x00	; 0
     c00:	e4 e3       	ldi	r30, 0x34	; 52
     c02:	f0 e0       	ldi	r31, 0x00	; 0
     c04:	80 81       	ld	r24, Z
     c06:	48 2f       	mov	r20, r24
     c08:	8a 81       	ldd	r24, Y+2	; 0x02
     c0a:	28 2f       	mov	r18, r24
     c0c:	30 e0       	ldi	r19, 0x00	; 0
     c0e:	81 e0       	ldi	r24, 0x01	; 1
     c10:	90 e0       	ldi	r25, 0x00	; 0
     c12:	02 2e       	mov	r0, r18
     c14:	02 c0       	rjmp	.+4      	; 0xc1a <Dio_voidSetPinDirection+0xd4>
     c16:	88 0f       	add	r24, r24
     c18:	99 1f       	adc	r25, r25
     c1a:	0a 94       	dec	r0
     c1c:	e2 f7       	brpl	.-8      	; 0xc16 <Dio_voidSetPinDirection+0xd0>
     c1e:	80 95       	com	r24
     c20:	84 23       	and	r24, r20
     c22:	8c 93       	st	X, r24
     c24:	87 c0       	rjmp	.+270    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTD : clear_Bit(DDRD , Cpy_u8Pin); break;
     c26:	a1 e3       	ldi	r26, 0x31	; 49
     c28:	b0 e0       	ldi	r27, 0x00	; 0
     c2a:	e1 e3       	ldi	r30, 0x31	; 49
     c2c:	f0 e0       	ldi	r31, 0x00	; 0
     c2e:	80 81       	ld	r24, Z
     c30:	48 2f       	mov	r20, r24
     c32:	8a 81       	ldd	r24, Y+2	; 0x02
     c34:	28 2f       	mov	r18, r24
     c36:	30 e0       	ldi	r19, 0x00	; 0
     c38:	81 e0       	ldi	r24, 0x01	; 1
     c3a:	90 e0       	ldi	r25, 0x00	; 0
     c3c:	02 2e       	mov	r0, r18
     c3e:	02 c0       	rjmp	.+4      	; 0xc44 <Dio_voidSetPinDirection+0xfe>
     c40:	88 0f       	add	r24, r24
     c42:	99 1f       	adc	r25, r25
     c44:	0a 94       	dec	r0
     c46:	e2 f7       	brpl	.-8      	; 0xc40 <Dio_voidSetPinDirection+0xfa>
     c48:	80 95       	com	r24
     c4a:	84 23       	and	r24, r20
     c4c:	8c 93       	st	X, r24
     c4e:	72 c0       	rjmp	.+228    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		}
	}
	else if (Cpy_u8Dirc == DIO_OUTPUT){
     c50:	8b 81       	ldd	r24, Y+3	; 0x03
     c52:	81 30       	cpi	r24, 0x01	; 1
     c54:	09 f0       	breq	.+2      	; 0xc58 <Dio_voidSetPinDirection+0x112>
     c56:	6e c0       	rjmp	.+220    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		switch (Cpy_u8Port){
     c58:	89 81       	ldd	r24, Y+1	; 0x01
     c5a:	28 2f       	mov	r18, r24
     c5c:	30 e0       	ldi	r19, 0x00	; 0
     c5e:	3d 83       	std	Y+5, r19	; 0x05
     c60:	2c 83       	std	Y+4, r18	; 0x04
     c62:	8c 81       	ldd	r24, Y+4	; 0x04
     c64:	9d 81       	ldd	r25, Y+5	; 0x05
     c66:	81 30       	cpi	r24, 0x01	; 1
     c68:	91 05       	cpc	r25, r1
     c6a:	49 f1       	breq	.+82     	; 0xcbe <Dio_voidSetPinDirection+0x178>
     c6c:	2c 81       	ldd	r18, Y+4	; 0x04
     c6e:	3d 81       	ldd	r19, Y+5	; 0x05
     c70:	22 30       	cpi	r18, 0x02	; 2
     c72:	31 05       	cpc	r19, r1
     c74:	2c f4       	brge	.+10     	; 0xc80 <Dio_voidSetPinDirection+0x13a>
     c76:	8c 81       	ldd	r24, Y+4	; 0x04
     c78:	9d 81       	ldd	r25, Y+5	; 0x05
     c7a:	00 97       	sbiw	r24, 0x00	; 0
     c7c:	61 f0       	breq	.+24     	; 0xc96 <Dio_voidSetPinDirection+0x150>
     c7e:	5a c0       	rjmp	.+180    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
     c80:	2c 81       	ldd	r18, Y+4	; 0x04
     c82:	3d 81       	ldd	r19, Y+5	; 0x05
     c84:	22 30       	cpi	r18, 0x02	; 2
     c86:	31 05       	cpc	r19, r1
     c88:	71 f1       	breq	.+92     	; 0xce6 <Dio_voidSetPinDirection+0x1a0>
     c8a:	8c 81       	ldd	r24, Y+4	; 0x04
     c8c:	9d 81       	ldd	r25, Y+5	; 0x05
     c8e:	83 30       	cpi	r24, 0x03	; 3
     c90:	91 05       	cpc	r25, r1
     c92:	e9 f1       	breq	.+122    	; 0xd0e <Dio_voidSetPinDirection+0x1c8>
     c94:	4f c0       	rjmp	.+158    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTA : set_Bit(DDRA , Cpy_u8Pin) ; break;
     c96:	aa e3       	ldi	r26, 0x3A	; 58
     c98:	b0 e0       	ldi	r27, 0x00	; 0
     c9a:	ea e3       	ldi	r30, 0x3A	; 58
     c9c:	f0 e0       	ldi	r31, 0x00	; 0
     c9e:	80 81       	ld	r24, Z
     ca0:	48 2f       	mov	r20, r24
     ca2:	8a 81       	ldd	r24, Y+2	; 0x02
     ca4:	28 2f       	mov	r18, r24
     ca6:	30 e0       	ldi	r19, 0x00	; 0
     ca8:	81 e0       	ldi	r24, 0x01	; 1
     caa:	90 e0       	ldi	r25, 0x00	; 0
     cac:	02 2e       	mov	r0, r18
     cae:	02 c0       	rjmp	.+4      	; 0xcb4 <Dio_voidSetPinDirection+0x16e>
     cb0:	88 0f       	add	r24, r24
     cb2:	99 1f       	adc	r25, r25
     cb4:	0a 94       	dec	r0
     cb6:	e2 f7       	brpl	.-8      	; 0xcb0 <Dio_voidSetPinDirection+0x16a>
     cb8:	84 2b       	or	r24, r20
     cba:	8c 93       	st	X, r24
     cbc:	3b c0       	rjmp	.+118    	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTB : set_Bit(DDRB , Cpy_u8Pin); break;
     cbe:	a7 e3       	ldi	r26, 0x37	; 55
     cc0:	b0 e0       	ldi	r27, 0x00	; 0
     cc2:	e7 e3       	ldi	r30, 0x37	; 55
     cc4:	f0 e0       	ldi	r31, 0x00	; 0
     cc6:	80 81       	ld	r24, Z
     cc8:	48 2f       	mov	r20, r24
     cca:	8a 81       	ldd	r24, Y+2	; 0x02
     ccc:	28 2f       	mov	r18, r24
     cce:	30 e0       	ldi	r19, 0x00	; 0
     cd0:	81 e0       	ldi	r24, 0x01	; 1
     cd2:	90 e0       	ldi	r25, 0x00	; 0
     cd4:	02 2e       	mov	r0, r18
     cd6:	02 c0       	rjmp	.+4      	; 0xcdc <Dio_voidSetPinDirection+0x196>
     cd8:	88 0f       	add	r24, r24
     cda:	99 1f       	adc	r25, r25
     cdc:	0a 94       	dec	r0
     cde:	e2 f7       	brpl	.-8      	; 0xcd8 <Dio_voidSetPinDirection+0x192>
     ce0:	84 2b       	or	r24, r20
     ce2:	8c 93       	st	X, r24
     ce4:	27 c0       	rjmp	.+78     	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTC : set_Bit(DDRC , Cpy_u8Pin); break;
     ce6:	a4 e3       	ldi	r26, 0x34	; 52
     ce8:	b0 e0       	ldi	r27, 0x00	; 0
     cea:	e4 e3       	ldi	r30, 0x34	; 52
     cec:	f0 e0       	ldi	r31, 0x00	; 0
     cee:	80 81       	ld	r24, Z
     cf0:	48 2f       	mov	r20, r24
     cf2:	8a 81       	ldd	r24, Y+2	; 0x02
     cf4:	28 2f       	mov	r18, r24
     cf6:	30 e0       	ldi	r19, 0x00	; 0
     cf8:	81 e0       	ldi	r24, 0x01	; 1
     cfa:	90 e0       	ldi	r25, 0x00	; 0
     cfc:	02 2e       	mov	r0, r18
     cfe:	02 c0       	rjmp	.+4      	; 0xd04 <Dio_voidSetPinDirection+0x1be>
     d00:	88 0f       	add	r24, r24
     d02:	99 1f       	adc	r25, r25
     d04:	0a 94       	dec	r0
     d06:	e2 f7       	brpl	.-8      	; 0xd00 <Dio_voidSetPinDirection+0x1ba>
     d08:	84 2b       	or	r24, r20
     d0a:	8c 93       	st	X, r24
     d0c:	13 c0       	rjmp	.+38     	; 0xd34 <Dio_voidSetPinDirection+0x1ee>
		 case DIO_PORTD : set_Bit(DDRD , Cpy_u8Pin); break;
     d0e:	a1 e3       	ldi	r26, 0x31	; 49
     d10:	b0 e0       	ldi	r27, 0x00	; 0
     d12:	e1 e3       	ldi	r30, 0x31	; 49
     d14:	f0 e0       	ldi	r31, 0x00	; 0
     d16:	80 81       	ld	r24, Z
     d18:	48 2f       	mov	r20, r24
     d1a:	8a 81       	ldd	r24, Y+2	; 0x02
     d1c:	28 2f       	mov	r18, r24
     d1e:	30 e0       	ldi	r19, 0x00	; 0
     d20:	81 e0       	ldi	r24, 0x01	; 1
     d22:	90 e0       	ldi	r25, 0x00	; 0
     d24:	02 2e       	mov	r0, r18
     d26:	02 c0       	rjmp	.+4      	; 0xd2c <Dio_voidSetPinDirection+0x1e6>
     d28:	88 0f       	add	r24, r24
     d2a:	99 1f       	adc	r25, r25
     d2c:	0a 94       	dec	r0
     d2e:	e2 f7       	brpl	.-8      	; 0xd28 <Dio_voidSetPinDirection+0x1e2>
     d30:	84 2b       	or	r24, r20
     d32:	8c 93       	st	X, r24
		}
	}
}
     d34:	27 96       	adiw	r28, 0x07	; 7
     d36:	0f b6       	in	r0, 0x3f	; 63
     d38:	f8 94       	cli
     d3a:	de bf       	out	0x3e, r29	; 62
     d3c:	0f be       	out	0x3f, r0	; 63
     d3e:	cd bf       	out	0x3d, r28	; 61
     d40:	cf 91       	pop	r28
     d42:	df 91       	pop	r29
     d44:	08 95       	ret

00000d46 <Dio_voidSetPinValue>:
void Dio_voidSetPinValue (u8 Cpy_u8Port , u8 Cpy_u8Pin , u8 Cpy_u8Value){
     d46:	df 93       	push	r29
     d48:	cf 93       	push	r28
     d4a:	cd b7       	in	r28, 0x3d	; 61
     d4c:	de b7       	in	r29, 0x3e	; 62
     d4e:	27 97       	sbiw	r28, 0x07	; 7
     d50:	0f b6       	in	r0, 0x3f	; 63
     d52:	f8 94       	cli
     d54:	de bf       	out	0x3e, r29	; 62
     d56:	0f be       	out	0x3f, r0	; 63
     d58:	cd bf       	out	0x3d, r28	; 61
     d5a:	89 83       	std	Y+1, r24	; 0x01
     d5c:	6a 83       	std	Y+2, r22	; 0x02
     d5e:	4b 83       	std	Y+3, r20	; 0x03
	if (Cpy_u8Value == DIO_LOW)
     d60:	8b 81       	ldd	r24, Y+3	; 0x03
     d62:	88 23       	and	r24, r24
     d64:	09 f0       	breq	.+2      	; 0xd68 <Dio_voidSetPinValue+0x22>
     d66:	74 c0       	rjmp	.+232    	; 0xe50 <Dio_voidSetPinValue+0x10a>
	{
		switch (Cpy_u8Port){
     d68:	89 81       	ldd	r24, Y+1	; 0x01
     d6a:	28 2f       	mov	r18, r24
     d6c:	30 e0       	ldi	r19, 0x00	; 0
     d6e:	3f 83       	std	Y+7, r19	; 0x07
     d70:	2e 83       	std	Y+6, r18	; 0x06
     d72:	8e 81       	ldd	r24, Y+6	; 0x06
     d74:	9f 81       	ldd	r25, Y+7	; 0x07
     d76:	81 30       	cpi	r24, 0x01	; 1
     d78:	91 05       	cpc	r25, r1
     d7a:	59 f1       	breq	.+86     	; 0xdd2 <Dio_voidSetPinValue+0x8c>
     d7c:	2e 81       	ldd	r18, Y+6	; 0x06
     d7e:	3f 81       	ldd	r19, Y+7	; 0x07
     d80:	22 30       	cpi	r18, 0x02	; 2
     d82:	31 05       	cpc	r19, r1
     d84:	2c f4       	brge	.+10     	; 0xd90 <Dio_voidSetPinValue+0x4a>
     d86:	8e 81       	ldd	r24, Y+6	; 0x06
     d88:	9f 81       	ldd	r25, Y+7	; 0x07
     d8a:	00 97       	sbiw	r24, 0x00	; 0
     d8c:	69 f0       	breq	.+26     	; 0xda8 <Dio_voidSetPinValue+0x62>
     d8e:	d2 c0       	rjmp	.+420    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
     d90:	2e 81       	ldd	r18, Y+6	; 0x06
     d92:	3f 81       	ldd	r19, Y+7	; 0x07
     d94:	22 30       	cpi	r18, 0x02	; 2
     d96:	31 05       	cpc	r19, r1
     d98:	89 f1       	breq	.+98     	; 0xdfc <Dio_voidSetPinValue+0xb6>
     d9a:	8e 81       	ldd	r24, Y+6	; 0x06
     d9c:	9f 81       	ldd	r25, Y+7	; 0x07
     d9e:	83 30       	cpi	r24, 0x03	; 3
     da0:	91 05       	cpc	r25, r1
     da2:	09 f4       	brne	.+2      	; 0xda6 <Dio_voidSetPinValue+0x60>
     da4:	40 c0       	rjmp	.+128    	; 0xe26 <Dio_voidSetPinValue+0xe0>
     da6:	c6 c0       	rjmp	.+396    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTA : clear_Bit(PORTA , Cpy_u8Pin) ; break;
     da8:	ab e3       	ldi	r26, 0x3B	; 59
     daa:	b0 e0       	ldi	r27, 0x00	; 0
     dac:	eb e3       	ldi	r30, 0x3B	; 59
     dae:	f0 e0       	ldi	r31, 0x00	; 0
     db0:	80 81       	ld	r24, Z
     db2:	48 2f       	mov	r20, r24
     db4:	8a 81       	ldd	r24, Y+2	; 0x02
     db6:	28 2f       	mov	r18, r24
     db8:	30 e0       	ldi	r19, 0x00	; 0
     dba:	81 e0       	ldi	r24, 0x01	; 1
     dbc:	90 e0       	ldi	r25, 0x00	; 0
     dbe:	02 2e       	mov	r0, r18
     dc0:	02 c0       	rjmp	.+4      	; 0xdc6 <Dio_voidSetPinValue+0x80>
     dc2:	88 0f       	add	r24, r24
     dc4:	99 1f       	adc	r25, r25
     dc6:	0a 94       	dec	r0
     dc8:	e2 f7       	brpl	.-8      	; 0xdc2 <Dio_voidSetPinValue+0x7c>
     dca:	80 95       	com	r24
     dcc:	84 23       	and	r24, r20
     dce:	8c 93       	st	X, r24
     dd0:	b1 c0       	rjmp	.+354    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTB : clear_Bit(PORTB , Cpy_u8Pin); break;
     dd2:	a8 e3       	ldi	r26, 0x38	; 56
     dd4:	b0 e0       	ldi	r27, 0x00	; 0
     dd6:	e8 e3       	ldi	r30, 0x38	; 56
     dd8:	f0 e0       	ldi	r31, 0x00	; 0
     dda:	80 81       	ld	r24, Z
     ddc:	48 2f       	mov	r20, r24
     dde:	8a 81       	ldd	r24, Y+2	; 0x02
     de0:	28 2f       	mov	r18, r24
     de2:	30 e0       	ldi	r19, 0x00	; 0
     de4:	81 e0       	ldi	r24, 0x01	; 1
     de6:	90 e0       	ldi	r25, 0x00	; 0
     de8:	02 2e       	mov	r0, r18
     dea:	02 c0       	rjmp	.+4      	; 0xdf0 <Dio_voidSetPinValue+0xaa>
     dec:	88 0f       	add	r24, r24
     dee:	99 1f       	adc	r25, r25
     df0:	0a 94       	dec	r0
     df2:	e2 f7       	brpl	.-8      	; 0xdec <Dio_voidSetPinValue+0xa6>
     df4:	80 95       	com	r24
     df6:	84 23       	and	r24, r20
     df8:	8c 93       	st	X, r24
     dfa:	9c c0       	rjmp	.+312    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTC : clear_Bit(PORTC , Cpy_u8Pin); break;
     dfc:	a5 e3       	ldi	r26, 0x35	; 53
     dfe:	b0 e0       	ldi	r27, 0x00	; 0
     e00:	e5 e3       	ldi	r30, 0x35	; 53
     e02:	f0 e0       	ldi	r31, 0x00	; 0
     e04:	80 81       	ld	r24, Z
     e06:	48 2f       	mov	r20, r24
     e08:	8a 81       	ldd	r24, Y+2	; 0x02
     e0a:	28 2f       	mov	r18, r24
     e0c:	30 e0       	ldi	r19, 0x00	; 0
     e0e:	81 e0       	ldi	r24, 0x01	; 1
     e10:	90 e0       	ldi	r25, 0x00	; 0
     e12:	02 2e       	mov	r0, r18
     e14:	02 c0       	rjmp	.+4      	; 0xe1a <Dio_voidSetPinValue+0xd4>
     e16:	88 0f       	add	r24, r24
     e18:	99 1f       	adc	r25, r25
     e1a:	0a 94       	dec	r0
     e1c:	e2 f7       	brpl	.-8      	; 0xe16 <Dio_voidSetPinValue+0xd0>
     e1e:	80 95       	com	r24
     e20:	84 23       	and	r24, r20
     e22:	8c 93       	st	X, r24
     e24:	87 c0       	rjmp	.+270    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTD : clear_Bit(PORTD , Cpy_u8Pin); break;
     e26:	a2 e3       	ldi	r26, 0x32	; 50
     e28:	b0 e0       	ldi	r27, 0x00	; 0
     e2a:	e2 e3       	ldi	r30, 0x32	; 50
     e2c:	f0 e0       	ldi	r31, 0x00	; 0
     e2e:	80 81       	ld	r24, Z
     e30:	48 2f       	mov	r20, r24
     e32:	8a 81       	ldd	r24, Y+2	; 0x02
     e34:	28 2f       	mov	r18, r24
     e36:	30 e0       	ldi	r19, 0x00	; 0
     e38:	81 e0       	ldi	r24, 0x01	; 1
     e3a:	90 e0       	ldi	r25, 0x00	; 0
     e3c:	02 2e       	mov	r0, r18
     e3e:	02 c0       	rjmp	.+4      	; 0xe44 <Dio_voidSetPinValue+0xfe>
     e40:	88 0f       	add	r24, r24
     e42:	99 1f       	adc	r25, r25
     e44:	0a 94       	dec	r0
     e46:	e2 f7       	brpl	.-8      	; 0xe40 <Dio_voidSetPinValue+0xfa>
     e48:	80 95       	com	r24
     e4a:	84 23       	and	r24, r20
     e4c:	8c 93       	st	X, r24
     e4e:	72 c0       	rjmp	.+228    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		}
	}
	else if (Cpy_u8Value == DIO_HIGH){
     e50:	8b 81       	ldd	r24, Y+3	; 0x03
     e52:	81 30       	cpi	r24, 0x01	; 1
     e54:	09 f0       	breq	.+2      	; 0xe58 <Dio_voidSetPinValue+0x112>
     e56:	6e c0       	rjmp	.+220    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		switch (Cpy_u8Port){
     e58:	89 81       	ldd	r24, Y+1	; 0x01
     e5a:	28 2f       	mov	r18, r24
     e5c:	30 e0       	ldi	r19, 0x00	; 0
     e5e:	3d 83       	std	Y+5, r19	; 0x05
     e60:	2c 83       	std	Y+4, r18	; 0x04
     e62:	8c 81       	ldd	r24, Y+4	; 0x04
     e64:	9d 81       	ldd	r25, Y+5	; 0x05
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	91 05       	cpc	r25, r1
     e6a:	49 f1       	breq	.+82     	; 0xebe <Dio_voidSetPinValue+0x178>
     e6c:	2c 81       	ldd	r18, Y+4	; 0x04
     e6e:	3d 81       	ldd	r19, Y+5	; 0x05
     e70:	22 30       	cpi	r18, 0x02	; 2
     e72:	31 05       	cpc	r19, r1
     e74:	2c f4       	brge	.+10     	; 0xe80 <Dio_voidSetPinValue+0x13a>
     e76:	8c 81       	ldd	r24, Y+4	; 0x04
     e78:	9d 81       	ldd	r25, Y+5	; 0x05
     e7a:	00 97       	sbiw	r24, 0x00	; 0
     e7c:	61 f0       	breq	.+24     	; 0xe96 <Dio_voidSetPinValue+0x150>
     e7e:	5a c0       	rjmp	.+180    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
     e80:	2c 81       	ldd	r18, Y+4	; 0x04
     e82:	3d 81       	ldd	r19, Y+5	; 0x05
     e84:	22 30       	cpi	r18, 0x02	; 2
     e86:	31 05       	cpc	r19, r1
     e88:	71 f1       	breq	.+92     	; 0xee6 <Dio_voidSetPinValue+0x1a0>
     e8a:	8c 81       	ldd	r24, Y+4	; 0x04
     e8c:	9d 81       	ldd	r25, Y+5	; 0x05
     e8e:	83 30       	cpi	r24, 0x03	; 3
     e90:	91 05       	cpc	r25, r1
     e92:	e9 f1       	breq	.+122    	; 0xf0e <Dio_voidSetPinValue+0x1c8>
     e94:	4f c0       	rjmp	.+158    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTA : set_Bit(PORTA , Cpy_u8Pin) ; break;
     e96:	ab e3       	ldi	r26, 0x3B	; 59
     e98:	b0 e0       	ldi	r27, 0x00	; 0
     e9a:	eb e3       	ldi	r30, 0x3B	; 59
     e9c:	f0 e0       	ldi	r31, 0x00	; 0
     e9e:	80 81       	ld	r24, Z
     ea0:	48 2f       	mov	r20, r24
     ea2:	8a 81       	ldd	r24, Y+2	; 0x02
     ea4:	28 2f       	mov	r18, r24
     ea6:	30 e0       	ldi	r19, 0x00	; 0
     ea8:	81 e0       	ldi	r24, 0x01	; 1
     eaa:	90 e0       	ldi	r25, 0x00	; 0
     eac:	02 2e       	mov	r0, r18
     eae:	02 c0       	rjmp	.+4      	; 0xeb4 <Dio_voidSetPinValue+0x16e>
     eb0:	88 0f       	add	r24, r24
     eb2:	99 1f       	adc	r25, r25
     eb4:	0a 94       	dec	r0
     eb6:	e2 f7       	brpl	.-8      	; 0xeb0 <Dio_voidSetPinValue+0x16a>
     eb8:	84 2b       	or	r24, r20
     eba:	8c 93       	st	X, r24
     ebc:	3b c0       	rjmp	.+118    	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTB : set_Bit(PORTB , Cpy_u8Pin); break;
     ebe:	a8 e3       	ldi	r26, 0x38	; 56
     ec0:	b0 e0       	ldi	r27, 0x00	; 0
     ec2:	e8 e3       	ldi	r30, 0x38	; 56
     ec4:	f0 e0       	ldi	r31, 0x00	; 0
     ec6:	80 81       	ld	r24, Z
     ec8:	48 2f       	mov	r20, r24
     eca:	8a 81       	ldd	r24, Y+2	; 0x02
     ecc:	28 2f       	mov	r18, r24
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	81 e0       	ldi	r24, 0x01	; 1
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	02 2e       	mov	r0, r18
     ed6:	02 c0       	rjmp	.+4      	; 0xedc <Dio_voidSetPinValue+0x196>
     ed8:	88 0f       	add	r24, r24
     eda:	99 1f       	adc	r25, r25
     edc:	0a 94       	dec	r0
     ede:	e2 f7       	brpl	.-8      	; 0xed8 <Dio_voidSetPinValue+0x192>
     ee0:	84 2b       	or	r24, r20
     ee2:	8c 93       	st	X, r24
     ee4:	27 c0       	rjmp	.+78     	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTC : set_Bit(PORTC , Cpy_u8Pin); break;
     ee6:	a5 e3       	ldi	r26, 0x35	; 53
     ee8:	b0 e0       	ldi	r27, 0x00	; 0
     eea:	e5 e3       	ldi	r30, 0x35	; 53
     eec:	f0 e0       	ldi	r31, 0x00	; 0
     eee:	80 81       	ld	r24, Z
     ef0:	48 2f       	mov	r20, r24
     ef2:	8a 81       	ldd	r24, Y+2	; 0x02
     ef4:	28 2f       	mov	r18, r24
     ef6:	30 e0       	ldi	r19, 0x00	; 0
     ef8:	81 e0       	ldi	r24, 0x01	; 1
     efa:	90 e0       	ldi	r25, 0x00	; 0
     efc:	02 2e       	mov	r0, r18
     efe:	02 c0       	rjmp	.+4      	; 0xf04 <Dio_voidSetPinValue+0x1be>
     f00:	88 0f       	add	r24, r24
     f02:	99 1f       	adc	r25, r25
     f04:	0a 94       	dec	r0
     f06:	e2 f7       	brpl	.-8      	; 0xf00 <Dio_voidSetPinValue+0x1ba>
     f08:	84 2b       	or	r24, r20
     f0a:	8c 93       	st	X, r24
     f0c:	13 c0       	rjmp	.+38     	; 0xf34 <Dio_voidSetPinValue+0x1ee>
		 case DIO_PORTD : set_Bit(PORTD , Cpy_u8Pin); break;
     f0e:	a2 e3       	ldi	r26, 0x32	; 50
     f10:	b0 e0       	ldi	r27, 0x00	; 0
     f12:	e2 e3       	ldi	r30, 0x32	; 50
     f14:	f0 e0       	ldi	r31, 0x00	; 0
     f16:	80 81       	ld	r24, Z
     f18:	48 2f       	mov	r20, r24
     f1a:	8a 81       	ldd	r24, Y+2	; 0x02
     f1c:	28 2f       	mov	r18, r24
     f1e:	30 e0       	ldi	r19, 0x00	; 0
     f20:	81 e0       	ldi	r24, 0x01	; 1
     f22:	90 e0       	ldi	r25, 0x00	; 0
     f24:	02 2e       	mov	r0, r18
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <Dio_voidSetPinValue+0x1e6>
     f28:	88 0f       	add	r24, r24
     f2a:	99 1f       	adc	r25, r25
     f2c:	0a 94       	dec	r0
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <Dio_voidSetPinValue+0x1e2>
     f30:	84 2b       	or	r24, r20
     f32:	8c 93       	st	X, r24
		}
	}
}
     f34:	27 96       	adiw	r28, 0x07	; 7
     f36:	0f b6       	in	r0, 0x3f	; 63
     f38:	f8 94       	cli
     f3a:	de bf       	out	0x3e, r29	; 62
     f3c:	0f be       	out	0x3f, r0	; 63
     f3e:	cd bf       	out	0x3d, r28	; 61
     f40:	cf 91       	pop	r28
     f42:	df 91       	pop	r29
     f44:	08 95       	ret

00000f46 <Dio_u8GetPinValue>:
u8 Dio_u8GetPinValue (u8 Cpy_u8Port , u8 Cpy_u8Pin){
     f46:	df 93       	push	r29
     f48:	cf 93       	push	r28
     f4a:	00 d0       	rcall	.+0      	; 0xf4c <Dio_u8GetPinValue+0x6>
     f4c:	00 d0       	rcall	.+0      	; 0xf4e <Dio_u8GetPinValue+0x8>
     f4e:	0f 92       	push	r0
     f50:	cd b7       	in	r28, 0x3d	; 61
     f52:	de b7       	in	r29, 0x3e	; 62
     f54:	8a 83       	std	Y+2, r24	; 0x02
     f56:	6b 83       	std	Y+3, r22	; 0x03
	u8 local_u8InValue = 0 ;
     f58:	19 82       	std	Y+1, r1	; 0x01
	switch (Cpy_u8Port){
     f5a:	8a 81       	ldd	r24, Y+2	; 0x02
     f5c:	28 2f       	mov	r18, r24
     f5e:	30 e0       	ldi	r19, 0x00	; 0
     f60:	3d 83       	std	Y+5, r19	; 0x05
     f62:	2c 83       	std	Y+4, r18	; 0x04
     f64:	4c 81       	ldd	r20, Y+4	; 0x04
     f66:	5d 81       	ldd	r21, Y+5	; 0x05
     f68:	41 30       	cpi	r20, 0x01	; 1
     f6a:	51 05       	cpc	r21, r1
     f6c:	41 f1       	breq	.+80     	; 0xfbe <Dio_u8GetPinValue+0x78>
     f6e:	8c 81       	ldd	r24, Y+4	; 0x04
     f70:	9d 81       	ldd	r25, Y+5	; 0x05
     f72:	82 30       	cpi	r24, 0x02	; 2
     f74:	91 05       	cpc	r25, r1
     f76:	34 f4       	brge	.+12     	; 0xf84 <Dio_u8GetPinValue+0x3e>
     f78:	2c 81       	ldd	r18, Y+4	; 0x04
     f7a:	3d 81       	ldd	r19, Y+5	; 0x05
     f7c:	21 15       	cp	r18, r1
     f7e:	31 05       	cpc	r19, r1
     f80:	61 f0       	breq	.+24     	; 0xf9a <Dio_u8GetPinValue+0x54>
     f82:	52 c0       	rjmp	.+164    	; 0x1028 <Dio_u8GetPinValue+0xe2>
     f84:	4c 81       	ldd	r20, Y+4	; 0x04
     f86:	5d 81       	ldd	r21, Y+5	; 0x05
     f88:	42 30       	cpi	r20, 0x02	; 2
     f8a:	51 05       	cpc	r21, r1
     f8c:	51 f1       	breq	.+84     	; 0xfe2 <Dio_u8GetPinValue+0x9c>
     f8e:	8c 81       	ldd	r24, Y+4	; 0x04
     f90:	9d 81       	ldd	r25, Y+5	; 0x05
     f92:	83 30       	cpi	r24, 0x03	; 3
     f94:	91 05       	cpc	r25, r1
     f96:	b9 f1       	breq	.+110    	; 0x1006 <Dio_u8GetPinValue+0xc0>
     f98:	47 c0       	rjmp	.+142    	; 0x1028 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTA : local_u8InValue = get_Bit(PINA , Cpy_u8Pin) ; break;
     f9a:	e9 e3       	ldi	r30, 0x39	; 57
     f9c:	f0 e0       	ldi	r31, 0x00	; 0
     f9e:	80 81       	ld	r24, Z
     fa0:	28 2f       	mov	r18, r24
     fa2:	30 e0       	ldi	r19, 0x00	; 0
     fa4:	8b 81       	ldd	r24, Y+3	; 0x03
     fa6:	88 2f       	mov	r24, r24
     fa8:	90 e0       	ldi	r25, 0x00	; 0
     faa:	a9 01       	movw	r20, r18
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <Dio_u8GetPinValue+0x6c>
     fae:	55 95       	asr	r21
     fb0:	47 95       	ror	r20
     fb2:	8a 95       	dec	r24
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <Dio_u8GetPinValue+0x68>
     fb6:	ca 01       	movw	r24, r20
     fb8:	81 70       	andi	r24, 0x01	; 1
     fba:	89 83       	std	Y+1, r24	; 0x01
     fbc:	35 c0       	rjmp	.+106    	; 0x1028 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTB : local_u8InValue = get_Bit(PINB , Cpy_u8Pin); break;
     fbe:	e6 e3       	ldi	r30, 0x36	; 54
     fc0:	f0 e0       	ldi	r31, 0x00	; 0
     fc2:	80 81       	ld	r24, Z
     fc4:	28 2f       	mov	r18, r24
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	8b 81       	ldd	r24, Y+3	; 0x03
     fca:	88 2f       	mov	r24, r24
     fcc:	90 e0       	ldi	r25, 0x00	; 0
     fce:	a9 01       	movw	r20, r18
     fd0:	02 c0       	rjmp	.+4      	; 0xfd6 <Dio_u8GetPinValue+0x90>
     fd2:	55 95       	asr	r21
     fd4:	47 95       	ror	r20
     fd6:	8a 95       	dec	r24
     fd8:	e2 f7       	brpl	.-8      	; 0xfd2 <Dio_u8GetPinValue+0x8c>
     fda:	ca 01       	movw	r24, r20
     fdc:	81 70       	andi	r24, 0x01	; 1
     fde:	89 83       	std	Y+1, r24	; 0x01
     fe0:	23 c0       	rjmp	.+70     	; 0x1028 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTC : local_u8InValue = get_Bit(PINC , Cpy_u8Pin); break;
     fe2:	e3 e3       	ldi	r30, 0x33	; 51
     fe4:	f0 e0       	ldi	r31, 0x00	; 0
     fe6:	80 81       	ld	r24, Z
     fe8:	28 2f       	mov	r18, r24
     fea:	30 e0       	ldi	r19, 0x00	; 0
     fec:	8b 81       	ldd	r24, Y+3	; 0x03
     fee:	88 2f       	mov	r24, r24
     ff0:	90 e0       	ldi	r25, 0x00	; 0
     ff2:	a9 01       	movw	r20, r18
     ff4:	02 c0       	rjmp	.+4      	; 0xffa <Dio_u8GetPinValue+0xb4>
     ff6:	55 95       	asr	r21
     ff8:	47 95       	ror	r20
     ffa:	8a 95       	dec	r24
     ffc:	e2 f7       	brpl	.-8      	; 0xff6 <Dio_u8GetPinValue+0xb0>
     ffe:	ca 01       	movw	r24, r20
    1000:	81 70       	andi	r24, 0x01	; 1
    1002:	89 83       	std	Y+1, r24	; 0x01
    1004:	11 c0       	rjmp	.+34     	; 0x1028 <Dio_u8GetPinValue+0xe2>
	 case DIO_PORTD : local_u8InValue = get_Bit(PIND , Cpy_u8Pin); break;
    1006:	e0 e3       	ldi	r30, 0x30	; 48
    1008:	f0 e0       	ldi	r31, 0x00	; 0
    100a:	80 81       	ld	r24, Z
    100c:	28 2f       	mov	r18, r24
    100e:	30 e0       	ldi	r19, 0x00	; 0
    1010:	8b 81       	ldd	r24, Y+3	; 0x03
    1012:	88 2f       	mov	r24, r24
    1014:	90 e0       	ldi	r25, 0x00	; 0
    1016:	a9 01       	movw	r20, r18
    1018:	02 c0       	rjmp	.+4      	; 0x101e <Dio_u8GetPinValue+0xd8>
    101a:	55 95       	asr	r21
    101c:	47 95       	ror	r20
    101e:	8a 95       	dec	r24
    1020:	e2 f7       	brpl	.-8      	; 0x101a <Dio_u8GetPinValue+0xd4>
    1022:	ca 01       	movw	r24, r20
    1024:	81 70       	andi	r24, 0x01	; 1
    1026:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8InValue ;
    1028:	89 81       	ldd	r24, Y+1	; 0x01
}
    102a:	0f 90       	pop	r0
    102c:	0f 90       	pop	r0
    102e:	0f 90       	pop	r0
    1030:	0f 90       	pop	r0
    1032:	0f 90       	pop	r0
    1034:	cf 91       	pop	r28
    1036:	df 91       	pop	r29
    1038:	08 95       	ret

0000103a <Dio_voidSetPortDirection>:


void Dio_voidSetPortDirection (u8 Cpy_u8Port , u8 Cpy_u8Dirc)
{
    103a:	df 93       	push	r29
    103c:	cf 93       	push	r28
    103e:	00 d0       	rcall	.+0      	; 0x1040 <Dio_voidSetPortDirection+0x6>
    1040:	00 d0       	rcall	.+0      	; 0x1042 <Dio_voidSetPortDirection+0x8>
    1042:	00 d0       	rcall	.+0      	; 0x1044 <Dio_voidSetPortDirection+0xa>
    1044:	cd b7       	in	r28, 0x3d	; 61
    1046:	de b7       	in	r29, 0x3e	; 62
    1048:	89 83       	std	Y+1, r24	; 0x01
    104a:	6a 83       	std	Y+2, r22	; 0x02
	if (Cpy_u8Dirc == DIO_INPUT)
    104c:	8a 81       	ldd	r24, Y+2	; 0x02
    104e:	88 23       	and	r24, r24
    1050:	79 f5       	brne	.+94     	; 0x10b0 <Dio_voidSetPortDirection+0x76>
	{
		switch (Cpy_u8Port)
    1052:	89 81       	ldd	r24, Y+1	; 0x01
    1054:	28 2f       	mov	r18, r24
    1056:	30 e0       	ldi	r19, 0x00	; 0
    1058:	3e 83       	std	Y+6, r19	; 0x06
    105a:	2d 83       	std	Y+5, r18	; 0x05
    105c:	8d 81       	ldd	r24, Y+5	; 0x05
    105e:	9e 81       	ldd	r25, Y+6	; 0x06
    1060:	81 30       	cpi	r24, 0x01	; 1
    1062:	91 05       	cpc	r25, r1
    1064:	c9 f0       	breq	.+50     	; 0x1098 <Dio_voidSetPortDirection+0x5e>
    1066:	2d 81       	ldd	r18, Y+5	; 0x05
    1068:	3e 81       	ldd	r19, Y+6	; 0x06
    106a:	22 30       	cpi	r18, 0x02	; 2
    106c:	31 05       	cpc	r19, r1
    106e:	2c f4       	brge	.+10     	; 0x107a <Dio_voidSetPortDirection+0x40>
    1070:	8d 81       	ldd	r24, Y+5	; 0x05
    1072:	9e 81       	ldd	r25, Y+6	; 0x06
    1074:	00 97       	sbiw	r24, 0x00	; 0
    1076:	61 f0       	breq	.+24     	; 0x1090 <Dio_voidSetPortDirection+0x56>
    1078:	50 c0       	rjmp	.+160    	; 0x111a <Dio_voidSetPortDirection+0xe0>
    107a:	2d 81       	ldd	r18, Y+5	; 0x05
    107c:	3e 81       	ldd	r19, Y+6	; 0x06
    107e:	22 30       	cpi	r18, 0x02	; 2
    1080:	31 05       	cpc	r19, r1
    1082:	71 f0       	breq	.+28     	; 0x10a0 <Dio_voidSetPortDirection+0x66>
    1084:	8d 81       	ldd	r24, Y+5	; 0x05
    1086:	9e 81       	ldd	r25, Y+6	; 0x06
    1088:	83 30       	cpi	r24, 0x03	; 3
    108a:	91 05       	cpc	r25, r1
    108c:	69 f0       	breq	.+26     	; 0x10a8 <Dio_voidSetPortDirection+0x6e>
    108e:	45 c0       	rjmp	.+138    	; 0x111a <Dio_voidSetPortDirection+0xe0>
		{
		 case DIO_PORTA : DDRA = 0x00 ; break;
    1090:	ea e3       	ldi	r30, 0x3A	; 58
    1092:	f0 e0       	ldi	r31, 0x00	; 0
    1094:	10 82       	st	Z, r1
    1096:	41 c0       	rjmp	.+130    	; 0x111a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTB : DDRB = 0x00 ; break;
    1098:	e7 e3       	ldi	r30, 0x37	; 55
    109a:	f0 e0       	ldi	r31, 0x00	; 0
    109c:	10 82       	st	Z, r1
    109e:	3d c0       	rjmp	.+122    	; 0x111a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTC : DDRC = 0x00 ; break;
    10a0:	e4 e3       	ldi	r30, 0x34	; 52
    10a2:	f0 e0       	ldi	r31, 0x00	; 0
    10a4:	10 82       	st	Z, r1
    10a6:	39 c0       	rjmp	.+114    	; 0x111a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTD : DDRD = 0x00 ; break;
    10a8:	e1 e3       	ldi	r30, 0x31	; 49
    10aa:	f0 e0       	ldi	r31, 0x00	; 0
    10ac:	10 82       	st	Z, r1
    10ae:	35 c0       	rjmp	.+106    	; 0x111a <Dio_voidSetPortDirection+0xe0>
		}
	}
	else if (Cpy_u8Dirc == DIO_OUTPUT)
    10b0:	8a 81       	ldd	r24, Y+2	; 0x02
    10b2:	81 30       	cpi	r24, 0x01	; 1
    10b4:	91 f5       	brne	.+100    	; 0x111a <Dio_voidSetPortDirection+0xe0>
	{
		switch (Cpy_u8Port)
    10b6:	89 81       	ldd	r24, Y+1	; 0x01
    10b8:	28 2f       	mov	r18, r24
    10ba:	30 e0       	ldi	r19, 0x00	; 0
    10bc:	3c 83       	std	Y+4, r19	; 0x04
    10be:	2b 83       	std	Y+3, r18	; 0x03
    10c0:	8b 81       	ldd	r24, Y+3	; 0x03
    10c2:	9c 81       	ldd	r25, Y+4	; 0x04
    10c4:	81 30       	cpi	r24, 0x01	; 1
    10c6:	91 05       	cpc	r25, r1
    10c8:	d1 f0       	breq	.+52     	; 0x10fe <Dio_voidSetPortDirection+0xc4>
    10ca:	2b 81       	ldd	r18, Y+3	; 0x03
    10cc:	3c 81       	ldd	r19, Y+4	; 0x04
    10ce:	22 30       	cpi	r18, 0x02	; 2
    10d0:	31 05       	cpc	r19, r1
    10d2:	2c f4       	brge	.+10     	; 0x10de <Dio_voidSetPortDirection+0xa4>
    10d4:	8b 81       	ldd	r24, Y+3	; 0x03
    10d6:	9c 81       	ldd	r25, Y+4	; 0x04
    10d8:	00 97       	sbiw	r24, 0x00	; 0
    10da:	61 f0       	breq	.+24     	; 0x10f4 <Dio_voidSetPortDirection+0xba>
    10dc:	1e c0       	rjmp	.+60     	; 0x111a <Dio_voidSetPortDirection+0xe0>
    10de:	2b 81       	ldd	r18, Y+3	; 0x03
    10e0:	3c 81       	ldd	r19, Y+4	; 0x04
    10e2:	22 30       	cpi	r18, 0x02	; 2
    10e4:	31 05       	cpc	r19, r1
    10e6:	81 f0       	breq	.+32     	; 0x1108 <Dio_voidSetPortDirection+0xce>
    10e8:	8b 81       	ldd	r24, Y+3	; 0x03
    10ea:	9c 81       	ldd	r25, Y+4	; 0x04
    10ec:	83 30       	cpi	r24, 0x03	; 3
    10ee:	91 05       	cpc	r25, r1
    10f0:	81 f0       	breq	.+32     	; 0x1112 <Dio_voidSetPortDirection+0xd8>
    10f2:	13 c0       	rjmp	.+38     	; 0x111a <Dio_voidSetPortDirection+0xe0>
		{
		 case DIO_PORTA : DDRA = 0XFF ; break;
    10f4:	ea e3       	ldi	r30, 0x3A	; 58
    10f6:	f0 e0       	ldi	r31, 0x00	; 0
    10f8:	8f ef       	ldi	r24, 0xFF	; 255
    10fa:	80 83       	st	Z, r24
    10fc:	0e c0       	rjmp	.+28     	; 0x111a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTB : DDRB = 0XFF ; break;
    10fe:	e7 e3       	ldi	r30, 0x37	; 55
    1100:	f0 e0       	ldi	r31, 0x00	; 0
    1102:	8f ef       	ldi	r24, 0xFF	; 255
    1104:	80 83       	st	Z, r24
    1106:	09 c0       	rjmp	.+18     	; 0x111a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTC : DDRC = 0XFF ; break;
    1108:	e4 e3       	ldi	r30, 0x34	; 52
    110a:	f0 e0       	ldi	r31, 0x00	; 0
    110c:	8f ef       	ldi	r24, 0xFF	; 255
    110e:	80 83       	st	Z, r24
    1110:	04 c0       	rjmp	.+8      	; 0x111a <Dio_voidSetPortDirection+0xe0>
		 case DIO_PORTD : DDRD = 0XFF ; break;
    1112:	e1 e3       	ldi	r30, 0x31	; 49
    1114:	f0 e0       	ldi	r31, 0x00	; 0
    1116:	8f ef       	ldi	r24, 0xFF	; 255
    1118:	80 83       	st	Z, r24
		}
	}
}
    111a:	26 96       	adiw	r28, 0x06	; 6
    111c:	0f b6       	in	r0, 0x3f	; 63
    111e:	f8 94       	cli
    1120:	de bf       	out	0x3e, r29	; 62
    1122:	0f be       	out	0x3f, r0	; 63
    1124:	cd bf       	out	0x3d, r28	; 61
    1126:	cf 91       	pop	r28
    1128:	df 91       	pop	r29
    112a:	08 95       	ret

0000112c <Dio_voidSetPortValue>:
void Dio_voidSetPortValue (u8 Cpy_u8Port , u8 Cpy_u8Value){
    112c:	df 93       	push	r29
    112e:	cf 93       	push	r28
    1130:	00 d0       	rcall	.+0      	; 0x1132 <Dio_voidSetPortValue+0x6>
    1132:	00 d0       	rcall	.+0      	; 0x1134 <Dio_voidSetPortValue+0x8>
    1134:	cd b7       	in	r28, 0x3d	; 61
    1136:	de b7       	in	r29, 0x3e	; 62
    1138:	89 83       	std	Y+1, r24	; 0x01
    113a:	6a 83       	std	Y+2, r22	; 0x02
	switch (Cpy_u8Port)
    113c:	89 81       	ldd	r24, Y+1	; 0x01
    113e:	28 2f       	mov	r18, r24
    1140:	30 e0       	ldi	r19, 0x00	; 0
    1142:	3c 83       	std	Y+4, r19	; 0x04
    1144:	2b 83       	std	Y+3, r18	; 0x03
    1146:	8b 81       	ldd	r24, Y+3	; 0x03
    1148:	9c 81       	ldd	r25, Y+4	; 0x04
    114a:	81 30       	cpi	r24, 0x01	; 1
    114c:	91 05       	cpc	r25, r1
    114e:	d1 f0       	breq	.+52     	; 0x1184 <Dio_voidSetPortValue+0x58>
    1150:	2b 81       	ldd	r18, Y+3	; 0x03
    1152:	3c 81       	ldd	r19, Y+4	; 0x04
    1154:	22 30       	cpi	r18, 0x02	; 2
    1156:	31 05       	cpc	r19, r1
    1158:	2c f4       	brge	.+10     	; 0x1164 <Dio_voidSetPortValue+0x38>
    115a:	8b 81       	ldd	r24, Y+3	; 0x03
    115c:	9c 81       	ldd	r25, Y+4	; 0x04
    115e:	00 97       	sbiw	r24, 0x00	; 0
    1160:	61 f0       	breq	.+24     	; 0x117a <Dio_voidSetPortValue+0x4e>
    1162:	1e c0       	rjmp	.+60     	; 0x11a0 <Dio_voidSetPortValue+0x74>
    1164:	2b 81       	ldd	r18, Y+3	; 0x03
    1166:	3c 81       	ldd	r19, Y+4	; 0x04
    1168:	22 30       	cpi	r18, 0x02	; 2
    116a:	31 05       	cpc	r19, r1
    116c:	81 f0       	breq	.+32     	; 0x118e <Dio_voidSetPortValue+0x62>
    116e:	8b 81       	ldd	r24, Y+3	; 0x03
    1170:	9c 81       	ldd	r25, Y+4	; 0x04
    1172:	83 30       	cpi	r24, 0x03	; 3
    1174:	91 05       	cpc	r25, r1
    1176:	81 f0       	breq	.+32     	; 0x1198 <Dio_voidSetPortValue+0x6c>
    1178:	13 c0       	rjmp	.+38     	; 0x11a0 <Dio_voidSetPortValue+0x74>
	{
	 case DIO_PORTA : PORTA =  Cpy_u8Value; break;
    117a:	eb e3       	ldi	r30, 0x3B	; 59
    117c:	f0 e0       	ldi	r31, 0x00	; 0
    117e:	8a 81       	ldd	r24, Y+2	; 0x02
    1180:	80 83       	st	Z, r24
    1182:	0e c0       	rjmp	.+28     	; 0x11a0 <Dio_voidSetPortValue+0x74>
	 case DIO_PORTB : PORTB =  Cpy_u8Value; break;
    1184:	e8 e3       	ldi	r30, 0x38	; 56
    1186:	f0 e0       	ldi	r31, 0x00	; 0
    1188:	8a 81       	ldd	r24, Y+2	; 0x02
    118a:	80 83       	st	Z, r24
    118c:	09 c0       	rjmp	.+18     	; 0x11a0 <Dio_voidSetPortValue+0x74>
	 case DIO_PORTC : PORTC =  Cpy_u8Value; break;
    118e:	e5 e3       	ldi	r30, 0x35	; 53
    1190:	f0 e0       	ldi	r31, 0x00	; 0
    1192:	8a 81       	ldd	r24, Y+2	; 0x02
    1194:	80 83       	st	Z, r24
    1196:	04 c0       	rjmp	.+8      	; 0x11a0 <Dio_voidSetPortValue+0x74>
	 case DIO_PORTD : PORTD =  Cpy_u8Value; break;
    1198:	e2 e3       	ldi	r30, 0x32	; 50
    119a:	f0 e0       	ldi	r31, 0x00	; 0
    119c:	8a 81       	ldd	r24, Y+2	; 0x02
    119e:	80 83       	st	Z, r24
	}

}
    11a0:	0f 90       	pop	r0
    11a2:	0f 90       	pop	r0
    11a4:	0f 90       	pop	r0
    11a6:	0f 90       	pop	r0
    11a8:	cf 91       	pop	r28
    11aa:	df 91       	pop	r29
    11ac:	08 95       	ret

000011ae <Dio_u8GetPortValue>:
u8 Dio_u8GetPortValue (u8 Cpy_u8Port){
    11ae:	df 93       	push	r29
    11b0:	cf 93       	push	r28
    11b2:	00 d0       	rcall	.+0      	; 0x11b4 <Dio_u8GetPortValue+0x6>
    11b4:	00 d0       	rcall	.+0      	; 0x11b6 <Dio_u8GetPortValue+0x8>
    11b6:	cd b7       	in	r28, 0x3d	; 61
    11b8:	de b7       	in	r29, 0x3e	; 62
    11ba:	8a 83       	std	Y+2, r24	; 0x02
	u8 local_u8InValue = 0 ;
    11bc:	19 82       	std	Y+1, r1	; 0x01
	switch (Cpy_u8Port){
    11be:	8a 81       	ldd	r24, Y+2	; 0x02
    11c0:	28 2f       	mov	r18, r24
    11c2:	30 e0       	ldi	r19, 0x00	; 0
    11c4:	3c 83       	std	Y+4, r19	; 0x04
    11c6:	2b 83       	std	Y+3, r18	; 0x03
    11c8:	8b 81       	ldd	r24, Y+3	; 0x03
    11ca:	9c 81       	ldd	r25, Y+4	; 0x04
    11cc:	81 30       	cpi	r24, 0x01	; 1
    11ce:	91 05       	cpc	r25, r1
    11d0:	d1 f0       	breq	.+52     	; 0x1206 <Dio_u8GetPortValue+0x58>
    11d2:	2b 81       	ldd	r18, Y+3	; 0x03
    11d4:	3c 81       	ldd	r19, Y+4	; 0x04
    11d6:	22 30       	cpi	r18, 0x02	; 2
    11d8:	31 05       	cpc	r19, r1
    11da:	2c f4       	brge	.+10     	; 0x11e6 <Dio_u8GetPortValue+0x38>
    11dc:	8b 81       	ldd	r24, Y+3	; 0x03
    11de:	9c 81       	ldd	r25, Y+4	; 0x04
    11e0:	00 97       	sbiw	r24, 0x00	; 0
    11e2:	61 f0       	breq	.+24     	; 0x11fc <Dio_u8GetPortValue+0x4e>
    11e4:	1e c0       	rjmp	.+60     	; 0x1222 <Dio_u8GetPortValue+0x74>
    11e6:	2b 81       	ldd	r18, Y+3	; 0x03
    11e8:	3c 81       	ldd	r19, Y+4	; 0x04
    11ea:	22 30       	cpi	r18, 0x02	; 2
    11ec:	31 05       	cpc	r19, r1
    11ee:	81 f0       	breq	.+32     	; 0x1210 <Dio_u8GetPortValue+0x62>
    11f0:	8b 81       	ldd	r24, Y+3	; 0x03
    11f2:	9c 81       	ldd	r25, Y+4	; 0x04
    11f4:	83 30       	cpi	r24, 0x03	; 3
    11f6:	91 05       	cpc	r25, r1
    11f8:	81 f0       	breq	.+32     	; 0x121a <Dio_u8GetPortValue+0x6c>
    11fa:	13 c0       	rjmp	.+38     	; 0x1222 <Dio_u8GetPortValue+0x74>
	 case DIO_PORTA : local_u8InValue = PINA ; break;
    11fc:	e9 e3       	ldi	r30, 0x39	; 57
    11fe:	f0 e0       	ldi	r31, 0x00	; 0
    1200:	80 81       	ld	r24, Z
    1202:	89 83       	std	Y+1, r24	; 0x01
    1204:	0e c0       	rjmp	.+28     	; 0x1222 <Dio_u8GetPortValue+0x74>
	 case DIO_PORTB : local_u8InValue = PINB ; break;
    1206:	e6 e3       	ldi	r30, 0x36	; 54
    1208:	f0 e0       	ldi	r31, 0x00	; 0
    120a:	80 81       	ld	r24, Z
    120c:	89 83       	std	Y+1, r24	; 0x01
    120e:	09 c0       	rjmp	.+18     	; 0x1222 <Dio_u8GetPortValue+0x74>
	 case DIO_PORTC : local_u8InValue = PINC ; break;
    1210:	e3 e3       	ldi	r30, 0x33	; 51
    1212:	f0 e0       	ldi	r31, 0x00	; 0
    1214:	80 81       	ld	r24, Z
    1216:	89 83       	std	Y+1, r24	; 0x01
    1218:	04 c0       	rjmp	.+8      	; 0x1222 <Dio_u8GetPortValue+0x74>
	 case DIO_PORTD : local_u8InValue = PIND ; break;
    121a:	e0 e3       	ldi	r30, 0x30	; 48
    121c:	f0 e0       	ldi	r31, 0x00	; 0
    121e:	80 81       	ld	r24, Z
    1220:	89 83       	std	Y+1, r24	; 0x01
	}

	return local_u8InValue ;
    1222:	89 81       	ldd	r24, Y+1	; 0x01
}
    1224:	0f 90       	pop	r0
    1226:	0f 90       	pop	r0
    1228:	0f 90       	pop	r0
    122a:	0f 90       	pop	r0
    122c:	cf 91       	pop	r28
    122e:	df 91       	pop	r29
    1230:	08 95       	ret

00001232 <Lcd_voidSendCommand>:
#include "Lcd_Interface.h"
#include "Lcd_Cfg.h"


void Lcd_voidSendCommand(u8 Cpy_u8Command)
{
    1232:	df 93       	push	r29
    1234:	cf 93       	push	r28
    1236:	cd b7       	in	r28, 0x3d	; 61
    1238:	de b7       	in	r29, 0x3e	; 62
    123a:	6d 97       	sbiw	r28, 0x1d	; 29
    123c:	0f b6       	in	r0, 0x3f	; 63
    123e:	f8 94       	cli
    1240:	de bf       	out	0x3e, r29	; 62
    1242:	0f be       	out	0x3f, r0	; 63
    1244:	cd bf       	out	0x3d, r28	; 61
    1246:	8d 8f       	std	Y+29, r24	; 0x1d
	//RS low
	Dio_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_LOW);
    1248:	80 e0       	ldi	r24, 0x00	; 0
    124a:	64 e0       	ldi	r22, 0x04	; 4
    124c:	40 e0       	ldi	r20, 0x00	; 0
    124e:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
	//RW low
	Dio_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1252:	80 e0       	ldi	r24, 0x00	; 0
    1254:	65 e0       	ldi	r22, 0x05	; 5
    1256:	40 e0       	ldi	r20, 0x00	; 0
    1258:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
	//Send the command
	Dio_voidSetPortValue(LCD_DATA_PORT,Cpy_u8Command);
    125c:	81 e0       	ldi	r24, 0x01	; 1
    125e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1260:	0e 94 96 08 	call	0x112c	; 0x112c <Dio_voidSetPortValue>
	//the enable pulse
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_HIGH);
    1264:	80 e0       	ldi	r24, 0x00	; 0
    1266:	66 e0       	ldi	r22, 0x06	; 6
    1268:	41 e0       	ldi	r20, 0x01	; 1
    126a:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    126e:	80 e0       	ldi	r24, 0x00	; 0
    1270:	90 e0       	ldi	r25, 0x00	; 0
    1272:	a0 e8       	ldi	r26, 0x80	; 128
    1274:	bf e3       	ldi	r27, 0x3F	; 63
    1276:	89 8f       	std	Y+25, r24	; 0x19
    1278:	9a 8f       	std	Y+26, r25	; 0x1a
    127a:	ab 8f       	std	Y+27, r26	; 0x1b
    127c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    127e:	69 8d       	ldd	r22, Y+25	; 0x19
    1280:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1282:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1284:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1286:	20 e0       	ldi	r18, 0x00	; 0
    1288:	30 e0       	ldi	r19, 0x00	; 0
    128a:	4a ef       	ldi	r20, 0xFA	; 250
    128c:	54 e4       	ldi	r21, 0x44	; 68
    128e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1292:	dc 01       	movw	r26, r24
    1294:	cb 01       	movw	r24, r22
    1296:	8d 8b       	std	Y+21, r24	; 0x15
    1298:	9e 8b       	std	Y+22, r25	; 0x16
    129a:	af 8b       	std	Y+23, r26	; 0x17
    129c:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    129e:	6d 89       	ldd	r22, Y+21	; 0x15
    12a0:	7e 89       	ldd	r23, Y+22	; 0x16
    12a2:	8f 89       	ldd	r24, Y+23	; 0x17
    12a4:	98 8d       	ldd	r25, Y+24	; 0x18
    12a6:	20 e0       	ldi	r18, 0x00	; 0
    12a8:	30 e0       	ldi	r19, 0x00	; 0
    12aa:	40 e8       	ldi	r20, 0x80	; 128
    12ac:	5f e3       	ldi	r21, 0x3F	; 63
    12ae:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    12b2:	88 23       	and	r24, r24
    12b4:	2c f4       	brge	.+10     	; 0x12c0 <Lcd_voidSendCommand+0x8e>
		__ticks = 1;
    12b6:	81 e0       	ldi	r24, 0x01	; 1
    12b8:	90 e0       	ldi	r25, 0x00	; 0
    12ba:	9c 8b       	std	Y+20, r25	; 0x14
    12bc:	8b 8b       	std	Y+19, r24	; 0x13
    12be:	3f c0       	rjmp	.+126    	; 0x133e <Lcd_voidSendCommand+0x10c>
	else if (__tmp > 65535)
    12c0:	6d 89       	ldd	r22, Y+21	; 0x15
    12c2:	7e 89       	ldd	r23, Y+22	; 0x16
    12c4:	8f 89       	ldd	r24, Y+23	; 0x17
    12c6:	98 8d       	ldd	r25, Y+24	; 0x18
    12c8:	20 e0       	ldi	r18, 0x00	; 0
    12ca:	3f ef       	ldi	r19, 0xFF	; 255
    12cc:	4f e7       	ldi	r20, 0x7F	; 127
    12ce:	57 e4       	ldi	r21, 0x47	; 71
    12d0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    12d4:	18 16       	cp	r1, r24
    12d6:	4c f5       	brge	.+82     	; 0x132a <Lcd_voidSendCommand+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    12d8:	69 8d       	ldd	r22, Y+25	; 0x19
    12da:	7a 8d       	ldd	r23, Y+26	; 0x1a
    12dc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    12de:	9c 8d       	ldd	r25, Y+28	; 0x1c
    12e0:	20 e0       	ldi	r18, 0x00	; 0
    12e2:	30 e0       	ldi	r19, 0x00	; 0
    12e4:	40 e2       	ldi	r20, 0x20	; 32
    12e6:	51 e4       	ldi	r21, 0x41	; 65
    12e8:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    12ec:	dc 01       	movw	r26, r24
    12ee:	cb 01       	movw	r24, r22
    12f0:	bc 01       	movw	r22, r24
    12f2:	cd 01       	movw	r24, r26
    12f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    12f8:	dc 01       	movw	r26, r24
    12fa:	cb 01       	movw	r24, r22
    12fc:	9c 8b       	std	Y+20, r25	; 0x14
    12fe:	8b 8b       	std	Y+19, r24	; 0x13
    1300:	0f c0       	rjmp	.+30     	; 0x1320 <Lcd_voidSendCommand+0xee>
    1302:	88 ec       	ldi	r24, 0xC8	; 200
    1304:	90 e0       	ldi	r25, 0x00	; 0
    1306:	9a 8b       	std	Y+18, r25	; 0x12
    1308:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    130a:	89 89       	ldd	r24, Y+17	; 0x11
    130c:	9a 89       	ldd	r25, Y+18	; 0x12
    130e:	01 97       	sbiw	r24, 0x01	; 1
    1310:	f1 f7       	brne	.-4      	; 0x130e <Lcd_voidSendCommand+0xdc>
    1312:	9a 8b       	std	Y+18, r25	; 0x12
    1314:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1316:	8b 89       	ldd	r24, Y+19	; 0x13
    1318:	9c 89       	ldd	r25, Y+20	; 0x14
    131a:	01 97       	sbiw	r24, 0x01	; 1
    131c:	9c 8b       	std	Y+20, r25	; 0x14
    131e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1320:	8b 89       	ldd	r24, Y+19	; 0x13
    1322:	9c 89       	ldd	r25, Y+20	; 0x14
    1324:	00 97       	sbiw	r24, 0x00	; 0
    1326:	69 f7       	brne	.-38     	; 0x1302 <Lcd_voidSendCommand+0xd0>
    1328:	14 c0       	rjmp	.+40     	; 0x1352 <Lcd_voidSendCommand+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    132a:	6d 89       	ldd	r22, Y+21	; 0x15
    132c:	7e 89       	ldd	r23, Y+22	; 0x16
    132e:	8f 89       	ldd	r24, Y+23	; 0x17
    1330:	98 8d       	ldd	r25, Y+24	; 0x18
    1332:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1336:	dc 01       	movw	r26, r24
    1338:	cb 01       	movw	r24, r22
    133a:	9c 8b       	std	Y+20, r25	; 0x14
    133c:	8b 8b       	std	Y+19, r24	; 0x13
    133e:	8b 89       	ldd	r24, Y+19	; 0x13
    1340:	9c 89       	ldd	r25, Y+20	; 0x14
    1342:	98 8b       	std	Y+16, r25	; 0x10
    1344:	8f 87       	std	Y+15, r24	; 0x0f
    1346:	8f 85       	ldd	r24, Y+15	; 0x0f
    1348:	98 89       	ldd	r25, Y+16	; 0x10
    134a:	01 97       	sbiw	r24, 0x01	; 1
    134c:	f1 f7       	brne	.-4      	; 0x134a <Lcd_voidSendCommand+0x118>
    134e:	98 8b       	std	Y+16, r25	; 0x10
    1350:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_LOW);
    1352:	80 e0       	ldi	r24, 0x00	; 0
    1354:	66 e0       	ldi	r22, 0x06	; 6
    1356:	40 e0       	ldi	r20, 0x00	; 0
    1358:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    135c:	80 e0       	ldi	r24, 0x00	; 0
    135e:	90 e0       	ldi	r25, 0x00	; 0
    1360:	a0 e8       	ldi	r26, 0x80	; 128
    1362:	bf e3       	ldi	r27, 0x3F	; 63
    1364:	8b 87       	std	Y+11, r24	; 0x0b
    1366:	9c 87       	std	Y+12, r25	; 0x0c
    1368:	ad 87       	std	Y+13, r26	; 0x0d
    136a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    136c:	6b 85       	ldd	r22, Y+11	; 0x0b
    136e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1370:	8d 85       	ldd	r24, Y+13	; 0x0d
    1372:	9e 85       	ldd	r25, Y+14	; 0x0e
    1374:	20 e0       	ldi	r18, 0x00	; 0
    1376:	30 e0       	ldi	r19, 0x00	; 0
    1378:	4a ef       	ldi	r20, 0xFA	; 250
    137a:	54 e4       	ldi	r21, 0x44	; 68
    137c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1380:	dc 01       	movw	r26, r24
    1382:	cb 01       	movw	r24, r22
    1384:	8f 83       	std	Y+7, r24	; 0x07
    1386:	98 87       	std	Y+8, r25	; 0x08
    1388:	a9 87       	std	Y+9, r26	; 0x09
    138a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    138c:	6f 81       	ldd	r22, Y+7	; 0x07
    138e:	78 85       	ldd	r23, Y+8	; 0x08
    1390:	89 85       	ldd	r24, Y+9	; 0x09
    1392:	9a 85       	ldd	r25, Y+10	; 0x0a
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	40 e8       	ldi	r20, 0x80	; 128
    139a:	5f e3       	ldi	r21, 0x3F	; 63
    139c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    13a0:	88 23       	and	r24, r24
    13a2:	2c f4       	brge	.+10     	; 0x13ae <Lcd_voidSendCommand+0x17c>
		__ticks = 1;
    13a4:	81 e0       	ldi	r24, 0x01	; 1
    13a6:	90 e0       	ldi	r25, 0x00	; 0
    13a8:	9e 83       	std	Y+6, r25	; 0x06
    13aa:	8d 83       	std	Y+5, r24	; 0x05
    13ac:	3f c0       	rjmp	.+126    	; 0x142c <Lcd_voidSendCommand+0x1fa>
	else if (__tmp > 65535)
    13ae:	6f 81       	ldd	r22, Y+7	; 0x07
    13b0:	78 85       	ldd	r23, Y+8	; 0x08
    13b2:	89 85       	ldd	r24, Y+9	; 0x09
    13b4:	9a 85       	ldd	r25, Y+10	; 0x0a
    13b6:	20 e0       	ldi	r18, 0x00	; 0
    13b8:	3f ef       	ldi	r19, 0xFF	; 255
    13ba:	4f e7       	ldi	r20, 0x7F	; 127
    13bc:	57 e4       	ldi	r21, 0x47	; 71
    13be:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    13c2:	18 16       	cp	r1, r24
    13c4:	4c f5       	brge	.+82     	; 0x1418 <Lcd_voidSendCommand+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13c6:	6b 85       	ldd	r22, Y+11	; 0x0b
    13c8:	7c 85       	ldd	r23, Y+12	; 0x0c
    13ca:	8d 85       	ldd	r24, Y+13	; 0x0d
    13cc:	9e 85       	ldd	r25, Y+14	; 0x0e
    13ce:	20 e0       	ldi	r18, 0x00	; 0
    13d0:	30 e0       	ldi	r19, 0x00	; 0
    13d2:	40 e2       	ldi	r20, 0x20	; 32
    13d4:	51 e4       	ldi	r21, 0x41	; 65
    13d6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    13da:	dc 01       	movw	r26, r24
    13dc:	cb 01       	movw	r24, r22
    13de:	bc 01       	movw	r22, r24
    13e0:	cd 01       	movw	r24, r26
    13e2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    13e6:	dc 01       	movw	r26, r24
    13e8:	cb 01       	movw	r24, r22
    13ea:	9e 83       	std	Y+6, r25	; 0x06
    13ec:	8d 83       	std	Y+5, r24	; 0x05
    13ee:	0f c0       	rjmp	.+30     	; 0x140e <Lcd_voidSendCommand+0x1dc>
    13f0:	88 ec       	ldi	r24, 0xC8	; 200
    13f2:	90 e0       	ldi	r25, 0x00	; 0
    13f4:	9c 83       	std	Y+4, r25	; 0x04
    13f6:	8b 83       	std	Y+3, r24	; 0x03
    13f8:	8b 81       	ldd	r24, Y+3	; 0x03
    13fa:	9c 81       	ldd	r25, Y+4	; 0x04
    13fc:	01 97       	sbiw	r24, 0x01	; 1
    13fe:	f1 f7       	brne	.-4      	; 0x13fc <Lcd_voidSendCommand+0x1ca>
    1400:	9c 83       	std	Y+4, r25	; 0x04
    1402:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1404:	8d 81       	ldd	r24, Y+5	; 0x05
    1406:	9e 81       	ldd	r25, Y+6	; 0x06
    1408:	01 97       	sbiw	r24, 0x01	; 1
    140a:	9e 83       	std	Y+6, r25	; 0x06
    140c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    140e:	8d 81       	ldd	r24, Y+5	; 0x05
    1410:	9e 81       	ldd	r25, Y+6	; 0x06
    1412:	00 97       	sbiw	r24, 0x00	; 0
    1414:	69 f7       	brne	.-38     	; 0x13f0 <Lcd_voidSendCommand+0x1be>
    1416:	14 c0       	rjmp	.+40     	; 0x1440 <Lcd_voidSendCommand+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1418:	6f 81       	ldd	r22, Y+7	; 0x07
    141a:	78 85       	ldd	r23, Y+8	; 0x08
    141c:	89 85       	ldd	r24, Y+9	; 0x09
    141e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1424:	dc 01       	movw	r26, r24
    1426:	cb 01       	movw	r24, r22
    1428:	9e 83       	std	Y+6, r25	; 0x06
    142a:	8d 83       	std	Y+5, r24	; 0x05
    142c:	8d 81       	ldd	r24, Y+5	; 0x05
    142e:	9e 81       	ldd	r25, Y+6	; 0x06
    1430:	9a 83       	std	Y+2, r25	; 0x02
    1432:	89 83       	std	Y+1, r24	; 0x01
    1434:	89 81       	ldd	r24, Y+1	; 0x01
    1436:	9a 81       	ldd	r25, Y+2	; 0x02
    1438:	01 97       	sbiw	r24, 0x01	; 1
    143a:	f1 f7       	brne	.-4      	; 0x1438 <Lcd_voidSendCommand+0x206>
    143c:	9a 83       	std	Y+2, r25	; 0x02
    143e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1440:	6d 96       	adiw	r28, 0x1d	; 29
    1442:	0f b6       	in	r0, 0x3f	; 63
    1444:	f8 94       	cli
    1446:	de bf       	out	0x3e, r29	; 62
    1448:	0f be       	out	0x3f, r0	; 63
    144a:	cd bf       	out	0x3d, r28	; 61
    144c:	cf 91       	pop	r28
    144e:	df 91       	pop	r29
    1450:	08 95       	ret

00001452 <Lcd_voidSendData>:

void Lcd_voidSendData(u8 Cpy_u8Data)
{
    1452:	df 93       	push	r29
    1454:	cf 93       	push	r28
    1456:	cd b7       	in	r28, 0x3d	; 61
    1458:	de b7       	in	r29, 0x3e	; 62
    145a:	6d 97       	sbiw	r28, 0x1d	; 29
    145c:	0f b6       	in	r0, 0x3f	; 63
    145e:	f8 94       	cli
    1460:	de bf       	out	0x3e, r29	; 62
    1462:	0f be       	out	0x3f, r0	; 63
    1464:	cd bf       	out	0x3d, r28	; 61
    1466:	8d 8f       	std	Y+29, r24	; 0x1d
	//RS high
	Dio_voidSetPinValue(LCD_RS_PORT,LCD_RS_PIN,DIO_HIGH);
    1468:	80 e0       	ldi	r24, 0x00	; 0
    146a:	64 e0       	ldi	r22, 0x04	; 4
    146c:	41 e0       	ldi	r20, 0x01	; 1
    146e:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
	//RW low
	Dio_voidSetPinValue(LCD_RW_PORT,LCD_RW_PIN,DIO_LOW);
    1472:	80 e0       	ldi	r24, 0x00	; 0
    1474:	65 e0       	ldi	r22, 0x05	; 5
    1476:	40 e0       	ldi	r20, 0x00	; 0
    1478:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
	//Send the data
	Dio_voidSetPortValue(LCD_DATA_PORT,Cpy_u8Data);
    147c:	81 e0       	ldi	r24, 0x01	; 1
    147e:	6d 8d       	ldd	r22, Y+29	; 0x1d
    1480:	0e 94 96 08 	call	0x112c	; 0x112c <Dio_voidSetPortValue>
	//the enable pulse
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_HIGH);
    1484:	80 e0       	ldi	r24, 0x00	; 0
    1486:	66 e0       	ldi	r22, 0x06	; 6
    1488:	41 e0       	ldi	r20, 0x01	; 1
    148a:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    148e:	80 e0       	ldi	r24, 0x00	; 0
    1490:	90 e0       	ldi	r25, 0x00	; 0
    1492:	a0 e8       	ldi	r26, 0x80	; 128
    1494:	bf e3       	ldi	r27, 0x3F	; 63
    1496:	89 8f       	std	Y+25, r24	; 0x19
    1498:	9a 8f       	std	Y+26, r25	; 0x1a
    149a:	ab 8f       	std	Y+27, r26	; 0x1b
    149c:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    149e:	69 8d       	ldd	r22, Y+25	; 0x19
    14a0:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14a2:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14a4:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14a6:	20 e0       	ldi	r18, 0x00	; 0
    14a8:	30 e0       	ldi	r19, 0x00	; 0
    14aa:	4a ef       	ldi	r20, 0xFA	; 250
    14ac:	54 e4       	ldi	r21, 0x44	; 68
    14ae:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    14b2:	dc 01       	movw	r26, r24
    14b4:	cb 01       	movw	r24, r22
    14b6:	8d 8b       	std	Y+21, r24	; 0x15
    14b8:	9e 8b       	std	Y+22, r25	; 0x16
    14ba:	af 8b       	std	Y+23, r26	; 0x17
    14bc:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14be:	6d 89       	ldd	r22, Y+21	; 0x15
    14c0:	7e 89       	ldd	r23, Y+22	; 0x16
    14c2:	8f 89       	ldd	r24, Y+23	; 0x17
    14c4:	98 8d       	ldd	r25, Y+24	; 0x18
    14c6:	20 e0       	ldi	r18, 0x00	; 0
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	40 e8       	ldi	r20, 0x80	; 128
    14cc:	5f e3       	ldi	r21, 0x3F	; 63
    14ce:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    14d2:	88 23       	and	r24, r24
    14d4:	2c f4       	brge	.+10     	; 0x14e0 <Lcd_voidSendData+0x8e>
		__ticks = 1;
    14d6:	81 e0       	ldi	r24, 0x01	; 1
    14d8:	90 e0       	ldi	r25, 0x00	; 0
    14da:	9c 8b       	std	Y+20, r25	; 0x14
    14dc:	8b 8b       	std	Y+19, r24	; 0x13
    14de:	3f c0       	rjmp	.+126    	; 0x155e <Lcd_voidSendData+0x10c>
	else if (__tmp > 65535)
    14e0:	6d 89       	ldd	r22, Y+21	; 0x15
    14e2:	7e 89       	ldd	r23, Y+22	; 0x16
    14e4:	8f 89       	ldd	r24, Y+23	; 0x17
    14e6:	98 8d       	ldd	r25, Y+24	; 0x18
    14e8:	20 e0       	ldi	r18, 0x00	; 0
    14ea:	3f ef       	ldi	r19, 0xFF	; 255
    14ec:	4f e7       	ldi	r20, 0x7F	; 127
    14ee:	57 e4       	ldi	r21, 0x47	; 71
    14f0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    14f4:	18 16       	cp	r1, r24
    14f6:	4c f5       	brge	.+82     	; 0x154a <Lcd_voidSendData+0xf8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    14f8:	69 8d       	ldd	r22, Y+25	; 0x19
    14fa:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14fc:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14fe:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1500:	20 e0       	ldi	r18, 0x00	; 0
    1502:	30 e0       	ldi	r19, 0x00	; 0
    1504:	40 e2       	ldi	r20, 0x20	; 32
    1506:	51 e4       	ldi	r21, 0x41	; 65
    1508:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    150c:	dc 01       	movw	r26, r24
    150e:	cb 01       	movw	r24, r22
    1510:	bc 01       	movw	r22, r24
    1512:	cd 01       	movw	r24, r26
    1514:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1518:	dc 01       	movw	r26, r24
    151a:	cb 01       	movw	r24, r22
    151c:	9c 8b       	std	Y+20, r25	; 0x14
    151e:	8b 8b       	std	Y+19, r24	; 0x13
    1520:	0f c0       	rjmp	.+30     	; 0x1540 <Lcd_voidSendData+0xee>
    1522:	88 ec       	ldi	r24, 0xC8	; 200
    1524:	90 e0       	ldi	r25, 0x00	; 0
    1526:	9a 8b       	std	Y+18, r25	; 0x12
    1528:	89 8b       	std	Y+17, r24	; 0x11
    152a:	89 89       	ldd	r24, Y+17	; 0x11
    152c:	9a 89       	ldd	r25, Y+18	; 0x12
    152e:	01 97       	sbiw	r24, 0x01	; 1
    1530:	f1 f7       	brne	.-4      	; 0x152e <Lcd_voidSendData+0xdc>
    1532:	9a 8b       	std	Y+18, r25	; 0x12
    1534:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1536:	8b 89       	ldd	r24, Y+19	; 0x13
    1538:	9c 89       	ldd	r25, Y+20	; 0x14
    153a:	01 97       	sbiw	r24, 0x01	; 1
    153c:	9c 8b       	std	Y+20, r25	; 0x14
    153e:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1540:	8b 89       	ldd	r24, Y+19	; 0x13
    1542:	9c 89       	ldd	r25, Y+20	; 0x14
    1544:	00 97       	sbiw	r24, 0x00	; 0
    1546:	69 f7       	brne	.-38     	; 0x1522 <Lcd_voidSendData+0xd0>
    1548:	14 c0       	rjmp	.+40     	; 0x1572 <Lcd_voidSendData+0x120>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    154a:	6d 89       	ldd	r22, Y+21	; 0x15
    154c:	7e 89       	ldd	r23, Y+22	; 0x16
    154e:	8f 89       	ldd	r24, Y+23	; 0x17
    1550:	98 8d       	ldd	r25, Y+24	; 0x18
    1552:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1556:	dc 01       	movw	r26, r24
    1558:	cb 01       	movw	r24, r22
    155a:	9c 8b       	std	Y+20, r25	; 0x14
    155c:	8b 8b       	std	Y+19, r24	; 0x13
    155e:	8b 89       	ldd	r24, Y+19	; 0x13
    1560:	9c 89       	ldd	r25, Y+20	; 0x14
    1562:	98 8b       	std	Y+16, r25	; 0x10
    1564:	8f 87       	std	Y+15, r24	; 0x0f
    1566:	8f 85       	ldd	r24, Y+15	; 0x0f
    1568:	98 89       	ldd	r25, Y+16	; 0x10
    156a:	01 97       	sbiw	r24, 0x01	; 1
    156c:	f1 f7       	brne	.-4      	; 0x156a <Lcd_voidSendData+0x118>
    156e:	98 8b       	std	Y+16, r25	; 0x10
    1570:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Dio_voidSetPinValue(LCD_E_PORT,LCD_E_PIN,DIO_LOW);
    1572:	80 e0       	ldi	r24, 0x00	; 0
    1574:	66 e0       	ldi	r22, 0x06	; 6
    1576:	40 e0       	ldi	r20, 0x00	; 0
    1578:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    157c:	80 e0       	ldi	r24, 0x00	; 0
    157e:	90 e0       	ldi	r25, 0x00	; 0
    1580:	a0 e8       	ldi	r26, 0x80	; 128
    1582:	bf e3       	ldi	r27, 0x3F	; 63
    1584:	8b 87       	std	Y+11, r24	; 0x0b
    1586:	9c 87       	std	Y+12, r25	; 0x0c
    1588:	ad 87       	std	Y+13, r26	; 0x0d
    158a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    158c:	6b 85       	ldd	r22, Y+11	; 0x0b
    158e:	7c 85       	ldd	r23, Y+12	; 0x0c
    1590:	8d 85       	ldd	r24, Y+13	; 0x0d
    1592:	9e 85       	ldd	r25, Y+14	; 0x0e
    1594:	20 e0       	ldi	r18, 0x00	; 0
    1596:	30 e0       	ldi	r19, 0x00	; 0
    1598:	4a ef       	ldi	r20, 0xFA	; 250
    159a:	54 e4       	ldi	r21, 0x44	; 68
    159c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15a0:	dc 01       	movw	r26, r24
    15a2:	cb 01       	movw	r24, r22
    15a4:	8f 83       	std	Y+7, r24	; 0x07
    15a6:	98 87       	std	Y+8, r25	; 0x08
    15a8:	a9 87       	std	Y+9, r26	; 0x09
    15aa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    15ac:	6f 81       	ldd	r22, Y+7	; 0x07
    15ae:	78 85       	ldd	r23, Y+8	; 0x08
    15b0:	89 85       	ldd	r24, Y+9	; 0x09
    15b2:	9a 85       	ldd	r25, Y+10	; 0x0a
    15b4:	20 e0       	ldi	r18, 0x00	; 0
    15b6:	30 e0       	ldi	r19, 0x00	; 0
    15b8:	40 e8       	ldi	r20, 0x80	; 128
    15ba:	5f e3       	ldi	r21, 0x3F	; 63
    15bc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    15c0:	88 23       	and	r24, r24
    15c2:	2c f4       	brge	.+10     	; 0x15ce <Lcd_voidSendData+0x17c>
		__ticks = 1;
    15c4:	81 e0       	ldi	r24, 0x01	; 1
    15c6:	90 e0       	ldi	r25, 0x00	; 0
    15c8:	9e 83       	std	Y+6, r25	; 0x06
    15ca:	8d 83       	std	Y+5, r24	; 0x05
    15cc:	3f c0       	rjmp	.+126    	; 0x164c <Lcd_voidSendData+0x1fa>
	else if (__tmp > 65535)
    15ce:	6f 81       	ldd	r22, Y+7	; 0x07
    15d0:	78 85       	ldd	r23, Y+8	; 0x08
    15d2:	89 85       	ldd	r24, Y+9	; 0x09
    15d4:	9a 85       	ldd	r25, Y+10	; 0x0a
    15d6:	20 e0       	ldi	r18, 0x00	; 0
    15d8:	3f ef       	ldi	r19, 0xFF	; 255
    15da:	4f e7       	ldi	r20, 0x7F	; 127
    15dc:	57 e4       	ldi	r21, 0x47	; 71
    15de:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    15e2:	18 16       	cp	r1, r24
    15e4:	4c f5       	brge	.+82     	; 0x1638 <Lcd_voidSendData+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    15e6:	6b 85       	ldd	r22, Y+11	; 0x0b
    15e8:	7c 85       	ldd	r23, Y+12	; 0x0c
    15ea:	8d 85       	ldd	r24, Y+13	; 0x0d
    15ec:	9e 85       	ldd	r25, Y+14	; 0x0e
    15ee:	20 e0       	ldi	r18, 0x00	; 0
    15f0:	30 e0       	ldi	r19, 0x00	; 0
    15f2:	40 e2       	ldi	r20, 0x20	; 32
    15f4:	51 e4       	ldi	r21, 0x41	; 65
    15f6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    15fa:	dc 01       	movw	r26, r24
    15fc:	cb 01       	movw	r24, r22
    15fe:	bc 01       	movw	r22, r24
    1600:	cd 01       	movw	r24, r26
    1602:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1606:	dc 01       	movw	r26, r24
    1608:	cb 01       	movw	r24, r22
    160a:	9e 83       	std	Y+6, r25	; 0x06
    160c:	8d 83       	std	Y+5, r24	; 0x05
    160e:	0f c0       	rjmp	.+30     	; 0x162e <Lcd_voidSendData+0x1dc>
    1610:	88 ec       	ldi	r24, 0xC8	; 200
    1612:	90 e0       	ldi	r25, 0x00	; 0
    1614:	9c 83       	std	Y+4, r25	; 0x04
    1616:	8b 83       	std	Y+3, r24	; 0x03
    1618:	8b 81       	ldd	r24, Y+3	; 0x03
    161a:	9c 81       	ldd	r25, Y+4	; 0x04
    161c:	01 97       	sbiw	r24, 0x01	; 1
    161e:	f1 f7       	brne	.-4      	; 0x161c <Lcd_voidSendData+0x1ca>
    1620:	9c 83       	std	Y+4, r25	; 0x04
    1622:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1624:	8d 81       	ldd	r24, Y+5	; 0x05
    1626:	9e 81       	ldd	r25, Y+6	; 0x06
    1628:	01 97       	sbiw	r24, 0x01	; 1
    162a:	9e 83       	std	Y+6, r25	; 0x06
    162c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    162e:	8d 81       	ldd	r24, Y+5	; 0x05
    1630:	9e 81       	ldd	r25, Y+6	; 0x06
    1632:	00 97       	sbiw	r24, 0x00	; 0
    1634:	69 f7       	brne	.-38     	; 0x1610 <Lcd_voidSendData+0x1be>
    1636:	14 c0       	rjmp	.+40     	; 0x1660 <Lcd_voidSendData+0x20e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1638:	6f 81       	ldd	r22, Y+7	; 0x07
    163a:	78 85       	ldd	r23, Y+8	; 0x08
    163c:	89 85       	ldd	r24, Y+9	; 0x09
    163e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1640:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1644:	dc 01       	movw	r26, r24
    1646:	cb 01       	movw	r24, r22
    1648:	9e 83       	std	Y+6, r25	; 0x06
    164a:	8d 83       	std	Y+5, r24	; 0x05
    164c:	8d 81       	ldd	r24, Y+5	; 0x05
    164e:	9e 81       	ldd	r25, Y+6	; 0x06
    1650:	9a 83       	std	Y+2, r25	; 0x02
    1652:	89 83       	std	Y+1, r24	; 0x01
    1654:	89 81       	ldd	r24, Y+1	; 0x01
    1656:	9a 81       	ldd	r25, Y+2	; 0x02
    1658:	01 97       	sbiw	r24, 0x01	; 1
    165a:	f1 f7       	brne	.-4      	; 0x1658 <Lcd_voidSendData+0x206>
    165c:	9a 83       	std	Y+2, r25	; 0x02
    165e:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(1);
}
    1660:	6d 96       	adiw	r28, 0x1d	; 29
    1662:	0f b6       	in	r0, 0x3f	; 63
    1664:	f8 94       	cli
    1666:	de bf       	out	0x3e, r29	; 62
    1668:	0f be       	out	0x3f, r0	; 63
    166a:	cd bf       	out	0x3d, r28	; 61
    166c:	cf 91       	pop	r28
    166e:	df 91       	pop	r29
    1670:	08 95       	ret

00001672 <Lcd_Init>:

void Lcd_Init(void)
{
    1672:	df 93       	push	r29
    1674:	cf 93       	push	r28
    1676:	cd b7       	in	r28, 0x3d	; 61
    1678:	de b7       	in	r29, 0x3e	; 62
    167a:	e8 97       	sbiw	r28, 0x38	; 56
    167c:	0f b6       	in	r0, 0x3f	; 63
    167e:	f8 94       	cli
    1680:	de bf       	out	0x3e, r29	; 62
    1682:	0f be       	out	0x3f, r0	; 63
    1684:	cd bf       	out	0x3d, r28	; 61
	// Initialize pins as out
	Dio_voidSetPortDirection(LCD_DATA_PORT,DIO_OUTPUT);
    1686:	81 e0       	ldi	r24, 0x01	; 1
    1688:	61 e0       	ldi	r22, 0x01	; 1
    168a:	0e 94 1d 08 	call	0x103a	; 0x103a <Dio_voidSetPortDirection>
	Dio_voidSetPinDirection(LCD_RS_PORT,LCD_RS_PIN,DIO_OUTPUT);
    168e:	80 e0       	ldi	r24, 0x00	; 0
    1690:	64 e0       	ldi	r22, 0x04	; 4
    1692:	41 e0       	ldi	r20, 0x01	; 1
    1694:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(LCD_RW_PORT,LCD_RW_PIN,DIO_OUTPUT);
    1698:	80 e0       	ldi	r24, 0x00	; 0
    169a:	65 e0       	ldi	r22, 0x05	; 5
    169c:	41 e0       	ldi	r20, 0x01	; 1
    169e:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(LCD_E_PORT,LCD_E_PIN,DIO_OUTPUT);
    16a2:	80 e0       	ldi	r24, 0x00	; 0
    16a4:	66 e0       	ldi	r22, 0x06	; 6
    16a6:	41 e0       	ldi	r20, 0x01	; 1
    16a8:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_voidSetPinDirection>
    16ac:	80 e0       	ldi	r24, 0x00	; 0
    16ae:	90 e0       	ldi	r25, 0x00	; 0
    16b0:	a0 e2       	ldi	r26, 0x20	; 32
    16b2:	b2 e4       	ldi	r27, 0x42	; 66
    16b4:	8d ab       	std	Y+53, r24	; 0x35
    16b6:	9e ab       	std	Y+54, r25	; 0x36
    16b8:	af ab       	std	Y+55, r26	; 0x37
    16ba:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16bc:	6d a9       	ldd	r22, Y+53	; 0x35
    16be:	7e a9       	ldd	r23, Y+54	; 0x36
    16c0:	8f a9       	ldd	r24, Y+55	; 0x37
    16c2:	98 ad       	ldd	r25, Y+56	; 0x38
    16c4:	20 e0       	ldi	r18, 0x00	; 0
    16c6:	30 e0       	ldi	r19, 0x00	; 0
    16c8:	4a ef       	ldi	r20, 0xFA	; 250
    16ca:	54 e4       	ldi	r21, 0x44	; 68
    16cc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    16d0:	dc 01       	movw	r26, r24
    16d2:	cb 01       	movw	r24, r22
    16d4:	89 ab       	std	Y+49, r24	; 0x31
    16d6:	9a ab       	std	Y+50, r25	; 0x32
    16d8:	ab ab       	std	Y+51, r26	; 0x33
    16da:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    16dc:	69 a9       	ldd	r22, Y+49	; 0x31
    16de:	7a a9       	ldd	r23, Y+50	; 0x32
    16e0:	8b a9       	ldd	r24, Y+51	; 0x33
    16e2:	9c a9       	ldd	r25, Y+52	; 0x34
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	40 e8       	ldi	r20, 0x80	; 128
    16ea:	5f e3       	ldi	r21, 0x3F	; 63
    16ec:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    16f0:	88 23       	and	r24, r24
    16f2:	2c f4       	brge	.+10     	; 0x16fe <Lcd_Init+0x8c>
		__ticks = 1;
    16f4:	81 e0       	ldi	r24, 0x01	; 1
    16f6:	90 e0       	ldi	r25, 0x00	; 0
    16f8:	98 ab       	std	Y+48, r25	; 0x30
    16fa:	8f a7       	std	Y+47, r24	; 0x2f
    16fc:	3f c0       	rjmp	.+126    	; 0x177c <Lcd_Init+0x10a>
	else if (__tmp > 65535)
    16fe:	69 a9       	ldd	r22, Y+49	; 0x31
    1700:	7a a9       	ldd	r23, Y+50	; 0x32
    1702:	8b a9       	ldd	r24, Y+51	; 0x33
    1704:	9c a9       	ldd	r25, Y+52	; 0x34
    1706:	20 e0       	ldi	r18, 0x00	; 0
    1708:	3f ef       	ldi	r19, 0xFF	; 255
    170a:	4f e7       	ldi	r20, 0x7F	; 127
    170c:	57 e4       	ldi	r21, 0x47	; 71
    170e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1712:	18 16       	cp	r1, r24
    1714:	4c f5       	brge	.+82     	; 0x1768 <Lcd_Init+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1716:	6d a9       	ldd	r22, Y+53	; 0x35
    1718:	7e a9       	ldd	r23, Y+54	; 0x36
    171a:	8f a9       	ldd	r24, Y+55	; 0x37
    171c:	98 ad       	ldd	r25, Y+56	; 0x38
    171e:	20 e0       	ldi	r18, 0x00	; 0
    1720:	30 e0       	ldi	r19, 0x00	; 0
    1722:	40 e2       	ldi	r20, 0x20	; 32
    1724:	51 e4       	ldi	r21, 0x41	; 65
    1726:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    172a:	dc 01       	movw	r26, r24
    172c:	cb 01       	movw	r24, r22
    172e:	bc 01       	movw	r22, r24
    1730:	cd 01       	movw	r24, r26
    1732:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1736:	dc 01       	movw	r26, r24
    1738:	cb 01       	movw	r24, r22
    173a:	98 ab       	std	Y+48, r25	; 0x30
    173c:	8f a7       	std	Y+47, r24	; 0x2f
    173e:	0f c0       	rjmp	.+30     	; 0x175e <Lcd_Init+0xec>
    1740:	88 ec       	ldi	r24, 0xC8	; 200
    1742:	90 e0       	ldi	r25, 0x00	; 0
    1744:	9e a7       	std	Y+46, r25	; 0x2e
    1746:	8d a7       	std	Y+45, r24	; 0x2d
    1748:	8d a5       	ldd	r24, Y+45	; 0x2d
    174a:	9e a5       	ldd	r25, Y+46	; 0x2e
    174c:	01 97       	sbiw	r24, 0x01	; 1
    174e:	f1 f7       	brne	.-4      	; 0x174c <Lcd_Init+0xda>
    1750:	9e a7       	std	Y+46, r25	; 0x2e
    1752:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1754:	8f a5       	ldd	r24, Y+47	; 0x2f
    1756:	98 a9       	ldd	r25, Y+48	; 0x30
    1758:	01 97       	sbiw	r24, 0x01	; 1
    175a:	98 ab       	std	Y+48, r25	; 0x30
    175c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    175e:	8f a5       	ldd	r24, Y+47	; 0x2f
    1760:	98 a9       	ldd	r25, Y+48	; 0x30
    1762:	00 97       	sbiw	r24, 0x00	; 0
    1764:	69 f7       	brne	.-38     	; 0x1740 <Lcd_Init+0xce>
    1766:	14 c0       	rjmp	.+40     	; 0x1790 <Lcd_Init+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1768:	69 a9       	ldd	r22, Y+49	; 0x31
    176a:	7a a9       	ldd	r23, Y+50	; 0x32
    176c:	8b a9       	ldd	r24, Y+51	; 0x33
    176e:	9c a9       	ldd	r25, Y+52	; 0x34
    1770:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1774:	dc 01       	movw	r26, r24
    1776:	cb 01       	movw	r24, r22
    1778:	98 ab       	std	Y+48, r25	; 0x30
    177a:	8f a7       	std	Y+47, r24	; 0x2f
    177c:	8f a5       	ldd	r24, Y+47	; 0x2f
    177e:	98 a9       	ldd	r25, Y+48	; 0x30
    1780:	9c a7       	std	Y+44, r25	; 0x2c
    1782:	8b a7       	std	Y+43, r24	; 0x2b
    1784:	8b a5       	ldd	r24, Y+43	; 0x2b
    1786:	9c a5       	ldd	r25, Y+44	; 0x2c
    1788:	01 97       	sbiw	r24, 0x01	; 1
    178a:	f1 f7       	brne	.-4      	; 0x1788 <Lcd_Init+0x116>
    178c:	9c a7       	std	Y+44, r25	; 0x2c
    178e:	8b a7       	std	Y+43, r24	; 0x2b

	_delay_ms(40);
	Lcd_voidSendCommand(0b00111000);
    1790:	88 e3       	ldi	r24, 0x38	; 56
    1792:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
    1796:	80 e0       	ldi	r24, 0x00	; 0
    1798:	90 e0       	ldi	r25, 0x00	; 0
    179a:	a0 e8       	ldi	r26, 0x80	; 128
    179c:	bf e3       	ldi	r27, 0x3F	; 63
    179e:	8f a3       	std	Y+39, r24	; 0x27
    17a0:	98 a7       	std	Y+40, r25	; 0x28
    17a2:	a9 a7       	std	Y+41, r26	; 0x29
    17a4:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17a6:	6f a1       	ldd	r22, Y+39	; 0x27
    17a8:	78 a5       	ldd	r23, Y+40	; 0x28
    17aa:	89 a5       	ldd	r24, Y+41	; 0x29
    17ac:	9a a5       	ldd	r25, Y+42	; 0x2a
    17ae:	20 e0       	ldi	r18, 0x00	; 0
    17b0:	30 e0       	ldi	r19, 0x00	; 0
    17b2:	4a ef       	ldi	r20, 0xFA	; 250
    17b4:	54 e4       	ldi	r21, 0x44	; 68
    17b6:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    17ba:	dc 01       	movw	r26, r24
    17bc:	cb 01       	movw	r24, r22
    17be:	8b a3       	std	Y+35, r24	; 0x23
    17c0:	9c a3       	std	Y+36, r25	; 0x24
    17c2:	ad a3       	std	Y+37, r26	; 0x25
    17c4:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    17c6:	6b a1       	ldd	r22, Y+35	; 0x23
    17c8:	7c a1       	ldd	r23, Y+36	; 0x24
    17ca:	8d a1       	ldd	r24, Y+37	; 0x25
    17cc:	9e a1       	ldd	r25, Y+38	; 0x26
    17ce:	20 e0       	ldi	r18, 0x00	; 0
    17d0:	30 e0       	ldi	r19, 0x00	; 0
    17d2:	40 e8       	ldi	r20, 0x80	; 128
    17d4:	5f e3       	ldi	r21, 0x3F	; 63
    17d6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    17da:	88 23       	and	r24, r24
    17dc:	2c f4       	brge	.+10     	; 0x17e8 <Lcd_Init+0x176>
		__ticks = 1;
    17de:	81 e0       	ldi	r24, 0x01	; 1
    17e0:	90 e0       	ldi	r25, 0x00	; 0
    17e2:	9a a3       	std	Y+34, r25	; 0x22
    17e4:	89 a3       	std	Y+33, r24	; 0x21
    17e6:	3f c0       	rjmp	.+126    	; 0x1866 <Lcd_Init+0x1f4>
	else if (__tmp > 65535)
    17e8:	6b a1       	ldd	r22, Y+35	; 0x23
    17ea:	7c a1       	ldd	r23, Y+36	; 0x24
    17ec:	8d a1       	ldd	r24, Y+37	; 0x25
    17ee:	9e a1       	ldd	r25, Y+38	; 0x26
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	3f ef       	ldi	r19, 0xFF	; 255
    17f4:	4f e7       	ldi	r20, 0x7F	; 127
    17f6:	57 e4       	ldi	r21, 0x47	; 71
    17f8:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    17fc:	18 16       	cp	r1, r24
    17fe:	4c f5       	brge	.+82     	; 0x1852 <Lcd_Init+0x1e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1800:	6f a1       	ldd	r22, Y+39	; 0x27
    1802:	78 a5       	ldd	r23, Y+40	; 0x28
    1804:	89 a5       	ldd	r24, Y+41	; 0x29
    1806:	9a a5       	ldd	r25, Y+42	; 0x2a
    1808:	20 e0       	ldi	r18, 0x00	; 0
    180a:	30 e0       	ldi	r19, 0x00	; 0
    180c:	40 e2       	ldi	r20, 0x20	; 32
    180e:	51 e4       	ldi	r21, 0x41	; 65
    1810:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1814:	dc 01       	movw	r26, r24
    1816:	cb 01       	movw	r24, r22
    1818:	bc 01       	movw	r22, r24
    181a:	cd 01       	movw	r24, r26
    181c:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1820:	dc 01       	movw	r26, r24
    1822:	cb 01       	movw	r24, r22
    1824:	9a a3       	std	Y+34, r25	; 0x22
    1826:	89 a3       	std	Y+33, r24	; 0x21
    1828:	0f c0       	rjmp	.+30     	; 0x1848 <Lcd_Init+0x1d6>
    182a:	88 ec       	ldi	r24, 0xC8	; 200
    182c:	90 e0       	ldi	r25, 0x00	; 0
    182e:	98 a3       	std	Y+32, r25	; 0x20
    1830:	8f 8f       	std	Y+31, r24	; 0x1f
    1832:	8f 8d       	ldd	r24, Y+31	; 0x1f
    1834:	98 a1       	ldd	r25, Y+32	; 0x20
    1836:	01 97       	sbiw	r24, 0x01	; 1
    1838:	f1 f7       	brne	.-4      	; 0x1836 <Lcd_Init+0x1c4>
    183a:	98 a3       	std	Y+32, r25	; 0x20
    183c:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    183e:	89 a1       	ldd	r24, Y+33	; 0x21
    1840:	9a a1       	ldd	r25, Y+34	; 0x22
    1842:	01 97       	sbiw	r24, 0x01	; 1
    1844:	9a a3       	std	Y+34, r25	; 0x22
    1846:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1848:	89 a1       	ldd	r24, Y+33	; 0x21
    184a:	9a a1       	ldd	r25, Y+34	; 0x22
    184c:	00 97       	sbiw	r24, 0x00	; 0
    184e:	69 f7       	brne	.-38     	; 0x182a <Lcd_Init+0x1b8>
    1850:	14 c0       	rjmp	.+40     	; 0x187a <Lcd_Init+0x208>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1852:	6b a1       	ldd	r22, Y+35	; 0x23
    1854:	7c a1       	ldd	r23, Y+36	; 0x24
    1856:	8d a1       	ldd	r24, Y+37	; 0x25
    1858:	9e a1       	ldd	r25, Y+38	; 0x26
    185a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    185e:	dc 01       	movw	r26, r24
    1860:	cb 01       	movw	r24, r22
    1862:	9a a3       	std	Y+34, r25	; 0x22
    1864:	89 a3       	std	Y+33, r24	; 0x21
    1866:	89 a1       	ldd	r24, Y+33	; 0x21
    1868:	9a a1       	ldd	r25, Y+34	; 0x22
    186a:	9e 8f       	std	Y+30, r25	; 0x1e
    186c:	8d 8f       	std	Y+29, r24	; 0x1d
    186e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1870:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1872:	01 97       	sbiw	r24, 0x01	; 1
    1874:	f1 f7       	brne	.-4      	; 0x1872 <Lcd_Init+0x200>
    1876:	9e 8f       	std	Y+30, r25	; 0x1e
    1878:	8d 8f       	std	Y+29, r24	; 0x1d
	_delay_ms(1);
	Lcd_voidSendCommand(0b00001100);
    187a:	8c e0       	ldi	r24, 0x0C	; 12
    187c:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
    1880:	80 e0       	ldi	r24, 0x00	; 0
    1882:	90 e0       	ldi	r25, 0x00	; 0
    1884:	a0 e8       	ldi	r26, 0x80	; 128
    1886:	bf e3       	ldi	r27, 0x3F	; 63
    1888:	89 8f       	std	Y+25, r24	; 0x19
    188a:	9a 8f       	std	Y+26, r25	; 0x1a
    188c:	ab 8f       	std	Y+27, r26	; 0x1b
    188e:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1890:	69 8d       	ldd	r22, Y+25	; 0x19
    1892:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1894:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1896:	9c 8d       	ldd	r25, Y+28	; 0x1c
    1898:	20 e0       	ldi	r18, 0x00	; 0
    189a:	30 e0       	ldi	r19, 0x00	; 0
    189c:	4a ef       	ldi	r20, 0xFA	; 250
    189e:	54 e4       	ldi	r21, 0x44	; 68
    18a0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18a4:	dc 01       	movw	r26, r24
    18a6:	cb 01       	movw	r24, r22
    18a8:	8d 8b       	std	Y+21, r24	; 0x15
    18aa:	9e 8b       	std	Y+22, r25	; 0x16
    18ac:	af 8b       	std	Y+23, r26	; 0x17
    18ae:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    18b0:	6d 89       	ldd	r22, Y+21	; 0x15
    18b2:	7e 89       	ldd	r23, Y+22	; 0x16
    18b4:	8f 89       	ldd	r24, Y+23	; 0x17
    18b6:	98 8d       	ldd	r25, Y+24	; 0x18
    18b8:	20 e0       	ldi	r18, 0x00	; 0
    18ba:	30 e0       	ldi	r19, 0x00	; 0
    18bc:	40 e8       	ldi	r20, 0x80	; 128
    18be:	5f e3       	ldi	r21, 0x3F	; 63
    18c0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    18c4:	88 23       	and	r24, r24
    18c6:	2c f4       	brge	.+10     	; 0x18d2 <Lcd_Init+0x260>
		__ticks = 1;
    18c8:	81 e0       	ldi	r24, 0x01	; 1
    18ca:	90 e0       	ldi	r25, 0x00	; 0
    18cc:	9c 8b       	std	Y+20, r25	; 0x14
    18ce:	8b 8b       	std	Y+19, r24	; 0x13
    18d0:	3f c0       	rjmp	.+126    	; 0x1950 <Lcd_Init+0x2de>
	else if (__tmp > 65535)
    18d2:	6d 89       	ldd	r22, Y+21	; 0x15
    18d4:	7e 89       	ldd	r23, Y+22	; 0x16
    18d6:	8f 89       	ldd	r24, Y+23	; 0x17
    18d8:	98 8d       	ldd	r25, Y+24	; 0x18
    18da:	20 e0       	ldi	r18, 0x00	; 0
    18dc:	3f ef       	ldi	r19, 0xFF	; 255
    18de:	4f e7       	ldi	r20, 0x7F	; 127
    18e0:	57 e4       	ldi	r21, 0x47	; 71
    18e2:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    18e6:	18 16       	cp	r1, r24
    18e8:	4c f5       	brge	.+82     	; 0x193c <Lcd_Init+0x2ca>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    18ea:	69 8d       	ldd	r22, Y+25	; 0x19
    18ec:	7a 8d       	ldd	r23, Y+26	; 0x1a
    18ee:	8b 8d       	ldd	r24, Y+27	; 0x1b
    18f0:	9c 8d       	ldd	r25, Y+28	; 0x1c
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e2       	ldi	r20, 0x20	; 32
    18f8:	51 e4       	ldi	r21, 0x41	; 65
    18fa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    18fe:	dc 01       	movw	r26, r24
    1900:	cb 01       	movw	r24, r22
    1902:	bc 01       	movw	r22, r24
    1904:	cd 01       	movw	r24, r26
    1906:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    190a:	dc 01       	movw	r26, r24
    190c:	cb 01       	movw	r24, r22
    190e:	9c 8b       	std	Y+20, r25	; 0x14
    1910:	8b 8b       	std	Y+19, r24	; 0x13
    1912:	0f c0       	rjmp	.+30     	; 0x1932 <Lcd_Init+0x2c0>
    1914:	88 ec       	ldi	r24, 0xC8	; 200
    1916:	90 e0       	ldi	r25, 0x00	; 0
    1918:	9a 8b       	std	Y+18, r25	; 0x12
    191a:	89 8b       	std	Y+17, r24	; 0x11
    191c:	89 89       	ldd	r24, Y+17	; 0x11
    191e:	9a 89       	ldd	r25, Y+18	; 0x12
    1920:	01 97       	sbiw	r24, 0x01	; 1
    1922:	f1 f7       	brne	.-4      	; 0x1920 <Lcd_Init+0x2ae>
    1924:	9a 8b       	std	Y+18, r25	; 0x12
    1926:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1928:	8b 89       	ldd	r24, Y+19	; 0x13
    192a:	9c 89       	ldd	r25, Y+20	; 0x14
    192c:	01 97       	sbiw	r24, 0x01	; 1
    192e:	9c 8b       	std	Y+20, r25	; 0x14
    1930:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1932:	8b 89       	ldd	r24, Y+19	; 0x13
    1934:	9c 89       	ldd	r25, Y+20	; 0x14
    1936:	00 97       	sbiw	r24, 0x00	; 0
    1938:	69 f7       	brne	.-38     	; 0x1914 <Lcd_Init+0x2a2>
    193a:	14 c0       	rjmp	.+40     	; 0x1964 <Lcd_Init+0x2f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    193c:	6d 89       	ldd	r22, Y+21	; 0x15
    193e:	7e 89       	ldd	r23, Y+22	; 0x16
    1940:	8f 89       	ldd	r24, Y+23	; 0x17
    1942:	98 8d       	ldd	r25, Y+24	; 0x18
    1944:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1948:	dc 01       	movw	r26, r24
    194a:	cb 01       	movw	r24, r22
    194c:	9c 8b       	std	Y+20, r25	; 0x14
    194e:	8b 8b       	std	Y+19, r24	; 0x13
    1950:	8b 89       	ldd	r24, Y+19	; 0x13
    1952:	9c 89       	ldd	r25, Y+20	; 0x14
    1954:	98 8b       	std	Y+16, r25	; 0x10
    1956:	8f 87       	std	Y+15, r24	; 0x0f
    1958:	8f 85       	ldd	r24, Y+15	; 0x0f
    195a:	98 89       	ldd	r25, Y+16	; 0x10
    195c:	01 97       	sbiw	r24, 0x01	; 1
    195e:	f1 f7       	brne	.-4      	; 0x195c <Lcd_Init+0x2ea>
    1960:	98 8b       	std	Y+16, r25	; 0x10
    1962:	8f 87       	std	Y+15, r24	; 0x0f
	_delay_ms(1);
	Lcd_voidSendCommand(0b00000001);
    1964:	81 e0       	ldi	r24, 0x01	; 1
    1966:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
    196a:	80 e0       	ldi	r24, 0x00	; 0
    196c:	90 e0       	ldi	r25, 0x00	; 0
    196e:	a0 e0       	ldi	r26, 0x00	; 0
    1970:	b0 e4       	ldi	r27, 0x40	; 64
    1972:	8b 87       	std	Y+11, r24	; 0x0b
    1974:	9c 87       	std	Y+12, r25	; 0x0c
    1976:	ad 87       	std	Y+13, r26	; 0x0d
    1978:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    197a:	6b 85       	ldd	r22, Y+11	; 0x0b
    197c:	7c 85       	ldd	r23, Y+12	; 0x0c
    197e:	8d 85       	ldd	r24, Y+13	; 0x0d
    1980:	9e 85       	ldd	r25, Y+14	; 0x0e
    1982:	20 e0       	ldi	r18, 0x00	; 0
    1984:	30 e0       	ldi	r19, 0x00	; 0
    1986:	4a ef       	ldi	r20, 0xFA	; 250
    1988:	54 e4       	ldi	r21, 0x44	; 68
    198a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    198e:	dc 01       	movw	r26, r24
    1990:	cb 01       	movw	r24, r22
    1992:	8f 83       	std	Y+7, r24	; 0x07
    1994:	98 87       	std	Y+8, r25	; 0x08
    1996:	a9 87       	std	Y+9, r26	; 0x09
    1998:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    199a:	6f 81       	ldd	r22, Y+7	; 0x07
    199c:	78 85       	ldd	r23, Y+8	; 0x08
    199e:	89 85       	ldd	r24, Y+9	; 0x09
    19a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    19a2:	20 e0       	ldi	r18, 0x00	; 0
    19a4:	30 e0       	ldi	r19, 0x00	; 0
    19a6:	40 e8       	ldi	r20, 0x80	; 128
    19a8:	5f e3       	ldi	r21, 0x3F	; 63
    19aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    19ae:	88 23       	and	r24, r24
    19b0:	2c f4       	brge	.+10     	; 0x19bc <Lcd_Init+0x34a>
		__ticks = 1;
    19b2:	81 e0       	ldi	r24, 0x01	; 1
    19b4:	90 e0       	ldi	r25, 0x00	; 0
    19b6:	9e 83       	std	Y+6, r25	; 0x06
    19b8:	8d 83       	std	Y+5, r24	; 0x05
    19ba:	3f c0       	rjmp	.+126    	; 0x1a3a <Lcd_Init+0x3c8>
	else if (__tmp > 65535)
    19bc:	6f 81       	ldd	r22, Y+7	; 0x07
    19be:	78 85       	ldd	r23, Y+8	; 0x08
    19c0:	89 85       	ldd	r24, Y+9	; 0x09
    19c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    19c4:	20 e0       	ldi	r18, 0x00	; 0
    19c6:	3f ef       	ldi	r19, 0xFF	; 255
    19c8:	4f e7       	ldi	r20, 0x7F	; 127
    19ca:	57 e4       	ldi	r21, 0x47	; 71
    19cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    19d0:	18 16       	cp	r1, r24
    19d2:	4c f5       	brge	.+82     	; 0x1a26 <Lcd_Init+0x3b4>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    19d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    19d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    19da:	9e 85       	ldd	r25, Y+14	; 0x0e
    19dc:	20 e0       	ldi	r18, 0x00	; 0
    19de:	30 e0       	ldi	r19, 0x00	; 0
    19e0:	40 e2       	ldi	r20, 0x20	; 32
    19e2:	51 e4       	ldi	r21, 0x41	; 65
    19e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    19e8:	dc 01       	movw	r26, r24
    19ea:	cb 01       	movw	r24, r22
    19ec:	bc 01       	movw	r22, r24
    19ee:	cd 01       	movw	r24, r26
    19f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    19f4:	dc 01       	movw	r26, r24
    19f6:	cb 01       	movw	r24, r22
    19f8:	9e 83       	std	Y+6, r25	; 0x06
    19fa:	8d 83       	std	Y+5, r24	; 0x05
    19fc:	0f c0       	rjmp	.+30     	; 0x1a1c <Lcd_Init+0x3aa>
    19fe:	88 ec       	ldi	r24, 0xC8	; 200
    1a00:	90 e0       	ldi	r25, 0x00	; 0
    1a02:	9c 83       	std	Y+4, r25	; 0x04
    1a04:	8b 83       	std	Y+3, r24	; 0x03
    1a06:	8b 81       	ldd	r24, Y+3	; 0x03
    1a08:	9c 81       	ldd	r25, Y+4	; 0x04
    1a0a:	01 97       	sbiw	r24, 0x01	; 1
    1a0c:	f1 f7       	brne	.-4      	; 0x1a0a <Lcd_Init+0x398>
    1a0e:	9c 83       	std	Y+4, r25	; 0x04
    1a10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1a12:	8d 81       	ldd	r24, Y+5	; 0x05
    1a14:	9e 81       	ldd	r25, Y+6	; 0x06
    1a16:	01 97       	sbiw	r24, 0x01	; 1
    1a18:	9e 83       	std	Y+6, r25	; 0x06
    1a1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    1a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    1a20:	00 97       	sbiw	r24, 0x00	; 0
    1a22:	69 f7       	brne	.-38     	; 0x19fe <Lcd_Init+0x38c>
    1a24:	14 c0       	rjmp	.+40     	; 0x1a4e <Lcd_Init+0x3dc>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1a26:	6f 81       	ldd	r22, Y+7	; 0x07
    1a28:	78 85       	ldd	r23, Y+8	; 0x08
    1a2a:	89 85       	ldd	r24, Y+9	; 0x09
    1a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    1a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1a32:	dc 01       	movw	r26, r24
    1a34:	cb 01       	movw	r24, r22
    1a36:	9e 83       	std	Y+6, r25	; 0x06
    1a38:	8d 83       	std	Y+5, r24	; 0x05
    1a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    1a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    1a3e:	9a 83       	std	Y+2, r25	; 0x02
    1a40:	89 83       	std	Y+1, r24	; 0x01
    1a42:	89 81       	ldd	r24, Y+1	; 0x01
    1a44:	9a 81       	ldd	r25, Y+2	; 0x02
    1a46:	01 97       	sbiw	r24, 0x01	; 1
    1a48:	f1 f7       	brne	.-4      	; 0x1a46 <Lcd_Init+0x3d4>
    1a4a:	9a 83       	std	Y+2, r25	; 0x02
    1a4c:	89 83       	std	Y+1, r24	; 0x01
	_delay_ms(2);
	Lcd_voidSendCommand(0b00000110);
    1a4e:	86 e0       	ldi	r24, 0x06	; 6
    1a50:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
}
    1a54:	e8 96       	adiw	r28, 0x38	; 56
    1a56:	0f b6       	in	r0, 0x3f	; 63
    1a58:	f8 94       	cli
    1a5a:	de bf       	out	0x3e, r29	; 62
    1a5c:	0f be       	out	0x3f, r0	; 63
    1a5e:	cd bf       	out	0x3d, r28	; 61
    1a60:	cf 91       	pop	r28
    1a62:	df 91       	pop	r29
    1a64:	08 95       	ret

00001a66 <Lcd_GoToXY>:

void Lcd_GoToXY(u8 x,u8 y)
{
    1a66:	df 93       	push	r29
    1a68:	cf 93       	push	r28
    1a6a:	00 d0       	rcall	.+0      	; 0x1a6c <Lcd_GoToXY+0x6>
    1a6c:	0f 92       	push	r0
    1a6e:	cd b7       	in	r28, 0x3d	; 61
    1a70:	de b7       	in	r29, 0x3e	; 62
    1a72:	8a 83       	std	Y+2, r24	; 0x02
    1a74:	6b 83       	std	Y+3, r22	; 0x03
	u8 Lcd_u8Adress=64*x+y+128;
    1a76:	8a 81       	ldd	r24, Y+2	; 0x02
    1a78:	88 2f       	mov	r24, r24
    1a7a:	90 e0       	ldi	r25, 0x00	; 0
    1a7c:	00 24       	eor	r0, r0
    1a7e:	96 95       	lsr	r25
    1a80:	87 95       	ror	r24
    1a82:	07 94       	ror	r0
    1a84:	96 95       	lsr	r25
    1a86:	87 95       	ror	r24
    1a88:	07 94       	ror	r0
    1a8a:	98 2f       	mov	r25, r24
    1a8c:	80 2d       	mov	r24, r0
    1a8e:	98 2f       	mov	r25, r24
    1a90:	8b 81       	ldd	r24, Y+3	; 0x03
    1a92:	89 0f       	add	r24, r25
    1a94:	80 58       	subi	r24, 0x80	; 128
    1a96:	89 83       	std	Y+1, r24	; 0x01
	Lcd_voidSendCommand(Lcd_u8Adress);
    1a98:	89 81       	ldd	r24, Y+1	; 0x01
    1a9a:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
}
    1a9e:	0f 90       	pop	r0
    1aa0:	0f 90       	pop	r0
    1aa2:	0f 90       	pop	r0
    1aa4:	cf 91       	pop	r28
    1aa6:	df 91       	pop	r29
    1aa8:	08 95       	ret

00001aaa <Lcd_VoidWriteString>:

void Lcd_VoidWriteString(char Cpy_ChararrData[])
{
    1aaa:	df 93       	push	r29
    1aac:	cf 93       	push	r28
    1aae:	00 d0       	rcall	.+0      	; 0x1ab0 <Lcd_VoidWriteString+0x6>
    1ab0:	0f 92       	push	r0
    1ab2:	cd b7       	in	r28, 0x3d	; 61
    1ab4:	de b7       	in	r29, 0x3e	; 62
    1ab6:	9b 83       	std	Y+3, r25	; 0x03
    1ab8:	8a 83       	std	Y+2, r24	; 0x02
	u8 counter=0;
    1aba:	19 82       	std	Y+1, r1	; 0x01
    1abc:	0e c0       	rjmp	.+28     	; 0x1ada <Lcd_VoidWriteString+0x30>
	while(Cpy_ChararrData[counter]!='\0')
	{

		Lcd_voidSendData(Cpy_ChararrData[counter]);
    1abe:	89 81       	ldd	r24, Y+1	; 0x01
    1ac0:	28 2f       	mov	r18, r24
    1ac2:	30 e0       	ldi	r19, 0x00	; 0
    1ac4:	8a 81       	ldd	r24, Y+2	; 0x02
    1ac6:	9b 81       	ldd	r25, Y+3	; 0x03
    1ac8:	fc 01       	movw	r30, r24
    1aca:	e2 0f       	add	r30, r18
    1acc:	f3 1f       	adc	r31, r19
    1ace:	80 81       	ld	r24, Z
    1ad0:	0e 94 29 0a 	call	0x1452	; 0x1452 <Lcd_voidSendData>
		counter++;
    1ad4:	89 81       	ldd	r24, Y+1	; 0x01
    1ad6:	8f 5f       	subi	r24, 0xFF	; 255
    1ad8:	89 83       	std	Y+1, r24	; 0x01
}

void Lcd_VoidWriteString(char Cpy_ChararrData[])
{
	u8 counter=0;
	while(Cpy_ChararrData[counter]!='\0')
    1ada:	89 81       	ldd	r24, Y+1	; 0x01
    1adc:	28 2f       	mov	r18, r24
    1ade:	30 e0       	ldi	r19, 0x00	; 0
    1ae0:	8a 81       	ldd	r24, Y+2	; 0x02
    1ae2:	9b 81       	ldd	r25, Y+3	; 0x03
    1ae4:	fc 01       	movw	r30, r24
    1ae6:	e2 0f       	add	r30, r18
    1ae8:	f3 1f       	adc	r31, r19
    1aea:	80 81       	ld	r24, Z
    1aec:	88 23       	and	r24, r24
    1aee:	39 f7       	brne	.-50     	; 0x1abe <Lcd_VoidWriteString+0x14>

		Lcd_voidSendData(Cpy_ChararrData[counter]);
		counter++;
	}

}
    1af0:	0f 90       	pop	r0
    1af2:	0f 90       	pop	r0
    1af4:	0f 90       	pop	r0
    1af6:	cf 91       	pop	r28
    1af8:	df 91       	pop	r29
    1afa:	08 95       	ret

00001afc <Lcd_voidAddNewPattern>:

void Lcd_voidAddNewPattern(u8 Block_Num,u8 *arr)
{
    1afc:	df 93       	push	r29
    1afe:	cf 93       	push	r28
    1b00:	00 d0       	rcall	.+0      	; 0x1b02 <Lcd_voidAddNewPattern+0x6>
    1b02:	00 d0       	rcall	.+0      	; 0x1b04 <Lcd_voidAddNewPattern+0x8>
    1b04:	0f 92       	push	r0
    1b06:	cd b7       	in	r28, 0x3d	; 61
    1b08:	de b7       	in	r29, 0x3e	; 62
    1b0a:	8b 83       	std	Y+3, r24	; 0x03
    1b0c:	7d 83       	std	Y+5, r23	; 0x05
    1b0e:	6c 83       	std	Y+4, r22	; 0x04
	u8 address = 64+Block_Num*8;
    1b10:	8b 81       	ldd	r24, Y+3	; 0x03
    1b12:	88 2f       	mov	r24, r24
    1b14:	90 e0       	ldi	r25, 0x00	; 0
    1b16:	08 96       	adiw	r24, 0x08	; 8
    1b18:	88 0f       	add	r24, r24
    1b1a:	99 1f       	adc	r25, r25
    1b1c:	88 0f       	add	r24, r24
    1b1e:	99 1f       	adc	r25, r25
    1b20:	88 0f       	add	r24, r24
    1b22:	99 1f       	adc	r25, r25
    1b24:	8a 83       	std	Y+2, r24	; 0x02
	Lcd_voidSendCommand(address);
    1b26:	8a 81       	ldd	r24, Y+2	; 0x02
    1b28:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>

	for(u8 i=0;i<8;i++)
    1b2c:	19 82       	std	Y+1, r1	; 0x01
    1b2e:	0e c0       	rjmp	.+28     	; 0x1b4c <Lcd_voidAddNewPattern+0x50>
	{
		Lcd_voidSendData(arr[i]);
    1b30:	89 81       	ldd	r24, Y+1	; 0x01
    1b32:	28 2f       	mov	r18, r24
    1b34:	30 e0       	ldi	r19, 0x00	; 0
    1b36:	8c 81       	ldd	r24, Y+4	; 0x04
    1b38:	9d 81       	ldd	r25, Y+5	; 0x05
    1b3a:	fc 01       	movw	r30, r24
    1b3c:	e2 0f       	add	r30, r18
    1b3e:	f3 1f       	adc	r31, r19
    1b40:	80 81       	ld	r24, Z
    1b42:	0e 94 29 0a 	call	0x1452	; 0x1452 <Lcd_voidSendData>
void Lcd_voidAddNewPattern(u8 Block_Num,u8 *arr)
{
	u8 address = 64+Block_Num*8;
	Lcd_voidSendCommand(address);

	for(u8 i=0;i<8;i++)
    1b46:	89 81       	ldd	r24, Y+1	; 0x01
    1b48:	8f 5f       	subi	r24, 0xFF	; 255
    1b4a:	89 83       	std	Y+1, r24	; 0x01
    1b4c:	89 81       	ldd	r24, Y+1	; 0x01
    1b4e:	88 30       	cpi	r24, 0x08	; 8
    1b50:	78 f3       	brcs	.-34     	; 0x1b30 <Lcd_voidAddNewPattern+0x34>
	{
		Lcd_voidSendData(arr[i]);
	}
}
    1b52:	0f 90       	pop	r0
    1b54:	0f 90       	pop	r0
    1b56:	0f 90       	pop	r0
    1b58:	0f 90       	pop	r0
    1b5a:	0f 90       	pop	r0
    1b5c:	cf 91       	pop	r28
    1b5e:	df 91       	pop	r29
    1b60:	08 95       	ret

00001b62 <Lcd_voidShowNewPattern>:
void Lcd_voidShowNewPattern(u8 Block_Num,u8 x,u8 y)
{
    1b62:	df 93       	push	r29
    1b64:	cf 93       	push	r28
    1b66:	00 d0       	rcall	.+0      	; 0x1b68 <Lcd_voidShowNewPattern+0x6>
    1b68:	0f 92       	push	r0
    1b6a:	cd b7       	in	r28, 0x3d	; 61
    1b6c:	de b7       	in	r29, 0x3e	; 62
    1b6e:	89 83       	std	Y+1, r24	; 0x01
    1b70:	6a 83       	std	Y+2, r22	; 0x02
    1b72:	4b 83       	std	Y+3, r20	; 0x03
	Lcd_GoToXY(x,y);
    1b74:	8a 81       	ldd	r24, Y+2	; 0x02
    1b76:	6b 81       	ldd	r22, Y+3	; 0x03
    1b78:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <Lcd_GoToXY>
	Lcd_voidSendData(Block_Num);
    1b7c:	89 81       	ldd	r24, Y+1	; 0x01
    1b7e:	0e 94 29 0a 	call	0x1452	; 0x1452 <Lcd_voidSendData>
}
    1b82:	0f 90       	pop	r0
    1b84:	0f 90       	pop	r0
    1b86:	0f 90       	pop	r0
    1b88:	cf 91       	pop	r28
    1b8a:	df 91       	pop	r29
    1b8c:	08 95       	ret

00001b8e <Lcd_VoidWriteNumber>:

void Lcd_VoidWriteNumber(s32 Cpy_Num)
{
    1b8e:	0f 93       	push	r16
    1b90:	1f 93       	push	r17
    1b92:	df 93       	push	r29
    1b94:	cf 93       	push	r28
    1b96:	cd b7       	in	r28, 0x3d	; 61
    1b98:	de b7       	in	r29, 0x3e	; 62
    1b9a:	64 97       	sbiw	r28, 0x14	; 20
    1b9c:	0f b6       	in	r0, 0x3f	; 63
    1b9e:	f8 94       	cli
    1ba0:	de bf       	out	0x3e, r29	; 62
    1ba2:	0f be       	out	0x3f, r0	; 63
    1ba4:	cd bf       	out	0x3d, r28	; 61
    1ba6:	69 8b       	std	Y+17, r22	; 0x11
    1ba8:	7a 8b       	std	Y+18, r23	; 0x12
    1baa:	8b 8b       	std	Y+19, r24	; 0x13
    1bac:	9c 8b       	std	Y+20, r25	; 0x14
	u8 store[14],i=0; // store to hold the converted number as a string
    1bae:	1a 82       	std	Y+2, r1	; 0x02
	if (Cpy_Num<0)
    1bb0:	89 89       	ldd	r24, Y+17	; 0x11
    1bb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1bb4:	ab 89       	ldd	r26, Y+19	; 0x13
    1bb6:	bc 89       	ldd	r27, Y+20	; 0x14
    1bb8:	bb 23       	and	r27, r27
    1bba:	0c f0       	brlt	.+2      	; 0x1bbe <Lcd_VoidWriteNumber+0x30>
    1bbc:	66 c0       	rjmp	.+204    	; 0x1c8a <Lcd_VoidWriteNumber+0xfc>
    {
    	Cpy_Num=(-Cpy_Num);
    1bbe:	89 89       	ldd	r24, Y+17	; 0x11
    1bc0:	9a 89       	ldd	r25, Y+18	; 0x12
    1bc2:	ab 89       	ldd	r26, Y+19	; 0x13
    1bc4:	bc 89       	ldd	r27, Y+20	; 0x14
    1bc6:	b0 95       	com	r27
    1bc8:	a0 95       	com	r26
    1bca:	90 95       	com	r25
    1bcc:	81 95       	neg	r24
    1bce:	9f 4f       	sbci	r25, 0xFF	; 255
    1bd0:	af 4f       	sbci	r26, 0xFF	; 255
    1bd2:	bf 4f       	sbci	r27, 0xFF	; 255
    1bd4:	89 8b       	std	Y+17, r24	; 0x11
    1bd6:	9a 8b       	std	Y+18, r25	; 0x12
    1bd8:	ab 8b       	std	Y+19, r26	; 0x13
    1bda:	bc 8b       	std	Y+20, r27	; 0x14
    1bdc:	42 c0       	rjmp	.+132    	; 0x1c62 <Lcd_VoidWriteNumber+0xd4>
    	while(Cpy_Num!=0)
       {
   		   store[i]=(Cpy_Num%10)+'0';
    1bde:	8a 81       	ldd	r24, Y+2	; 0x02
    1be0:	08 2f       	mov	r16, r24
    1be2:	10 e0       	ldi	r17, 0x00	; 0
    1be4:	89 89       	ldd	r24, Y+17	; 0x11
    1be6:	9a 89       	ldd	r25, Y+18	; 0x12
    1be8:	ab 89       	ldd	r26, Y+19	; 0x13
    1bea:	bc 89       	ldd	r27, Y+20	; 0x14
    1bec:	2a e0       	ldi	r18, 0x0A	; 10
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e0       	ldi	r20, 0x00	; 0
    1bf2:	50 e0       	ldi	r21, 0x00	; 0
    1bf4:	bc 01       	movw	r22, r24
    1bf6:	cd 01       	movw	r24, r26
    1bf8:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__divmodsi4>
    1bfc:	dc 01       	movw	r26, r24
    1bfe:	cb 01       	movw	r24, r22
    1c00:	28 2f       	mov	r18, r24
    1c02:	20 5d       	subi	r18, 0xD0	; 208
    1c04:	ce 01       	movw	r24, r28
    1c06:	03 96       	adiw	r24, 0x03	; 3
    1c08:	fc 01       	movw	r30, r24
    1c0a:	e0 0f       	add	r30, r16
    1c0c:	f1 1f       	adc	r31, r17
    1c0e:	20 83       	st	Z, r18
   		   Cpy_Num=(Cpy_Num-(Cpy_Num%10))/10;
    1c10:	89 89       	ldd	r24, Y+17	; 0x11
    1c12:	9a 89       	ldd	r25, Y+18	; 0x12
    1c14:	ab 89       	ldd	r26, Y+19	; 0x13
    1c16:	bc 89       	ldd	r27, Y+20	; 0x14
    1c18:	2a e0       	ldi	r18, 0x0A	; 10
    1c1a:	30 e0       	ldi	r19, 0x00	; 0
    1c1c:	40 e0       	ldi	r20, 0x00	; 0
    1c1e:	50 e0       	ldi	r21, 0x00	; 0
    1c20:	bc 01       	movw	r22, r24
    1c22:	cd 01       	movw	r24, r26
    1c24:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__divmodsi4>
    1c28:	dc 01       	movw	r26, r24
    1c2a:	cb 01       	movw	r24, r22
    1c2c:	9c 01       	movw	r18, r24
    1c2e:	ad 01       	movw	r20, r26
    1c30:	89 89       	ldd	r24, Y+17	; 0x11
    1c32:	9a 89       	ldd	r25, Y+18	; 0x12
    1c34:	ab 89       	ldd	r26, Y+19	; 0x13
    1c36:	bc 89       	ldd	r27, Y+20	; 0x14
    1c38:	82 1b       	sub	r24, r18
    1c3a:	93 0b       	sbc	r25, r19
    1c3c:	a4 0b       	sbc	r26, r20
    1c3e:	b5 0b       	sbc	r27, r21
    1c40:	2a e0       	ldi	r18, 0x0A	; 10
    1c42:	30 e0       	ldi	r19, 0x00	; 0
    1c44:	40 e0       	ldi	r20, 0x00	; 0
    1c46:	50 e0       	ldi	r21, 0x00	; 0
    1c48:	bc 01       	movw	r22, r24
    1c4a:	cd 01       	movw	r24, r26
    1c4c:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__divmodsi4>
    1c50:	da 01       	movw	r26, r20
    1c52:	c9 01       	movw	r24, r18
    1c54:	89 8b       	std	Y+17, r24	; 0x11
    1c56:	9a 8b       	std	Y+18, r25	; 0x12
    1c58:	ab 8b       	std	Y+19, r26	; 0x13
    1c5a:	bc 8b       	std	Y+20, r27	; 0x14
   		   i++;
    1c5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1c5e:	8f 5f       	subi	r24, 0xFF	; 255
    1c60:	8a 83       	std	Y+2, r24	; 0x02
{
	u8 store[14],i=0; // store to hold the converted number as a string
	if (Cpy_Num<0)
    {
    	Cpy_Num=(-Cpy_Num);
    	while(Cpy_Num!=0)
    1c62:	89 89       	ldd	r24, Y+17	; 0x11
    1c64:	9a 89       	ldd	r25, Y+18	; 0x12
    1c66:	ab 89       	ldd	r26, Y+19	; 0x13
    1c68:	bc 89       	ldd	r27, Y+20	; 0x14
    1c6a:	00 97       	sbiw	r24, 0x00	; 0
    1c6c:	a1 05       	cpc	r26, r1
    1c6e:	b1 05       	cpc	r27, r1
    1c70:	09 f0       	breq	.+2      	; 0x1c74 <Lcd_VoidWriteNumber+0xe6>
    1c72:	b5 cf       	rjmp	.-150    	; 0x1bde <Lcd_VoidWriteNumber+0x50>
       {
   		   store[i]=(Cpy_Num%10)+'0';
   		   Cpy_Num=(Cpy_Num-(Cpy_Num%10))/10;
   		   i++;
   	   }
       store[i]='-';
    1c74:	8a 81       	ldd	r24, Y+2	; 0x02
    1c76:	28 2f       	mov	r18, r24
    1c78:	30 e0       	ldi	r19, 0x00	; 0
    1c7a:	ce 01       	movw	r24, r28
    1c7c:	03 96       	adiw	r24, 0x03	; 3
    1c7e:	fc 01       	movw	r30, r24
    1c80:	e2 0f       	add	r30, r18
    1c82:	f3 1f       	adc	r31, r19
    1c84:	8d e2       	ldi	r24, 0x2D	; 45
    1c86:	80 83       	st	Z, r24
    1c88:	6c c0       	rjmp	.+216    	; 0x1d62 <Lcd_VoidWriteNumber+0x1d4>
    }
    else if(Cpy_Num==0)
    1c8a:	89 89       	ldd	r24, Y+17	; 0x11
    1c8c:	9a 89       	ldd	r25, Y+18	; 0x12
    1c8e:	ab 89       	ldd	r26, Y+19	; 0x13
    1c90:	bc 89       	ldd	r27, Y+20	; 0x14
    1c92:	00 97       	sbiw	r24, 0x00	; 0
    1c94:	a1 05       	cpc	r26, r1
    1c96:	b1 05       	cpc	r27, r1
    1c98:	59 f4       	brne	.+22     	; 0x1cb0 <Lcd_VoidWriteNumber+0x122>
    {
    	store[i]='0';
    1c9a:	8a 81       	ldd	r24, Y+2	; 0x02
    1c9c:	28 2f       	mov	r18, r24
    1c9e:	30 e0       	ldi	r19, 0x00	; 0
    1ca0:	ce 01       	movw	r24, r28
    1ca2:	03 96       	adiw	r24, 0x03	; 3
    1ca4:	fc 01       	movw	r30, r24
    1ca6:	e2 0f       	add	r30, r18
    1ca8:	f3 1f       	adc	r31, r19
    1caa:	80 e3       	ldi	r24, 0x30	; 48
    1cac:	80 83       	st	Z, r24
    1cae:	59 c0       	rjmp	.+178    	; 0x1d62 <Lcd_VoidWriteNumber+0x1d4>
    }
    else if (Cpy_Num>0)
    1cb0:	89 89       	ldd	r24, Y+17	; 0x11
    1cb2:	9a 89       	ldd	r25, Y+18	; 0x12
    1cb4:	ab 89       	ldd	r26, Y+19	; 0x13
    1cb6:	bc 89       	ldd	r27, Y+20	; 0x14
    1cb8:	18 16       	cp	r1, r24
    1cba:	19 06       	cpc	r1, r25
    1cbc:	1a 06       	cpc	r1, r26
    1cbe:	1b 06       	cpc	r1, r27
    1cc0:	0c f0       	brlt	.+2      	; 0x1cc4 <Lcd_VoidWriteNumber+0x136>
    1cc2:	4f c0       	rjmp	.+158    	; 0x1d62 <Lcd_VoidWriteNumber+0x1d4>
    1cc4:	42 c0       	rjmp	.+132    	; 0x1d4a <Lcd_VoidWriteNumber+0x1bc>
    {
    	while(Cpy_Num!=0)
        {
   	   	   store[i]=(Cpy_Num%10)+'0';
    1cc6:	8a 81       	ldd	r24, Y+2	; 0x02
    1cc8:	08 2f       	mov	r16, r24
    1cca:	10 e0       	ldi	r17, 0x00	; 0
    1ccc:	89 89       	ldd	r24, Y+17	; 0x11
    1cce:	9a 89       	ldd	r25, Y+18	; 0x12
    1cd0:	ab 89       	ldd	r26, Y+19	; 0x13
    1cd2:	bc 89       	ldd	r27, Y+20	; 0x14
    1cd4:	2a e0       	ldi	r18, 0x0A	; 10
    1cd6:	30 e0       	ldi	r19, 0x00	; 0
    1cd8:	40 e0       	ldi	r20, 0x00	; 0
    1cda:	50 e0       	ldi	r21, 0x00	; 0
    1cdc:	bc 01       	movw	r22, r24
    1cde:	cd 01       	movw	r24, r26
    1ce0:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__divmodsi4>
    1ce4:	dc 01       	movw	r26, r24
    1ce6:	cb 01       	movw	r24, r22
    1ce8:	28 2f       	mov	r18, r24
    1cea:	20 5d       	subi	r18, 0xD0	; 208
    1cec:	ce 01       	movw	r24, r28
    1cee:	03 96       	adiw	r24, 0x03	; 3
    1cf0:	fc 01       	movw	r30, r24
    1cf2:	e0 0f       	add	r30, r16
    1cf4:	f1 1f       	adc	r31, r17
    1cf6:	20 83       	st	Z, r18
   	 	   Cpy_Num=(Cpy_Num-(Cpy_Num%10))/10;
    1cf8:	89 89       	ldd	r24, Y+17	; 0x11
    1cfa:	9a 89       	ldd	r25, Y+18	; 0x12
    1cfc:	ab 89       	ldd	r26, Y+19	; 0x13
    1cfe:	bc 89       	ldd	r27, Y+20	; 0x14
    1d00:	2a e0       	ldi	r18, 0x0A	; 10
    1d02:	30 e0       	ldi	r19, 0x00	; 0
    1d04:	40 e0       	ldi	r20, 0x00	; 0
    1d06:	50 e0       	ldi	r21, 0x00	; 0
    1d08:	bc 01       	movw	r22, r24
    1d0a:	cd 01       	movw	r24, r26
    1d0c:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__divmodsi4>
    1d10:	dc 01       	movw	r26, r24
    1d12:	cb 01       	movw	r24, r22
    1d14:	9c 01       	movw	r18, r24
    1d16:	ad 01       	movw	r20, r26
    1d18:	89 89       	ldd	r24, Y+17	; 0x11
    1d1a:	9a 89       	ldd	r25, Y+18	; 0x12
    1d1c:	ab 89       	ldd	r26, Y+19	; 0x13
    1d1e:	bc 89       	ldd	r27, Y+20	; 0x14
    1d20:	82 1b       	sub	r24, r18
    1d22:	93 0b       	sbc	r25, r19
    1d24:	a4 0b       	sbc	r26, r20
    1d26:	b5 0b       	sbc	r27, r21
    1d28:	2a e0       	ldi	r18, 0x0A	; 10
    1d2a:	30 e0       	ldi	r19, 0x00	; 0
    1d2c:	40 e0       	ldi	r20, 0x00	; 0
    1d2e:	50 e0       	ldi	r21, 0x00	; 0
    1d30:	bc 01       	movw	r22, r24
    1d32:	cd 01       	movw	r24, r26
    1d34:	0e 94 70 1d 	call	0x3ae0	; 0x3ae0 <__divmodsi4>
    1d38:	da 01       	movw	r26, r20
    1d3a:	c9 01       	movw	r24, r18
    1d3c:	89 8b       	std	Y+17, r24	; 0x11
    1d3e:	9a 8b       	std	Y+18, r25	; 0x12
    1d40:	ab 8b       	std	Y+19, r26	; 0x13
    1d42:	bc 8b       	std	Y+20, r27	; 0x14
   		   i++;
    1d44:	8a 81       	ldd	r24, Y+2	; 0x02
    1d46:	8f 5f       	subi	r24, 0xFF	; 255
    1d48:	8a 83       	std	Y+2, r24	; 0x02
    {
    	store[i]='0';
    }
    else if (Cpy_Num>0)
    {
    	while(Cpy_Num!=0)
    1d4a:	89 89       	ldd	r24, Y+17	; 0x11
    1d4c:	9a 89       	ldd	r25, Y+18	; 0x12
    1d4e:	ab 89       	ldd	r26, Y+19	; 0x13
    1d50:	bc 89       	ldd	r27, Y+20	; 0x14
    1d52:	00 97       	sbiw	r24, 0x00	; 0
    1d54:	a1 05       	cpc	r26, r1
    1d56:	b1 05       	cpc	r27, r1
    1d58:	09 f0       	breq	.+2      	; 0x1d5c <Lcd_VoidWriteNumber+0x1ce>
    1d5a:	b5 cf       	rjmp	.-150    	; 0x1cc6 <Lcd_VoidWriteNumber+0x138>
        {
   	   	   store[i]=(Cpy_Num%10)+'0';
   	 	   Cpy_Num=(Cpy_Num-(Cpy_Num%10))/10;
   		   i++;
   	    }
    	i--;
    1d5c:	8a 81       	ldd	r24, Y+2	; 0x02
    1d5e:	81 50       	subi	r24, 0x01	; 1
    1d60:	8a 83       	std	Y+2, r24	; 0x02
    }

   for(s8 y=i;y>=0;y--)
    1d62:	8a 81       	ldd	r24, Y+2	; 0x02
    1d64:	89 83       	std	Y+1, r24	; 0x01
    1d66:	10 c0       	rjmp	.+32     	; 0x1d88 <Lcd_VoidWriteNumber+0x1fa>
   {
	   Lcd_voidSendData(store[y]);
    1d68:	89 81       	ldd	r24, Y+1	; 0x01
    1d6a:	28 2f       	mov	r18, r24
    1d6c:	33 27       	eor	r19, r19
    1d6e:	27 fd       	sbrc	r18, 7
    1d70:	30 95       	com	r19
    1d72:	ce 01       	movw	r24, r28
    1d74:	03 96       	adiw	r24, 0x03	; 3
    1d76:	fc 01       	movw	r30, r24
    1d78:	e2 0f       	add	r30, r18
    1d7a:	f3 1f       	adc	r31, r19
    1d7c:	80 81       	ld	r24, Z
    1d7e:	0e 94 29 0a 	call	0x1452	; 0x1452 <Lcd_voidSendData>
   		   i++;
   	    }
    	i--;
    }

   for(s8 y=i;y>=0;y--)
    1d82:	89 81       	ldd	r24, Y+1	; 0x01
    1d84:	81 50       	subi	r24, 0x01	; 1
    1d86:	89 83       	std	Y+1, r24	; 0x01
    1d88:	89 81       	ldd	r24, Y+1	; 0x01
    1d8a:	88 23       	and	r24, r24
    1d8c:	6c f7       	brge	.-38     	; 0x1d68 <Lcd_VoidWriteNumber+0x1da>
   {
	   Lcd_voidSendData(store[y]);
   }
}
    1d8e:	64 96       	adiw	r28, 0x14	; 20
    1d90:	0f b6       	in	r0, 0x3f	; 63
    1d92:	f8 94       	cli
    1d94:	de bf       	out	0x3e, r29	; 62
    1d96:	0f be       	out	0x3f, r0	; 63
    1d98:	cd bf       	out	0x3d, r28	; 61
    1d9a:	cf 91       	pop	r28
    1d9c:	df 91       	pop	r29
    1d9e:	1f 91       	pop	r17
    1da0:	0f 91       	pop	r16
    1da2:	08 95       	ret

00001da4 <Stpr_voidInit>:
#include "Dio_Interface.h"
#include "Stpr_Interface.h"
#include "Stpr_Cfg.h"

void Stpr_voidInit(void)
{
    1da4:	df 93       	push	r29
    1da6:	cf 93       	push	r28
    1da8:	cd b7       	in	r28, 0x3d	; 61
    1daa:	de b7       	in	r29, 0x3e	; 62
	Dio_voidSetPinDirection(Stpr_Port,Blue_Pin,DIO_OUTPUT);
    1dac:	80 e0       	ldi	r24, 0x00	; 0
    1dae:	60 e0       	ldi	r22, 0x00	; 0
    1db0:	41 e0       	ldi	r20, 0x01	; 1
    1db2:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(Stpr_Port,Pink_Pin,DIO_OUTPUT);
    1db6:	80 e0       	ldi	r24, 0x00	; 0
    1db8:	61 e0       	ldi	r22, 0x01	; 1
    1dba:	41 e0       	ldi	r20, 0x01	; 1
    1dbc:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(Stpr_Port,Yellow_Pin,DIO_OUTPUT);
    1dc0:	80 e0       	ldi	r24, 0x00	; 0
    1dc2:	62 e0       	ldi	r22, 0x02	; 2
    1dc4:	41 e0       	ldi	r20, 0x01	; 1
    1dc6:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_voidSetPinDirection>
	Dio_voidSetPinDirection(Stpr_Port,Orange_Pin,DIO_OUTPUT);
    1dca:	80 e0       	ldi	r24, 0x00	; 0
    1dcc:	63 e0       	ldi	r22, 0x03	; 3
    1dce:	41 e0       	ldi	r20, 0x01	; 1
    1dd0:	0e 94 a3 05 	call	0xb46	; 0xb46 <Dio_voidSetPinDirection>
}
    1dd4:	cf 91       	pop	r28
    1dd6:	df 91       	pop	r29
    1dd8:	08 95       	ret

00001dda <Stpr_voidMove>:


void Stpr_voidMove(u16 Cpy_u8Degree,u8 Cpy_u8Dirc)
{
    1dda:	0f 93       	push	r16
    1ddc:	1f 93       	push	r17
    1dde:	df 93       	push	r29
    1de0:	cf 93       	push	r28
    1de2:	cd b7       	in	r28, 0x3d	; 61
    1de4:	de b7       	in	r29, 0x3e	; 62
    1de6:	cb 57       	subi	r28, 0x7B	; 123
    1de8:	d0 40       	sbci	r29, 0x00	; 0
    1dea:	0f b6       	in	r0, 0x3f	; 63
    1dec:	f8 94       	cli
    1dee:	de bf       	out	0x3e, r29	; 62
    1df0:	0f be       	out	0x3f, r0	; 63
    1df2:	cd bf       	out	0x3d, r28	; 61
    1df4:	fe 01       	movw	r30, r28
    1df6:	e9 58       	subi	r30, 0x89	; 137
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	80 83       	st	Z, r24
    1dfe:	fe 01       	movw	r30, r28
    1e00:	e7 58       	subi	r30, 0x87	; 135
    1e02:	ff 4f       	sbci	r31, 0xFF	; 255
    1e04:	60 83       	st	Z, r22
	u16 step=((u32)Cpy_u8Degree*2057)/360;
    1e06:	fe 01       	movw	r30, r28
    1e08:	e9 58       	subi	r30, 0x89	; 137
    1e0a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0c:	80 81       	ld	r24, Z
    1e0e:	91 81       	ldd	r25, Z+1	; 0x01
    1e10:	cc 01       	movw	r24, r24
    1e12:	a0 e0       	ldi	r26, 0x00	; 0
    1e14:	b0 e0       	ldi	r27, 0x00	; 0
    1e16:	29 e0       	ldi	r18, 0x09	; 9
    1e18:	38 e0       	ldi	r19, 0x08	; 8
    1e1a:	40 e0       	ldi	r20, 0x00	; 0
    1e1c:	50 e0       	ldi	r21, 0x00	; 0
    1e1e:	bc 01       	movw	r22, r24
    1e20:	cd 01       	movw	r24, r26
    1e22:	0e 94 2f 1d 	call	0x3a5e	; 0x3a5e <__mulsi3>
    1e26:	dc 01       	movw	r26, r24
    1e28:	cb 01       	movw	r24, r22
    1e2a:	28 e6       	ldi	r18, 0x68	; 104
    1e2c:	31 e0       	ldi	r19, 0x01	; 1
    1e2e:	40 e0       	ldi	r20, 0x00	; 0
    1e30:	50 e0       	ldi	r21, 0x00	; 0
    1e32:	bc 01       	movw	r22, r24
    1e34:	cd 01       	movw	r24, r26
    1e36:	0e 94 4e 1d 	call	0x3a9c	; 0x3a9c <__udivmodsi4>
    1e3a:	da 01       	movw	r26, r20
    1e3c:	c9 01       	movw	r24, r18
    1e3e:	fe 01       	movw	r30, r28
    1e40:	eb 58       	subi	r30, 0x8B	; 139
    1e42:	ff 4f       	sbci	r31, 0xFF	; 255
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
	step =step/4;
    1e48:	de 01       	movw	r26, r28
    1e4a:	ab 58       	subi	r26, 0x8B	; 139
    1e4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e4e:	fe 01       	movw	r30, r28
    1e50:	eb 58       	subi	r30, 0x8B	; 139
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 81       	ld	r24, Z
    1e56:	91 81       	ldd	r25, Z+1	; 0x01
    1e58:	96 95       	lsr	r25
    1e5a:	87 95       	ror	r24
    1e5c:	96 95       	lsr	r25
    1e5e:	87 95       	ror	r24
    1e60:	11 96       	adiw	r26, 0x01	; 1
    1e62:	9c 93       	st	X, r25
    1e64:	8e 93       	st	-X, r24
	switch(Cpy_u8Dirc)
    1e66:	fe 01       	movw	r30, r28
    1e68:	e7 58       	subi	r30, 0x87	; 135
    1e6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e6c:	80 81       	ld	r24, Z
    1e6e:	28 2f       	mov	r18, r24
    1e70:	30 e0       	ldi	r19, 0x00	; 0
    1e72:	ec 96       	adiw	r28, 0x3c	; 60
    1e74:	3f af       	std	Y+63, r19	; 0x3f
    1e76:	2e af       	std	Y+62, r18	; 0x3e
    1e78:	ec 97       	sbiw	r28, 0x3c	; 60
    1e7a:	ec 96       	adiw	r28, 0x3c	; 60
    1e7c:	8e ad       	ldd	r24, Y+62	; 0x3e
    1e7e:	9f ad       	ldd	r25, Y+63	; 0x3f
    1e80:	ec 97       	sbiw	r28, 0x3c	; 60
    1e82:	81 30       	cpi	r24, 0x01	; 1
    1e84:	91 05       	cpc	r25, r1
    1e86:	49 f0       	breq	.+18     	; 0x1e9a <Stpr_voidMove+0xc0>
    1e88:	ec 96       	adiw	r28, 0x3c	; 60
    1e8a:	ee ad       	ldd	r30, Y+62	; 0x3e
    1e8c:	ff ad       	ldd	r31, Y+63	; 0x3f
    1e8e:	ec 97       	sbiw	r28, 0x3c	; 60
    1e90:	e2 30       	cpi	r30, 0x02	; 2
    1e92:	f1 05       	cpc	r31, r1
    1e94:	09 f4       	brne	.+2      	; 0x1e98 <Stpr_voidMove+0xbe>
    1e96:	10 c3       	rjmp	.+1568   	; 0x24b8 <Stpr_voidMove+0x6de>
    1e98:	47 c5       	rjmp	.+2702   	; 0x2928 <Stpr_voidMove+0xb4e>
	{
	case CW:
		for(u16 i=0;i<step;i++)
    1e9a:	fe 01       	movw	r30, r28
    1e9c:	ed 58       	subi	r30, 0x8D	; 141
    1e9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea0:	11 82       	std	Z+1, r1	; 0x01
    1ea2:	10 82       	st	Z, r1
    1ea4:	f9 c2       	rjmp	.+1522   	; 0x2498 <Stpr_voidMove+0x6be>
		{
			Dio_voidSetPinValue(Stpr_Port,Blue_Pin,DIO_HIGH);
    1ea6:	80 e0       	ldi	r24, 0x00	; 0
    1ea8:	60 e0       	ldi	r22, 0x00	; 0
    1eaa:	41 e0       	ldi	r20, 0x01	; 1
    1eac:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Pink_Pin,DIO_LOW);
    1eb0:	80 e0       	ldi	r24, 0x00	; 0
    1eb2:	61 e0       	ldi	r22, 0x01	; 1
    1eb4:	40 e0       	ldi	r20, 0x00	; 0
    1eb6:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Yellow_Pin,DIO_LOW);
    1eba:	80 e0       	ldi	r24, 0x00	; 0
    1ebc:	62 e0       	ldi	r22, 0x02	; 2
    1ebe:	40 e0       	ldi	r20, 0x00	; 0
    1ec0:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_LOW);
    1ec4:	80 e0       	ldi	r24, 0x00	; 0
    1ec6:	63 e0       	ldi	r22, 0x03	; 3
    1ec8:	40 e0       	ldi	r20, 0x00	; 0
    1eca:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    1ece:	fe 01       	movw	r30, r28
    1ed0:	e3 59       	subi	r30, 0x93	; 147
    1ed2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ed4:	80 e0       	ldi	r24, 0x00	; 0
    1ed6:	90 e0       	ldi	r25, 0x00	; 0
    1ed8:	a0 e8       	ldi	r26, 0x80	; 128
    1eda:	b0 e4       	ldi	r27, 0x40	; 64
    1edc:	80 83       	st	Z, r24
    1ede:	91 83       	std	Z+1, r25	; 0x01
    1ee0:	a2 83       	std	Z+2, r26	; 0x02
    1ee2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ee4:	8e 01       	movw	r16, r28
    1ee6:	07 59       	subi	r16, 0x97	; 151
    1ee8:	1f 4f       	sbci	r17, 0xFF	; 255
    1eea:	fe 01       	movw	r30, r28
    1eec:	e3 59       	subi	r30, 0x93	; 147
    1eee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ef0:	60 81       	ld	r22, Z
    1ef2:	71 81       	ldd	r23, Z+1	; 0x01
    1ef4:	82 81       	ldd	r24, Z+2	; 0x02
    1ef6:	93 81       	ldd	r25, Z+3	; 0x03
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a ef       	ldi	r20, 0xFA	; 250
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	f8 01       	movw	r30, r16
    1f0a:	80 83       	st	Z, r24
    1f0c:	91 83       	std	Z+1, r25	; 0x01
    1f0e:	a2 83       	std	Z+2, r26	; 0x02
    1f10:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1f12:	fe 01       	movw	r30, r28
    1f14:	e7 59       	subi	r30, 0x97	; 151
    1f16:	ff 4f       	sbci	r31, 0xFF	; 255
    1f18:	60 81       	ld	r22, Z
    1f1a:	71 81       	ldd	r23, Z+1	; 0x01
    1f1c:	82 81       	ldd	r24, Z+2	; 0x02
    1f1e:	93 81       	ldd	r25, Z+3	; 0x03
    1f20:	20 e0       	ldi	r18, 0x00	; 0
    1f22:	30 e0       	ldi	r19, 0x00	; 0
    1f24:	40 e8       	ldi	r20, 0x80	; 128
    1f26:	5f e3       	ldi	r21, 0x3F	; 63
    1f28:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    1f2c:	88 23       	and	r24, r24
    1f2e:	44 f4       	brge	.+16     	; 0x1f40 <Stpr_voidMove+0x166>
		__ticks = 1;
    1f30:	fe 01       	movw	r30, r28
    1f32:	e9 59       	subi	r30, 0x99	; 153
    1f34:	ff 4f       	sbci	r31, 0xFF	; 255
    1f36:	81 e0       	ldi	r24, 0x01	; 1
    1f38:	90 e0       	ldi	r25, 0x00	; 0
    1f3a:	91 83       	std	Z+1, r25	; 0x01
    1f3c:	80 83       	st	Z, r24
    1f3e:	64 c0       	rjmp	.+200    	; 0x2008 <Stpr_voidMove+0x22e>
	else if (__tmp > 65535)
    1f40:	fe 01       	movw	r30, r28
    1f42:	e7 59       	subi	r30, 0x97	; 151
    1f44:	ff 4f       	sbci	r31, 0xFF	; 255
    1f46:	60 81       	ld	r22, Z
    1f48:	71 81       	ldd	r23, Z+1	; 0x01
    1f4a:	82 81       	ldd	r24, Z+2	; 0x02
    1f4c:	93 81       	ldd	r25, Z+3	; 0x03
    1f4e:	20 e0       	ldi	r18, 0x00	; 0
    1f50:	3f ef       	ldi	r19, 0xFF	; 255
    1f52:	4f e7       	ldi	r20, 0x7F	; 127
    1f54:	57 e4       	ldi	r21, 0x47	; 71
    1f56:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    1f5a:	18 16       	cp	r1, r24
    1f5c:	0c f0       	brlt	.+2      	; 0x1f60 <Stpr_voidMove+0x186>
    1f5e:	43 c0       	rjmp	.+134    	; 0x1fe6 <Stpr_voidMove+0x20c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f60:	fe 01       	movw	r30, r28
    1f62:	e3 59       	subi	r30, 0x93	; 147
    1f64:	ff 4f       	sbci	r31, 0xFF	; 255
    1f66:	60 81       	ld	r22, Z
    1f68:	71 81       	ldd	r23, Z+1	; 0x01
    1f6a:	82 81       	ldd	r24, Z+2	; 0x02
    1f6c:	93 81       	ldd	r25, Z+3	; 0x03
    1f6e:	20 e0       	ldi	r18, 0x00	; 0
    1f70:	30 e0       	ldi	r19, 0x00	; 0
    1f72:	40 e2       	ldi	r20, 0x20	; 32
    1f74:	51 e4       	ldi	r21, 0x41	; 65
    1f76:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    1f7a:	dc 01       	movw	r26, r24
    1f7c:	cb 01       	movw	r24, r22
    1f7e:	8e 01       	movw	r16, r28
    1f80:	09 59       	subi	r16, 0x99	; 153
    1f82:	1f 4f       	sbci	r17, 0xFF	; 255
    1f84:	bc 01       	movw	r22, r24
    1f86:	cd 01       	movw	r24, r26
    1f88:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1f8c:	dc 01       	movw	r26, r24
    1f8e:	cb 01       	movw	r24, r22
    1f90:	f8 01       	movw	r30, r16
    1f92:	91 83       	std	Z+1, r25	; 0x01
    1f94:	80 83       	st	Z, r24
    1f96:	1f c0       	rjmp	.+62     	; 0x1fd6 <Stpr_voidMove+0x1fc>
    1f98:	fe 01       	movw	r30, r28
    1f9a:	eb 59       	subi	r30, 0x9B	; 155
    1f9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f9e:	88 ec       	ldi	r24, 0xC8	; 200
    1fa0:	90 e0       	ldi	r25, 0x00	; 0
    1fa2:	91 83       	std	Z+1, r25	; 0x01
    1fa4:	80 83       	st	Z, r24
    1fa6:	fe 01       	movw	r30, r28
    1fa8:	eb 59       	subi	r30, 0x9B	; 155
    1faa:	ff 4f       	sbci	r31, 0xFF	; 255
    1fac:	80 81       	ld	r24, Z
    1fae:	91 81       	ldd	r25, Z+1	; 0x01
    1fb0:	01 97       	sbiw	r24, 0x01	; 1
    1fb2:	f1 f7       	brne	.-4      	; 0x1fb0 <Stpr_voidMove+0x1d6>
    1fb4:	fe 01       	movw	r30, r28
    1fb6:	eb 59       	subi	r30, 0x9B	; 155
    1fb8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fba:	91 83       	std	Z+1, r25	; 0x01
    1fbc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1fbe:	de 01       	movw	r26, r28
    1fc0:	a9 59       	subi	r26, 0x99	; 153
    1fc2:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc4:	fe 01       	movw	r30, r28
    1fc6:	e9 59       	subi	r30, 0x99	; 153
    1fc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1fca:	80 81       	ld	r24, Z
    1fcc:	91 81       	ldd	r25, Z+1	; 0x01
    1fce:	01 97       	sbiw	r24, 0x01	; 1
    1fd0:	11 96       	adiw	r26, 0x01	; 1
    1fd2:	9c 93       	st	X, r25
    1fd4:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1fd6:	fe 01       	movw	r30, r28
    1fd8:	e9 59       	subi	r30, 0x99	; 153
    1fda:	ff 4f       	sbci	r31, 0xFF	; 255
    1fdc:	80 81       	ld	r24, Z
    1fde:	91 81       	ldd	r25, Z+1	; 0x01
    1fe0:	00 97       	sbiw	r24, 0x00	; 0
    1fe2:	d1 f6       	brne	.-76     	; 0x1f98 <Stpr_voidMove+0x1be>
    1fe4:	27 c0       	rjmp	.+78     	; 0x2034 <Stpr_voidMove+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1fe6:	8e 01       	movw	r16, r28
    1fe8:	09 59       	subi	r16, 0x99	; 153
    1fea:	1f 4f       	sbci	r17, 0xFF	; 255
    1fec:	fe 01       	movw	r30, r28
    1fee:	e7 59       	subi	r30, 0x97	; 151
    1ff0:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff2:	60 81       	ld	r22, Z
    1ff4:	71 81       	ldd	r23, Z+1	; 0x01
    1ff6:	82 81       	ldd	r24, Z+2	; 0x02
    1ff8:	93 81       	ldd	r25, Z+3	; 0x03
    1ffa:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    1ffe:	dc 01       	movw	r26, r24
    2000:	cb 01       	movw	r24, r22
    2002:	f8 01       	movw	r30, r16
    2004:	91 83       	std	Z+1, r25	; 0x01
    2006:	80 83       	st	Z, r24
    2008:	de 01       	movw	r26, r28
    200a:	ad 59       	subi	r26, 0x9D	; 157
    200c:	bf 4f       	sbci	r27, 0xFF	; 255
    200e:	fe 01       	movw	r30, r28
    2010:	e9 59       	subi	r30, 0x99	; 153
    2012:	ff 4f       	sbci	r31, 0xFF	; 255
    2014:	80 81       	ld	r24, Z
    2016:	91 81       	ldd	r25, Z+1	; 0x01
    2018:	8d 93       	st	X+, r24
    201a:	9c 93       	st	X, r25
    201c:	fe 01       	movw	r30, r28
    201e:	ed 59       	subi	r30, 0x9D	; 157
    2020:	ff 4f       	sbci	r31, 0xFF	; 255
    2022:	80 81       	ld	r24, Z
    2024:	91 81       	ldd	r25, Z+1	; 0x01
    2026:	01 97       	sbiw	r24, 0x01	; 1
    2028:	f1 f7       	brne	.-4      	; 0x2026 <Stpr_voidMove+0x24c>
    202a:	fe 01       	movw	r30, r28
    202c:	ed 59       	subi	r30, 0x9D	; 157
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	91 83       	std	Z+1, r25	; 0x01
    2032:	80 83       	st	Z, r24
			_delay_ms(4);
			Dio_voidSetPinValue(Stpr_Port,Blue_Pin,DIO_LOW);
    2034:	80 e0       	ldi	r24, 0x00	; 0
    2036:	60 e0       	ldi	r22, 0x00	; 0
    2038:	40 e0       	ldi	r20, 0x00	; 0
    203a:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Pink_Pin,DIO_HIGH);
    203e:	80 e0       	ldi	r24, 0x00	; 0
    2040:	61 e0       	ldi	r22, 0x01	; 1
    2042:	41 e0       	ldi	r20, 0x01	; 1
    2044:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Yellow_Pin,DIO_LOW);
    2048:	80 e0       	ldi	r24, 0x00	; 0
    204a:	62 e0       	ldi	r22, 0x02	; 2
    204c:	40 e0       	ldi	r20, 0x00	; 0
    204e:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_LOW);
    2052:	80 e0       	ldi	r24, 0x00	; 0
    2054:	63 e0       	ldi	r22, 0x03	; 3
    2056:	40 e0       	ldi	r20, 0x00	; 0
    2058:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    205c:	fe 01       	movw	r30, r28
    205e:	e1 5a       	subi	r30, 0xA1	; 161
    2060:	ff 4f       	sbci	r31, 0xFF	; 255
    2062:	80 e0       	ldi	r24, 0x00	; 0
    2064:	90 e0       	ldi	r25, 0x00	; 0
    2066:	a0 e8       	ldi	r26, 0x80	; 128
    2068:	b0 e4       	ldi	r27, 0x40	; 64
    206a:	80 83       	st	Z, r24
    206c:	91 83       	std	Z+1, r25	; 0x01
    206e:	a2 83       	std	Z+2, r26	; 0x02
    2070:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2072:	8e 01       	movw	r16, r28
    2074:	05 5a       	subi	r16, 0xA5	; 165
    2076:	1f 4f       	sbci	r17, 0xFF	; 255
    2078:	fe 01       	movw	r30, r28
    207a:	e1 5a       	subi	r30, 0xA1	; 161
    207c:	ff 4f       	sbci	r31, 0xFF	; 255
    207e:	60 81       	ld	r22, Z
    2080:	71 81       	ldd	r23, Z+1	; 0x01
    2082:	82 81       	ldd	r24, Z+2	; 0x02
    2084:	93 81       	ldd	r25, Z+3	; 0x03
    2086:	20 e0       	ldi	r18, 0x00	; 0
    2088:	30 e0       	ldi	r19, 0x00	; 0
    208a:	4a ef       	ldi	r20, 0xFA	; 250
    208c:	54 e4       	ldi	r21, 0x44	; 68
    208e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2092:	dc 01       	movw	r26, r24
    2094:	cb 01       	movw	r24, r22
    2096:	f8 01       	movw	r30, r16
    2098:	80 83       	st	Z, r24
    209a:	91 83       	std	Z+1, r25	; 0x01
    209c:	a2 83       	std	Z+2, r26	; 0x02
    209e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    20a0:	fe 01       	movw	r30, r28
    20a2:	e5 5a       	subi	r30, 0xA5	; 165
    20a4:	ff 4f       	sbci	r31, 0xFF	; 255
    20a6:	60 81       	ld	r22, Z
    20a8:	71 81       	ldd	r23, Z+1	; 0x01
    20aa:	82 81       	ldd	r24, Z+2	; 0x02
    20ac:	93 81       	ldd	r25, Z+3	; 0x03
    20ae:	20 e0       	ldi	r18, 0x00	; 0
    20b0:	30 e0       	ldi	r19, 0x00	; 0
    20b2:	40 e8       	ldi	r20, 0x80	; 128
    20b4:	5f e3       	ldi	r21, 0x3F	; 63
    20b6:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    20ba:	88 23       	and	r24, r24
    20bc:	44 f4       	brge	.+16     	; 0x20ce <Stpr_voidMove+0x2f4>
		__ticks = 1;
    20be:	fe 01       	movw	r30, r28
    20c0:	e7 5a       	subi	r30, 0xA7	; 167
    20c2:	ff 4f       	sbci	r31, 0xFF	; 255
    20c4:	81 e0       	ldi	r24, 0x01	; 1
    20c6:	90 e0       	ldi	r25, 0x00	; 0
    20c8:	91 83       	std	Z+1, r25	; 0x01
    20ca:	80 83       	st	Z, r24
    20cc:	64 c0       	rjmp	.+200    	; 0x2196 <Stpr_voidMove+0x3bc>
	else if (__tmp > 65535)
    20ce:	fe 01       	movw	r30, r28
    20d0:	e5 5a       	subi	r30, 0xA5	; 165
    20d2:	ff 4f       	sbci	r31, 0xFF	; 255
    20d4:	60 81       	ld	r22, Z
    20d6:	71 81       	ldd	r23, Z+1	; 0x01
    20d8:	82 81       	ldd	r24, Z+2	; 0x02
    20da:	93 81       	ldd	r25, Z+3	; 0x03
    20dc:	20 e0       	ldi	r18, 0x00	; 0
    20de:	3f ef       	ldi	r19, 0xFF	; 255
    20e0:	4f e7       	ldi	r20, 0x7F	; 127
    20e2:	57 e4       	ldi	r21, 0x47	; 71
    20e4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    20e8:	18 16       	cp	r1, r24
    20ea:	0c f0       	brlt	.+2      	; 0x20ee <Stpr_voidMove+0x314>
    20ec:	43 c0       	rjmp	.+134    	; 0x2174 <Stpr_voidMove+0x39a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20ee:	fe 01       	movw	r30, r28
    20f0:	e1 5a       	subi	r30, 0xA1	; 161
    20f2:	ff 4f       	sbci	r31, 0xFF	; 255
    20f4:	60 81       	ld	r22, Z
    20f6:	71 81       	ldd	r23, Z+1	; 0x01
    20f8:	82 81       	ldd	r24, Z+2	; 0x02
    20fa:	93 81       	ldd	r25, Z+3	; 0x03
    20fc:	20 e0       	ldi	r18, 0x00	; 0
    20fe:	30 e0       	ldi	r19, 0x00	; 0
    2100:	40 e2       	ldi	r20, 0x20	; 32
    2102:	51 e4       	ldi	r21, 0x41	; 65
    2104:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2108:	dc 01       	movw	r26, r24
    210a:	cb 01       	movw	r24, r22
    210c:	8e 01       	movw	r16, r28
    210e:	07 5a       	subi	r16, 0xA7	; 167
    2110:	1f 4f       	sbci	r17, 0xFF	; 255
    2112:	bc 01       	movw	r22, r24
    2114:	cd 01       	movw	r24, r26
    2116:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    211a:	dc 01       	movw	r26, r24
    211c:	cb 01       	movw	r24, r22
    211e:	f8 01       	movw	r30, r16
    2120:	91 83       	std	Z+1, r25	; 0x01
    2122:	80 83       	st	Z, r24
    2124:	1f c0       	rjmp	.+62     	; 0x2164 <Stpr_voidMove+0x38a>
    2126:	fe 01       	movw	r30, r28
    2128:	e9 5a       	subi	r30, 0xA9	; 169
    212a:	ff 4f       	sbci	r31, 0xFF	; 255
    212c:	88 ec       	ldi	r24, 0xC8	; 200
    212e:	90 e0       	ldi	r25, 0x00	; 0
    2130:	91 83       	std	Z+1, r25	; 0x01
    2132:	80 83       	st	Z, r24
    2134:	fe 01       	movw	r30, r28
    2136:	e9 5a       	subi	r30, 0xA9	; 169
    2138:	ff 4f       	sbci	r31, 0xFF	; 255
    213a:	80 81       	ld	r24, Z
    213c:	91 81       	ldd	r25, Z+1	; 0x01
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <Stpr_voidMove+0x364>
    2142:	fe 01       	movw	r30, r28
    2144:	e9 5a       	subi	r30, 0xA9	; 169
    2146:	ff 4f       	sbci	r31, 0xFF	; 255
    2148:	91 83       	std	Z+1, r25	; 0x01
    214a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    214c:	de 01       	movw	r26, r28
    214e:	a7 5a       	subi	r26, 0xA7	; 167
    2150:	bf 4f       	sbci	r27, 0xFF	; 255
    2152:	fe 01       	movw	r30, r28
    2154:	e7 5a       	subi	r30, 0xA7	; 167
    2156:	ff 4f       	sbci	r31, 0xFF	; 255
    2158:	80 81       	ld	r24, Z
    215a:	91 81       	ldd	r25, Z+1	; 0x01
    215c:	01 97       	sbiw	r24, 0x01	; 1
    215e:	11 96       	adiw	r26, 0x01	; 1
    2160:	9c 93       	st	X, r25
    2162:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2164:	fe 01       	movw	r30, r28
    2166:	e7 5a       	subi	r30, 0xA7	; 167
    2168:	ff 4f       	sbci	r31, 0xFF	; 255
    216a:	80 81       	ld	r24, Z
    216c:	91 81       	ldd	r25, Z+1	; 0x01
    216e:	00 97       	sbiw	r24, 0x00	; 0
    2170:	d1 f6       	brne	.-76     	; 0x2126 <Stpr_voidMove+0x34c>
    2172:	27 c0       	rjmp	.+78     	; 0x21c2 <Stpr_voidMove+0x3e8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2174:	8e 01       	movw	r16, r28
    2176:	07 5a       	subi	r16, 0xA7	; 167
    2178:	1f 4f       	sbci	r17, 0xFF	; 255
    217a:	fe 01       	movw	r30, r28
    217c:	e5 5a       	subi	r30, 0xA5	; 165
    217e:	ff 4f       	sbci	r31, 0xFF	; 255
    2180:	60 81       	ld	r22, Z
    2182:	71 81       	ldd	r23, Z+1	; 0x01
    2184:	82 81       	ldd	r24, Z+2	; 0x02
    2186:	93 81       	ldd	r25, Z+3	; 0x03
    2188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    218c:	dc 01       	movw	r26, r24
    218e:	cb 01       	movw	r24, r22
    2190:	f8 01       	movw	r30, r16
    2192:	91 83       	std	Z+1, r25	; 0x01
    2194:	80 83       	st	Z, r24
    2196:	de 01       	movw	r26, r28
    2198:	ab 5a       	subi	r26, 0xAB	; 171
    219a:	bf 4f       	sbci	r27, 0xFF	; 255
    219c:	fe 01       	movw	r30, r28
    219e:	e7 5a       	subi	r30, 0xA7	; 167
    21a0:	ff 4f       	sbci	r31, 0xFF	; 255
    21a2:	80 81       	ld	r24, Z
    21a4:	91 81       	ldd	r25, Z+1	; 0x01
    21a6:	8d 93       	st	X+, r24
    21a8:	9c 93       	st	X, r25
    21aa:	fe 01       	movw	r30, r28
    21ac:	eb 5a       	subi	r30, 0xAB	; 171
    21ae:	ff 4f       	sbci	r31, 0xFF	; 255
    21b0:	80 81       	ld	r24, Z
    21b2:	91 81       	ldd	r25, Z+1	; 0x01
    21b4:	01 97       	sbiw	r24, 0x01	; 1
    21b6:	f1 f7       	brne	.-4      	; 0x21b4 <Stpr_voidMove+0x3da>
    21b8:	fe 01       	movw	r30, r28
    21ba:	eb 5a       	subi	r30, 0xAB	; 171
    21bc:	ff 4f       	sbci	r31, 0xFF	; 255
    21be:	91 83       	std	Z+1, r25	; 0x01
    21c0:	80 83       	st	Z, r24
			_delay_ms(4);
			Dio_voidSetPinValue(Stpr_Port,Blue_Pin,DIO_LOW);
    21c2:	80 e0       	ldi	r24, 0x00	; 0
    21c4:	60 e0       	ldi	r22, 0x00	; 0
    21c6:	40 e0       	ldi	r20, 0x00	; 0
    21c8:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Pink_Pin,DIO_LOW);
    21cc:	80 e0       	ldi	r24, 0x00	; 0
    21ce:	61 e0       	ldi	r22, 0x01	; 1
    21d0:	40 e0       	ldi	r20, 0x00	; 0
    21d2:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Yellow_Pin,DIO_HIGH);
    21d6:	80 e0       	ldi	r24, 0x00	; 0
    21d8:	62 e0       	ldi	r22, 0x02	; 2
    21da:	41 e0       	ldi	r20, 0x01	; 1
    21dc:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_LOW);
    21e0:	80 e0       	ldi	r24, 0x00	; 0
    21e2:	63 e0       	ldi	r22, 0x03	; 3
    21e4:	40 e0       	ldi	r20, 0x00	; 0
    21e6:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    21ea:	fe 01       	movw	r30, r28
    21ec:	ef 5a       	subi	r30, 0xAF	; 175
    21ee:	ff 4f       	sbci	r31, 0xFF	; 255
    21f0:	80 e0       	ldi	r24, 0x00	; 0
    21f2:	90 e0       	ldi	r25, 0x00	; 0
    21f4:	a0 e8       	ldi	r26, 0x80	; 128
    21f6:	b0 e4       	ldi	r27, 0x40	; 64
    21f8:	80 83       	st	Z, r24
    21fa:	91 83       	std	Z+1, r25	; 0x01
    21fc:	a2 83       	std	Z+2, r26	; 0x02
    21fe:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2200:	8e 01       	movw	r16, r28
    2202:	03 5b       	subi	r16, 0xB3	; 179
    2204:	1f 4f       	sbci	r17, 0xFF	; 255
    2206:	fe 01       	movw	r30, r28
    2208:	ef 5a       	subi	r30, 0xAF	; 175
    220a:	ff 4f       	sbci	r31, 0xFF	; 255
    220c:	60 81       	ld	r22, Z
    220e:	71 81       	ldd	r23, Z+1	; 0x01
    2210:	82 81       	ldd	r24, Z+2	; 0x02
    2212:	93 81       	ldd	r25, Z+3	; 0x03
    2214:	20 e0       	ldi	r18, 0x00	; 0
    2216:	30 e0       	ldi	r19, 0x00	; 0
    2218:	4a ef       	ldi	r20, 0xFA	; 250
    221a:	54 e4       	ldi	r21, 0x44	; 68
    221c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2220:	dc 01       	movw	r26, r24
    2222:	cb 01       	movw	r24, r22
    2224:	f8 01       	movw	r30, r16
    2226:	80 83       	st	Z, r24
    2228:	91 83       	std	Z+1, r25	; 0x01
    222a:	a2 83       	std	Z+2, r26	; 0x02
    222c:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    222e:	fe 01       	movw	r30, r28
    2230:	e3 5b       	subi	r30, 0xB3	; 179
    2232:	ff 4f       	sbci	r31, 0xFF	; 255
    2234:	60 81       	ld	r22, Z
    2236:	71 81       	ldd	r23, Z+1	; 0x01
    2238:	82 81       	ldd	r24, Z+2	; 0x02
    223a:	93 81       	ldd	r25, Z+3	; 0x03
    223c:	20 e0       	ldi	r18, 0x00	; 0
    223e:	30 e0       	ldi	r19, 0x00	; 0
    2240:	40 e8       	ldi	r20, 0x80	; 128
    2242:	5f e3       	ldi	r21, 0x3F	; 63
    2244:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2248:	88 23       	and	r24, r24
    224a:	44 f4       	brge	.+16     	; 0x225c <Stpr_voidMove+0x482>
		__ticks = 1;
    224c:	fe 01       	movw	r30, r28
    224e:	e5 5b       	subi	r30, 0xB5	; 181
    2250:	ff 4f       	sbci	r31, 0xFF	; 255
    2252:	81 e0       	ldi	r24, 0x01	; 1
    2254:	90 e0       	ldi	r25, 0x00	; 0
    2256:	91 83       	std	Z+1, r25	; 0x01
    2258:	80 83       	st	Z, r24
    225a:	64 c0       	rjmp	.+200    	; 0x2324 <Stpr_voidMove+0x54a>
	else if (__tmp > 65535)
    225c:	fe 01       	movw	r30, r28
    225e:	e3 5b       	subi	r30, 0xB3	; 179
    2260:	ff 4f       	sbci	r31, 0xFF	; 255
    2262:	60 81       	ld	r22, Z
    2264:	71 81       	ldd	r23, Z+1	; 0x01
    2266:	82 81       	ldd	r24, Z+2	; 0x02
    2268:	93 81       	ldd	r25, Z+3	; 0x03
    226a:	20 e0       	ldi	r18, 0x00	; 0
    226c:	3f ef       	ldi	r19, 0xFF	; 255
    226e:	4f e7       	ldi	r20, 0x7F	; 127
    2270:	57 e4       	ldi	r21, 0x47	; 71
    2272:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2276:	18 16       	cp	r1, r24
    2278:	0c f0       	brlt	.+2      	; 0x227c <Stpr_voidMove+0x4a2>
    227a:	43 c0       	rjmp	.+134    	; 0x2302 <Stpr_voidMove+0x528>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    227c:	fe 01       	movw	r30, r28
    227e:	ef 5a       	subi	r30, 0xAF	; 175
    2280:	ff 4f       	sbci	r31, 0xFF	; 255
    2282:	60 81       	ld	r22, Z
    2284:	71 81       	ldd	r23, Z+1	; 0x01
    2286:	82 81       	ldd	r24, Z+2	; 0x02
    2288:	93 81       	ldd	r25, Z+3	; 0x03
    228a:	20 e0       	ldi	r18, 0x00	; 0
    228c:	30 e0       	ldi	r19, 0x00	; 0
    228e:	40 e2       	ldi	r20, 0x20	; 32
    2290:	51 e4       	ldi	r21, 0x41	; 65
    2292:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2296:	dc 01       	movw	r26, r24
    2298:	cb 01       	movw	r24, r22
    229a:	8e 01       	movw	r16, r28
    229c:	05 5b       	subi	r16, 0xB5	; 181
    229e:	1f 4f       	sbci	r17, 0xFF	; 255
    22a0:	bc 01       	movw	r22, r24
    22a2:	cd 01       	movw	r24, r26
    22a4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    22a8:	dc 01       	movw	r26, r24
    22aa:	cb 01       	movw	r24, r22
    22ac:	f8 01       	movw	r30, r16
    22ae:	91 83       	std	Z+1, r25	; 0x01
    22b0:	80 83       	st	Z, r24
    22b2:	1f c0       	rjmp	.+62     	; 0x22f2 <Stpr_voidMove+0x518>
    22b4:	fe 01       	movw	r30, r28
    22b6:	e7 5b       	subi	r30, 0xB7	; 183
    22b8:	ff 4f       	sbci	r31, 0xFF	; 255
    22ba:	88 ec       	ldi	r24, 0xC8	; 200
    22bc:	90 e0       	ldi	r25, 0x00	; 0
    22be:	91 83       	std	Z+1, r25	; 0x01
    22c0:	80 83       	st	Z, r24
    22c2:	fe 01       	movw	r30, r28
    22c4:	e7 5b       	subi	r30, 0xB7	; 183
    22c6:	ff 4f       	sbci	r31, 0xFF	; 255
    22c8:	80 81       	ld	r24, Z
    22ca:	91 81       	ldd	r25, Z+1	; 0x01
    22cc:	01 97       	sbiw	r24, 0x01	; 1
    22ce:	f1 f7       	brne	.-4      	; 0x22cc <Stpr_voidMove+0x4f2>
    22d0:	fe 01       	movw	r30, r28
    22d2:	e7 5b       	subi	r30, 0xB7	; 183
    22d4:	ff 4f       	sbci	r31, 0xFF	; 255
    22d6:	91 83       	std	Z+1, r25	; 0x01
    22d8:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    22da:	de 01       	movw	r26, r28
    22dc:	a5 5b       	subi	r26, 0xB5	; 181
    22de:	bf 4f       	sbci	r27, 0xFF	; 255
    22e0:	fe 01       	movw	r30, r28
    22e2:	e5 5b       	subi	r30, 0xB5	; 181
    22e4:	ff 4f       	sbci	r31, 0xFF	; 255
    22e6:	80 81       	ld	r24, Z
    22e8:	91 81       	ldd	r25, Z+1	; 0x01
    22ea:	01 97       	sbiw	r24, 0x01	; 1
    22ec:	11 96       	adiw	r26, 0x01	; 1
    22ee:	9c 93       	st	X, r25
    22f0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    22f2:	fe 01       	movw	r30, r28
    22f4:	e5 5b       	subi	r30, 0xB5	; 181
    22f6:	ff 4f       	sbci	r31, 0xFF	; 255
    22f8:	80 81       	ld	r24, Z
    22fa:	91 81       	ldd	r25, Z+1	; 0x01
    22fc:	00 97       	sbiw	r24, 0x00	; 0
    22fe:	d1 f6       	brne	.-76     	; 0x22b4 <Stpr_voidMove+0x4da>
    2300:	27 c0       	rjmp	.+78     	; 0x2350 <Stpr_voidMove+0x576>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2302:	8e 01       	movw	r16, r28
    2304:	05 5b       	subi	r16, 0xB5	; 181
    2306:	1f 4f       	sbci	r17, 0xFF	; 255
    2308:	fe 01       	movw	r30, r28
    230a:	e3 5b       	subi	r30, 0xB3	; 179
    230c:	ff 4f       	sbci	r31, 0xFF	; 255
    230e:	60 81       	ld	r22, Z
    2310:	71 81       	ldd	r23, Z+1	; 0x01
    2312:	82 81       	ldd	r24, Z+2	; 0x02
    2314:	93 81       	ldd	r25, Z+3	; 0x03
    2316:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    231a:	dc 01       	movw	r26, r24
    231c:	cb 01       	movw	r24, r22
    231e:	f8 01       	movw	r30, r16
    2320:	91 83       	std	Z+1, r25	; 0x01
    2322:	80 83       	st	Z, r24
    2324:	de 01       	movw	r26, r28
    2326:	a9 5b       	subi	r26, 0xB9	; 185
    2328:	bf 4f       	sbci	r27, 0xFF	; 255
    232a:	fe 01       	movw	r30, r28
    232c:	e5 5b       	subi	r30, 0xB5	; 181
    232e:	ff 4f       	sbci	r31, 0xFF	; 255
    2330:	80 81       	ld	r24, Z
    2332:	91 81       	ldd	r25, Z+1	; 0x01
    2334:	8d 93       	st	X+, r24
    2336:	9c 93       	st	X, r25
    2338:	fe 01       	movw	r30, r28
    233a:	e9 5b       	subi	r30, 0xB9	; 185
    233c:	ff 4f       	sbci	r31, 0xFF	; 255
    233e:	80 81       	ld	r24, Z
    2340:	91 81       	ldd	r25, Z+1	; 0x01
    2342:	01 97       	sbiw	r24, 0x01	; 1
    2344:	f1 f7       	brne	.-4      	; 0x2342 <Stpr_voidMove+0x568>
    2346:	fe 01       	movw	r30, r28
    2348:	e9 5b       	subi	r30, 0xB9	; 185
    234a:	ff 4f       	sbci	r31, 0xFF	; 255
    234c:	91 83       	std	Z+1, r25	; 0x01
    234e:	80 83       	st	Z, r24
			_delay_ms(4);
			Dio_voidSetPinValue(Stpr_Port,Blue_Pin,DIO_LOW);
    2350:	80 e0       	ldi	r24, 0x00	; 0
    2352:	60 e0       	ldi	r22, 0x00	; 0
    2354:	40 e0       	ldi	r20, 0x00	; 0
    2356:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Pink_Pin,DIO_LOW);
    235a:	80 e0       	ldi	r24, 0x00	; 0
    235c:	61 e0       	ldi	r22, 0x01	; 1
    235e:	40 e0       	ldi	r20, 0x00	; 0
    2360:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Yellow_Pin,DIO_LOW);
    2364:	80 e0       	ldi	r24, 0x00	; 0
    2366:	62 e0       	ldi	r22, 0x02	; 2
    2368:	40 e0       	ldi	r20, 0x00	; 0
    236a:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_HIGH);
    236e:	80 e0       	ldi	r24, 0x00	; 0
    2370:	63 e0       	ldi	r22, 0x03	; 3
    2372:	41 e0       	ldi	r20, 0x01	; 1
    2374:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    2378:	fe 01       	movw	r30, r28
    237a:	ed 5b       	subi	r30, 0xBD	; 189
    237c:	ff 4f       	sbci	r31, 0xFF	; 255
    237e:	80 e0       	ldi	r24, 0x00	; 0
    2380:	90 e0       	ldi	r25, 0x00	; 0
    2382:	a0 e8       	ldi	r26, 0x80	; 128
    2384:	b0 e4       	ldi	r27, 0x40	; 64
    2386:	80 83       	st	Z, r24
    2388:	91 83       	std	Z+1, r25	; 0x01
    238a:	a2 83       	std	Z+2, r26	; 0x02
    238c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    238e:	8e 01       	movw	r16, r28
    2390:	01 5c       	subi	r16, 0xC1	; 193
    2392:	1f 4f       	sbci	r17, 0xFF	; 255
    2394:	fe 01       	movw	r30, r28
    2396:	ed 5b       	subi	r30, 0xBD	; 189
    2398:	ff 4f       	sbci	r31, 0xFF	; 255
    239a:	60 81       	ld	r22, Z
    239c:	71 81       	ldd	r23, Z+1	; 0x01
    239e:	82 81       	ldd	r24, Z+2	; 0x02
    23a0:	93 81       	ldd	r25, Z+3	; 0x03
    23a2:	20 e0       	ldi	r18, 0x00	; 0
    23a4:	30 e0       	ldi	r19, 0x00	; 0
    23a6:	4a ef       	ldi	r20, 0xFA	; 250
    23a8:	54 e4       	ldi	r21, 0x44	; 68
    23aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    23ae:	dc 01       	movw	r26, r24
    23b0:	cb 01       	movw	r24, r22
    23b2:	f8 01       	movw	r30, r16
    23b4:	80 83       	st	Z, r24
    23b6:	91 83       	std	Z+1, r25	; 0x01
    23b8:	a2 83       	std	Z+2, r26	; 0x02
    23ba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    23bc:	fe 01       	movw	r30, r28
    23be:	ff 96       	adiw	r30, 0x3f	; 63
    23c0:	60 81       	ld	r22, Z
    23c2:	71 81       	ldd	r23, Z+1	; 0x01
    23c4:	82 81       	ldd	r24, Z+2	; 0x02
    23c6:	93 81       	ldd	r25, Z+3	; 0x03
    23c8:	20 e0       	ldi	r18, 0x00	; 0
    23ca:	30 e0       	ldi	r19, 0x00	; 0
    23cc:	40 e8       	ldi	r20, 0x80	; 128
    23ce:	5f e3       	ldi	r21, 0x3F	; 63
    23d0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    23d4:	88 23       	and	r24, r24
    23d6:	2c f4       	brge	.+10     	; 0x23e2 <Stpr_voidMove+0x608>
		__ticks = 1;
    23d8:	81 e0       	ldi	r24, 0x01	; 1
    23da:	90 e0       	ldi	r25, 0x00	; 0
    23dc:	9e af       	std	Y+62, r25	; 0x3e
    23de:	8d af       	std	Y+61, r24	; 0x3d
    23e0:	46 c0       	rjmp	.+140    	; 0x246e <Stpr_voidMove+0x694>
	else if (__tmp > 65535)
    23e2:	fe 01       	movw	r30, r28
    23e4:	ff 96       	adiw	r30, 0x3f	; 63
    23e6:	60 81       	ld	r22, Z
    23e8:	71 81       	ldd	r23, Z+1	; 0x01
    23ea:	82 81       	ldd	r24, Z+2	; 0x02
    23ec:	93 81       	ldd	r25, Z+3	; 0x03
    23ee:	20 e0       	ldi	r18, 0x00	; 0
    23f0:	3f ef       	ldi	r19, 0xFF	; 255
    23f2:	4f e7       	ldi	r20, 0x7F	; 127
    23f4:	57 e4       	ldi	r21, 0x47	; 71
    23f6:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    23fa:	18 16       	cp	r1, r24
    23fc:	64 f5       	brge	.+88     	; 0x2456 <Stpr_voidMove+0x67c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    23fe:	fe 01       	movw	r30, r28
    2400:	ed 5b       	subi	r30, 0xBD	; 189
    2402:	ff 4f       	sbci	r31, 0xFF	; 255
    2404:	60 81       	ld	r22, Z
    2406:	71 81       	ldd	r23, Z+1	; 0x01
    2408:	82 81       	ldd	r24, Z+2	; 0x02
    240a:	93 81       	ldd	r25, Z+3	; 0x03
    240c:	20 e0       	ldi	r18, 0x00	; 0
    240e:	30 e0       	ldi	r19, 0x00	; 0
    2410:	40 e2       	ldi	r20, 0x20	; 32
    2412:	51 e4       	ldi	r21, 0x41	; 65
    2414:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2418:	dc 01       	movw	r26, r24
    241a:	cb 01       	movw	r24, r22
    241c:	bc 01       	movw	r22, r24
    241e:	cd 01       	movw	r24, r26
    2420:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2424:	dc 01       	movw	r26, r24
    2426:	cb 01       	movw	r24, r22
    2428:	9e af       	std	Y+62, r25	; 0x3e
    242a:	8d af       	std	Y+61, r24	; 0x3d
    242c:	0f c0       	rjmp	.+30     	; 0x244c <Stpr_voidMove+0x672>
    242e:	88 ec       	ldi	r24, 0xC8	; 200
    2430:	90 e0       	ldi	r25, 0x00	; 0
    2432:	9c af       	std	Y+60, r25	; 0x3c
    2434:	8b af       	std	Y+59, r24	; 0x3b
    2436:	8b ad       	ldd	r24, Y+59	; 0x3b
    2438:	9c ad       	ldd	r25, Y+60	; 0x3c
    243a:	01 97       	sbiw	r24, 0x01	; 1
    243c:	f1 f7       	brne	.-4      	; 0x243a <Stpr_voidMove+0x660>
    243e:	9c af       	std	Y+60, r25	; 0x3c
    2440:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2442:	8d ad       	ldd	r24, Y+61	; 0x3d
    2444:	9e ad       	ldd	r25, Y+62	; 0x3e
    2446:	01 97       	sbiw	r24, 0x01	; 1
    2448:	9e af       	std	Y+62, r25	; 0x3e
    244a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    244c:	8d ad       	ldd	r24, Y+61	; 0x3d
    244e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2450:	00 97       	sbiw	r24, 0x00	; 0
    2452:	69 f7       	brne	.-38     	; 0x242e <Stpr_voidMove+0x654>
    2454:	16 c0       	rjmp	.+44     	; 0x2482 <Stpr_voidMove+0x6a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2456:	fe 01       	movw	r30, r28
    2458:	ff 96       	adiw	r30, 0x3f	; 63
    245a:	60 81       	ld	r22, Z
    245c:	71 81       	ldd	r23, Z+1	; 0x01
    245e:	82 81       	ldd	r24, Z+2	; 0x02
    2460:	93 81       	ldd	r25, Z+3	; 0x03
    2462:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2466:	dc 01       	movw	r26, r24
    2468:	cb 01       	movw	r24, r22
    246a:	9e af       	std	Y+62, r25	; 0x3e
    246c:	8d af       	std	Y+61, r24	; 0x3d
    246e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2470:	9e ad       	ldd	r25, Y+62	; 0x3e
    2472:	9a af       	std	Y+58, r25	; 0x3a
    2474:	89 af       	std	Y+57, r24	; 0x39
    2476:	89 ad       	ldd	r24, Y+57	; 0x39
    2478:	9a ad       	ldd	r25, Y+58	; 0x3a
    247a:	01 97       	sbiw	r24, 0x01	; 1
    247c:	f1 f7       	brne	.-4      	; 0x247a <Stpr_voidMove+0x6a0>
    247e:	9a af       	std	Y+58, r25	; 0x3a
    2480:	89 af       	std	Y+57, r24	; 0x39
	u16 step=((u32)Cpy_u8Degree*2057)/360;
	step =step/4;
	switch(Cpy_u8Dirc)
	{
	case CW:
		for(u16 i=0;i<step;i++)
    2482:	de 01       	movw	r26, r28
    2484:	ad 58       	subi	r26, 0x8D	; 141
    2486:	bf 4f       	sbci	r27, 0xFF	; 255
    2488:	fe 01       	movw	r30, r28
    248a:	ed 58       	subi	r30, 0x8D	; 141
    248c:	ff 4f       	sbci	r31, 0xFF	; 255
    248e:	80 81       	ld	r24, Z
    2490:	91 81       	ldd	r25, Z+1	; 0x01
    2492:	01 96       	adiw	r24, 0x01	; 1
    2494:	8d 93       	st	X+, r24
    2496:	9c 93       	st	X, r25
    2498:	fe 01       	movw	r30, r28
    249a:	ed 58       	subi	r30, 0x8D	; 141
    249c:	ff 4f       	sbci	r31, 0xFF	; 255
    249e:	de 01       	movw	r26, r28
    24a0:	ab 58       	subi	r26, 0x8B	; 139
    24a2:	bf 4f       	sbci	r27, 0xFF	; 255
    24a4:	20 81       	ld	r18, Z
    24a6:	31 81       	ldd	r19, Z+1	; 0x01
    24a8:	8d 91       	ld	r24, X+
    24aa:	9c 91       	ld	r25, X
    24ac:	11 97       	sbiw	r26, 0x01	; 1
    24ae:	28 17       	cp	r18, r24
    24b0:	39 07       	cpc	r19, r25
    24b2:	08 f4       	brcc	.+2      	; 0x24b6 <Stpr_voidMove+0x6dc>
    24b4:	f8 cc       	rjmp	.-1552   	; 0x1ea6 <Stpr_voidMove+0xcc>
    24b6:	38 c2       	rjmp	.+1136   	; 0x2928 <Stpr_voidMove+0xb4e>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_HIGH);
			_delay_ms(4);
		}
		break;
	case CCW:
		for(u16 i=0;i<step;i++)
    24b8:	fe 01       	movw	r30, r28
    24ba:	ef 58       	subi	r30, 0x8F	; 143
    24bc:	ff 4f       	sbci	r31, 0xFF	; 255
    24be:	11 82       	std	Z+1, r1	; 0x01
    24c0:	10 82       	st	Z, r1
    24c2:	23 c2       	rjmp	.+1094   	; 0x290a <Stpr_voidMove+0xb30>
		{
			Dio_voidSetPinValue(Stpr_Port,Blue_Pin,DIO_LOW);
    24c4:	80 e0       	ldi	r24, 0x00	; 0
    24c6:	60 e0       	ldi	r22, 0x00	; 0
    24c8:	40 e0       	ldi	r20, 0x00	; 0
    24ca:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Pink_Pin,DIO_LOW);
    24ce:	80 e0       	ldi	r24, 0x00	; 0
    24d0:	61 e0       	ldi	r22, 0x01	; 1
    24d2:	40 e0       	ldi	r20, 0x00	; 0
    24d4:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Yellow_Pin,DIO_LOW);
    24d8:	80 e0       	ldi	r24, 0x00	; 0
    24da:	62 e0       	ldi	r22, 0x02	; 2
    24dc:	40 e0       	ldi	r20, 0x00	; 0
    24de:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_HIGH);
    24e2:	80 e0       	ldi	r24, 0x00	; 0
    24e4:	63 e0       	ldi	r22, 0x03	; 3
    24e6:	41 e0       	ldi	r20, 0x01	; 1
    24e8:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    24ec:	80 e0       	ldi	r24, 0x00	; 0
    24ee:	90 e0       	ldi	r25, 0x00	; 0
    24f0:	a0 ea       	ldi	r26, 0xA0	; 160
    24f2:	b0 e4       	ldi	r27, 0x40	; 64
    24f4:	8d ab       	std	Y+53, r24	; 0x35
    24f6:	9e ab       	std	Y+54, r25	; 0x36
    24f8:	af ab       	std	Y+55, r26	; 0x37
    24fa:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    24fc:	6d a9       	ldd	r22, Y+53	; 0x35
    24fe:	7e a9       	ldd	r23, Y+54	; 0x36
    2500:	8f a9       	ldd	r24, Y+55	; 0x37
    2502:	98 ad       	ldd	r25, Y+56	; 0x38
    2504:	20 e0       	ldi	r18, 0x00	; 0
    2506:	30 e0       	ldi	r19, 0x00	; 0
    2508:	4a ef       	ldi	r20, 0xFA	; 250
    250a:	54 e4       	ldi	r21, 0x44	; 68
    250c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2510:	dc 01       	movw	r26, r24
    2512:	cb 01       	movw	r24, r22
    2514:	89 ab       	std	Y+49, r24	; 0x31
    2516:	9a ab       	std	Y+50, r25	; 0x32
    2518:	ab ab       	std	Y+51, r26	; 0x33
    251a:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    251c:	69 a9       	ldd	r22, Y+49	; 0x31
    251e:	7a a9       	ldd	r23, Y+50	; 0x32
    2520:	8b a9       	ldd	r24, Y+51	; 0x33
    2522:	9c a9       	ldd	r25, Y+52	; 0x34
    2524:	20 e0       	ldi	r18, 0x00	; 0
    2526:	30 e0       	ldi	r19, 0x00	; 0
    2528:	40 e8       	ldi	r20, 0x80	; 128
    252a:	5f e3       	ldi	r21, 0x3F	; 63
    252c:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2530:	88 23       	and	r24, r24
    2532:	2c f4       	brge	.+10     	; 0x253e <Stpr_voidMove+0x764>
		__ticks = 1;
    2534:	81 e0       	ldi	r24, 0x01	; 1
    2536:	90 e0       	ldi	r25, 0x00	; 0
    2538:	98 ab       	std	Y+48, r25	; 0x30
    253a:	8f a7       	std	Y+47, r24	; 0x2f
    253c:	3f c0       	rjmp	.+126    	; 0x25bc <Stpr_voidMove+0x7e2>
	else if (__tmp > 65535)
    253e:	69 a9       	ldd	r22, Y+49	; 0x31
    2540:	7a a9       	ldd	r23, Y+50	; 0x32
    2542:	8b a9       	ldd	r24, Y+51	; 0x33
    2544:	9c a9       	ldd	r25, Y+52	; 0x34
    2546:	20 e0       	ldi	r18, 0x00	; 0
    2548:	3f ef       	ldi	r19, 0xFF	; 255
    254a:	4f e7       	ldi	r20, 0x7F	; 127
    254c:	57 e4       	ldi	r21, 0x47	; 71
    254e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2552:	18 16       	cp	r1, r24
    2554:	4c f5       	brge	.+82     	; 0x25a8 <Stpr_voidMove+0x7ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2556:	6d a9       	ldd	r22, Y+53	; 0x35
    2558:	7e a9       	ldd	r23, Y+54	; 0x36
    255a:	8f a9       	ldd	r24, Y+55	; 0x37
    255c:	98 ad       	ldd	r25, Y+56	; 0x38
    255e:	20 e0       	ldi	r18, 0x00	; 0
    2560:	30 e0       	ldi	r19, 0x00	; 0
    2562:	40 e2       	ldi	r20, 0x20	; 32
    2564:	51 e4       	ldi	r21, 0x41	; 65
    2566:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    256a:	dc 01       	movw	r26, r24
    256c:	cb 01       	movw	r24, r22
    256e:	bc 01       	movw	r22, r24
    2570:	cd 01       	movw	r24, r26
    2572:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2576:	dc 01       	movw	r26, r24
    2578:	cb 01       	movw	r24, r22
    257a:	98 ab       	std	Y+48, r25	; 0x30
    257c:	8f a7       	std	Y+47, r24	; 0x2f
    257e:	0f c0       	rjmp	.+30     	; 0x259e <Stpr_voidMove+0x7c4>
    2580:	88 ec       	ldi	r24, 0xC8	; 200
    2582:	90 e0       	ldi	r25, 0x00	; 0
    2584:	9e a7       	std	Y+46, r25	; 0x2e
    2586:	8d a7       	std	Y+45, r24	; 0x2d
    2588:	8d a5       	ldd	r24, Y+45	; 0x2d
    258a:	9e a5       	ldd	r25, Y+46	; 0x2e
    258c:	01 97       	sbiw	r24, 0x01	; 1
    258e:	f1 f7       	brne	.-4      	; 0x258c <Stpr_voidMove+0x7b2>
    2590:	9e a7       	std	Y+46, r25	; 0x2e
    2592:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2594:	8f a5       	ldd	r24, Y+47	; 0x2f
    2596:	98 a9       	ldd	r25, Y+48	; 0x30
    2598:	01 97       	sbiw	r24, 0x01	; 1
    259a:	98 ab       	std	Y+48, r25	; 0x30
    259c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    259e:	8f a5       	ldd	r24, Y+47	; 0x2f
    25a0:	98 a9       	ldd	r25, Y+48	; 0x30
    25a2:	00 97       	sbiw	r24, 0x00	; 0
    25a4:	69 f7       	brne	.-38     	; 0x2580 <Stpr_voidMove+0x7a6>
    25a6:	14 c0       	rjmp	.+40     	; 0x25d0 <Stpr_voidMove+0x7f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    25a8:	69 a9       	ldd	r22, Y+49	; 0x31
    25aa:	7a a9       	ldd	r23, Y+50	; 0x32
    25ac:	8b a9       	ldd	r24, Y+51	; 0x33
    25ae:	9c a9       	ldd	r25, Y+52	; 0x34
    25b0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    25b4:	dc 01       	movw	r26, r24
    25b6:	cb 01       	movw	r24, r22
    25b8:	98 ab       	std	Y+48, r25	; 0x30
    25ba:	8f a7       	std	Y+47, r24	; 0x2f
    25bc:	8f a5       	ldd	r24, Y+47	; 0x2f
    25be:	98 a9       	ldd	r25, Y+48	; 0x30
    25c0:	9c a7       	std	Y+44, r25	; 0x2c
    25c2:	8b a7       	std	Y+43, r24	; 0x2b
    25c4:	8b a5       	ldd	r24, Y+43	; 0x2b
    25c6:	9c a5       	ldd	r25, Y+44	; 0x2c
    25c8:	01 97       	sbiw	r24, 0x01	; 1
    25ca:	f1 f7       	brne	.-4      	; 0x25c8 <Stpr_voidMove+0x7ee>
    25cc:	9c a7       	std	Y+44, r25	; 0x2c
    25ce:	8b a7       	std	Y+43, r24	; 0x2b
			_delay_ms(5);
			Dio_voidSetPinValue(Stpr_Port,Blue_Pin,DIO_LOW);
    25d0:	80 e0       	ldi	r24, 0x00	; 0
    25d2:	60 e0       	ldi	r22, 0x00	; 0
    25d4:	40 e0       	ldi	r20, 0x00	; 0
    25d6:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Pink_Pin,DIO_LOW);
    25da:	80 e0       	ldi	r24, 0x00	; 0
    25dc:	61 e0       	ldi	r22, 0x01	; 1
    25de:	40 e0       	ldi	r20, 0x00	; 0
    25e0:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Yellow_Pin,DIO_HIGH);
    25e4:	80 e0       	ldi	r24, 0x00	; 0
    25e6:	62 e0       	ldi	r22, 0x02	; 2
    25e8:	41 e0       	ldi	r20, 0x01	; 1
    25ea:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_LOW);
    25ee:	80 e0       	ldi	r24, 0x00	; 0
    25f0:	63 e0       	ldi	r22, 0x03	; 3
    25f2:	40 e0       	ldi	r20, 0x00	; 0
    25f4:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    25f8:	80 e0       	ldi	r24, 0x00	; 0
    25fa:	90 e0       	ldi	r25, 0x00	; 0
    25fc:	a0 ea       	ldi	r26, 0xA0	; 160
    25fe:	b0 e4       	ldi	r27, 0x40	; 64
    2600:	8f a3       	std	Y+39, r24	; 0x27
    2602:	98 a7       	std	Y+40, r25	; 0x28
    2604:	a9 a7       	std	Y+41, r26	; 0x29
    2606:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2608:	6f a1       	ldd	r22, Y+39	; 0x27
    260a:	78 a5       	ldd	r23, Y+40	; 0x28
    260c:	89 a5       	ldd	r24, Y+41	; 0x29
    260e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2610:	20 e0       	ldi	r18, 0x00	; 0
    2612:	30 e0       	ldi	r19, 0x00	; 0
    2614:	4a ef       	ldi	r20, 0xFA	; 250
    2616:	54 e4       	ldi	r21, 0x44	; 68
    2618:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    261c:	dc 01       	movw	r26, r24
    261e:	cb 01       	movw	r24, r22
    2620:	8b a3       	std	Y+35, r24	; 0x23
    2622:	9c a3       	std	Y+36, r25	; 0x24
    2624:	ad a3       	std	Y+37, r26	; 0x25
    2626:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2628:	6b a1       	ldd	r22, Y+35	; 0x23
    262a:	7c a1       	ldd	r23, Y+36	; 0x24
    262c:	8d a1       	ldd	r24, Y+37	; 0x25
    262e:	9e a1       	ldd	r25, Y+38	; 0x26
    2630:	20 e0       	ldi	r18, 0x00	; 0
    2632:	30 e0       	ldi	r19, 0x00	; 0
    2634:	40 e8       	ldi	r20, 0x80	; 128
    2636:	5f e3       	ldi	r21, 0x3F	; 63
    2638:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    263c:	88 23       	and	r24, r24
    263e:	2c f4       	brge	.+10     	; 0x264a <Stpr_voidMove+0x870>
		__ticks = 1;
    2640:	81 e0       	ldi	r24, 0x01	; 1
    2642:	90 e0       	ldi	r25, 0x00	; 0
    2644:	9a a3       	std	Y+34, r25	; 0x22
    2646:	89 a3       	std	Y+33, r24	; 0x21
    2648:	3f c0       	rjmp	.+126    	; 0x26c8 <Stpr_voidMove+0x8ee>
	else if (__tmp > 65535)
    264a:	6b a1       	ldd	r22, Y+35	; 0x23
    264c:	7c a1       	ldd	r23, Y+36	; 0x24
    264e:	8d a1       	ldd	r24, Y+37	; 0x25
    2650:	9e a1       	ldd	r25, Y+38	; 0x26
    2652:	20 e0       	ldi	r18, 0x00	; 0
    2654:	3f ef       	ldi	r19, 0xFF	; 255
    2656:	4f e7       	ldi	r20, 0x7F	; 127
    2658:	57 e4       	ldi	r21, 0x47	; 71
    265a:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    265e:	18 16       	cp	r1, r24
    2660:	4c f5       	brge	.+82     	; 0x26b4 <Stpr_voidMove+0x8da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2662:	6f a1       	ldd	r22, Y+39	; 0x27
    2664:	78 a5       	ldd	r23, Y+40	; 0x28
    2666:	89 a5       	ldd	r24, Y+41	; 0x29
    2668:	9a a5       	ldd	r25, Y+42	; 0x2a
    266a:	20 e0       	ldi	r18, 0x00	; 0
    266c:	30 e0       	ldi	r19, 0x00	; 0
    266e:	40 e2       	ldi	r20, 0x20	; 32
    2670:	51 e4       	ldi	r21, 0x41	; 65
    2672:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2676:	dc 01       	movw	r26, r24
    2678:	cb 01       	movw	r24, r22
    267a:	bc 01       	movw	r22, r24
    267c:	cd 01       	movw	r24, r26
    267e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2682:	dc 01       	movw	r26, r24
    2684:	cb 01       	movw	r24, r22
    2686:	9a a3       	std	Y+34, r25	; 0x22
    2688:	89 a3       	std	Y+33, r24	; 0x21
    268a:	0f c0       	rjmp	.+30     	; 0x26aa <Stpr_voidMove+0x8d0>
    268c:	88 ec       	ldi	r24, 0xC8	; 200
    268e:	90 e0       	ldi	r25, 0x00	; 0
    2690:	98 a3       	std	Y+32, r25	; 0x20
    2692:	8f 8f       	std	Y+31, r24	; 0x1f
    2694:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2696:	98 a1       	ldd	r25, Y+32	; 0x20
    2698:	01 97       	sbiw	r24, 0x01	; 1
    269a:	f1 f7       	brne	.-4      	; 0x2698 <Stpr_voidMove+0x8be>
    269c:	98 a3       	std	Y+32, r25	; 0x20
    269e:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26a0:	89 a1       	ldd	r24, Y+33	; 0x21
    26a2:	9a a1       	ldd	r25, Y+34	; 0x22
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	9a a3       	std	Y+34, r25	; 0x22
    26a8:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26aa:	89 a1       	ldd	r24, Y+33	; 0x21
    26ac:	9a a1       	ldd	r25, Y+34	; 0x22
    26ae:	00 97       	sbiw	r24, 0x00	; 0
    26b0:	69 f7       	brne	.-38     	; 0x268c <Stpr_voidMove+0x8b2>
    26b2:	14 c0       	rjmp	.+40     	; 0x26dc <Stpr_voidMove+0x902>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26b4:	6b a1       	ldd	r22, Y+35	; 0x23
    26b6:	7c a1       	ldd	r23, Y+36	; 0x24
    26b8:	8d a1       	ldd	r24, Y+37	; 0x25
    26ba:	9e a1       	ldd	r25, Y+38	; 0x26
    26bc:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    26c0:	dc 01       	movw	r26, r24
    26c2:	cb 01       	movw	r24, r22
    26c4:	9a a3       	std	Y+34, r25	; 0x22
    26c6:	89 a3       	std	Y+33, r24	; 0x21
    26c8:	89 a1       	ldd	r24, Y+33	; 0x21
    26ca:	9a a1       	ldd	r25, Y+34	; 0x22
    26cc:	9e 8f       	std	Y+30, r25	; 0x1e
    26ce:	8d 8f       	std	Y+29, r24	; 0x1d
    26d0:	8d 8d       	ldd	r24, Y+29	; 0x1d
    26d2:	9e 8d       	ldd	r25, Y+30	; 0x1e
    26d4:	01 97       	sbiw	r24, 0x01	; 1
    26d6:	f1 f7       	brne	.-4      	; 0x26d4 <Stpr_voidMove+0x8fa>
    26d8:	9e 8f       	std	Y+30, r25	; 0x1e
    26da:	8d 8f       	std	Y+29, r24	; 0x1d
			_delay_ms(5);
			Dio_voidSetPinValue(Stpr_Port,Blue_Pin,DIO_LOW);
    26dc:	80 e0       	ldi	r24, 0x00	; 0
    26de:	60 e0       	ldi	r22, 0x00	; 0
    26e0:	40 e0       	ldi	r20, 0x00	; 0
    26e2:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Pink_Pin,DIO_HIGH);
    26e6:	80 e0       	ldi	r24, 0x00	; 0
    26e8:	61 e0       	ldi	r22, 0x01	; 1
    26ea:	41 e0       	ldi	r20, 0x01	; 1
    26ec:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Yellow_Pin,DIO_LOW);
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	62 e0       	ldi	r22, 0x02	; 2
    26f4:	40 e0       	ldi	r20, 0x00	; 0
    26f6:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_LOW);
    26fa:	80 e0       	ldi	r24, 0x00	; 0
    26fc:	63 e0       	ldi	r22, 0x03	; 3
    26fe:	40 e0       	ldi	r20, 0x00	; 0
    2700:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    2704:	80 e0       	ldi	r24, 0x00	; 0
    2706:	90 e0       	ldi	r25, 0x00	; 0
    2708:	a0 ea       	ldi	r26, 0xA0	; 160
    270a:	b0 e4       	ldi	r27, 0x40	; 64
    270c:	89 8f       	std	Y+25, r24	; 0x19
    270e:	9a 8f       	std	Y+26, r25	; 0x1a
    2710:	ab 8f       	std	Y+27, r26	; 0x1b
    2712:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2714:	69 8d       	ldd	r22, Y+25	; 0x19
    2716:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2718:	8b 8d       	ldd	r24, Y+27	; 0x1b
    271a:	9c 8d       	ldd	r25, Y+28	; 0x1c
    271c:	20 e0       	ldi	r18, 0x00	; 0
    271e:	30 e0       	ldi	r19, 0x00	; 0
    2720:	4a ef       	ldi	r20, 0xFA	; 250
    2722:	54 e4       	ldi	r21, 0x44	; 68
    2724:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2728:	dc 01       	movw	r26, r24
    272a:	cb 01       	movw	r24, r22
    272c:	8d 8b       	std	Y+21, r24	; 0x15
    272e:	9e 8b       	std	Y+22, r25	; 0x16
    2730:	af 8b       	std	Y+23, r26	; 0x17
    2732:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2734:	6d 89       	ldd	r22, Y+21	; 0x15
    2736:	7e 89       	ldd	r23, Y+22	; 0x16
    2738:	8f 89       	ldd	r24, Y+23	; 0x17
    273a:	98 8d       	ldd	r25, Y+24	; 0x18
    273c:	20 e0       	ldi	r18, 0x00	; 0
    273e:	30 e0       	ldi	r19, 0x00	; 0
    2740:	40 e8       	ldi	r20, 0x80	; 128
    2742:	5f e3       	ldi	r21, 0x3F	; 63
    2744:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2748:	88 23       	and	r24, r24
    274a:	2c f4       	brge	.+10     	; 0x2756 <Stpr_voidMove+0x97c>
		__ticks = 1;
    274c:	81 e0       	ldi	r24, 0x01	; 1
    274e:	90 e0       	ldi	r25, 0x00	; 0
    2750:	9c 8b       	std	Y+20, r25	; 0x14
    2752:	8b 8b       	std	Y+19, r24	; 0x13
    2754:	3f c0       	rjmp	.+126    	; 0x27d4 <Stpr_voidMove+0x9fa>
	else if (__tmp > 65535)
    2756:	6d 89       	ldd	r22, Y+21	; 0x15
    2758:	7e 89       	ldd	r23, Y+22	; 0x16
    275a:	8f 89       	ldd	r24, Y+23	; 0x17
    275c:	98 8d       	ldd	r25, Y+24	; 0x18
    275e:	20 e0       	ldi	r18, 0x00	; 0
    2760:	3f ef       	ldi	r19, 0xFF	; 255
    2762:	4f e7       	ldi	r20, 0x7F	; 127
    2764:	57 e4       	ldi	r21, 0x47	; 71
    2766:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    276a:	18 16       	cp	r1, r24
    276c:	4c f5       	brge	.+82     	; 0x27c0 <Stpr_voidMove+0x9e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    276e:	69 8d       	ldd	r22, Y+25	; 0x19
    2770:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2772:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2774:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2776:	20 e0       	ldi	r18, 0x00	; 0
    2778:	30 e0       	ldi	r19, 0x00	; 0
    277a:	40 e2       	ldi	r20, 0x20	; 32
    277c:	51 e4       	ldi	r21, 0x41	; 65
    277e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2782:	dc 01       	movw	r26, r24
    2784:	cb 01       	movw	r24, r22
    2786:	bc 01       	movw	r22, r24
    2788:	cd 01       	movw	r24, r26
    278a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    278e:	dc 01       	movw	r26, r24
    2790:	cb 01       	movw	r24, r22
    2792:	9c 8b       	std	Y+20, r25	; 0x14
    2794:	8b 8b       	std	Y+19, r24	; 0x13
    2796:	0f c0       	rjmp	.+30     	; 0x27b6 <Stpr_voidMove+0x9dc>
    2798:	88 ec       	ldi	r24, 0xC8	; 200
    279a:	90 e0       	ldi	r25, 0x00	; 0
    279c:	9a 8b       	std	Y+18, r25	; 0x12
    279e:	89 8b       	std	Y+17, r24	; 0x11
    27a0:	89 89       	ldd	r24, Y+17	; 0x11
    27a2:	9a 89       	ldd	r25, Y+18	; 0x12
    27a4:	01 97       	sbiw	r24, 0x01	; 1
    27a6:	f1 f7       	brne	.-4      	; 0x27a4 <Stpr_voidMove+0x9ca>
    27a8:	9a 8b       	std	Y+18, r25	; 0x12
    27aa:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    27ac:	8b 89       	ldd	r24, Y+19	; 0x13
    27ae:	9c 89       	ldd	r25, Y+20	; 0x14
    27b0:	01 97       	sbiw	r24, 0x01	; 1
    27b2:	9c 8b       	std	Y+20, r25	; 0x14
    27b4:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    27b6:	8b 89       	ldd	r24, Y+19	; 0x13
    27b8:	9c 89       	ldd	r25, Y+20	; 0x14
    27ba:	00 97       	sbiw	r24, 0x00	; 0
    27bc:	69 f7       	brne	.-38     	; 0x2798 <Stpr_voidMove+0x9be>
    27be:	14 c0       	rjmp	.+40     	; 0x27e8 <Stpr_voidMove+0xa0e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    27c0:	6d 89       	ldd	r22, Y+21	; 0x15
    27c2:	7e 89       	ldd	r23, Y+22	; 0x16
    27c4:	8f 89       	ldd	r24, Y+23	; 0x17
    27c6:	98 8d       	ldd	r25, Y+24	; 0x18
    27c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    27cc:	dc 01       	movw	r26, r24
    27ce:	cb 01       	movw	r24, r22
    27d0:	9c 8b       	std	Y+20, r25	; 0x14
    27d2:	8b 8b       	std	Y+19, r24	; 0x13
    27d4:	8b 89       	ldd	r24, Y+19	; 0x13
    27d6:	9c 89       	ldd	r25, Y+20	; 0x14
    27d8:	98 8b       	std	Y+16, r25	; 0x10
    27da:	8f 87       	std	Y+15, r24	; 0x0f
    27dc:	8f 85       	ldd	r24, Y+15	; 0x0f
    27de:	98 89       	ldd	r25, Y+16	; 0x10
    27e0:	01 97       	sbiw	r24, 0x01	; 1
    27e2:	f1 f7       	brne	.-4      	; 0x27e0 <Stpr_voidMove+0xa06>
    27e4:	98 8b       	std	Y+16, r25	; 0x10
    27e6:	8f 87       	std	Y+15, r24	; 0x0f
			_delay_ms(5);
			Dio_voidSetPinValue(Stpr_Port,Blue_Pin,DIO_HIGH);
    27e8:	80 e0       	ldi	r24, 0x00	; 0
    27ea:	60 e0       	ldi	r22, 0x00	; 0
    27ec:	41 e0       	ldi	r20, 0x01	; 1
    27ee:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Pink_Pin,DIO_LOW);
    27f2:	80 e0       	ldi	r24, 0x00	; 0
    27f4:	61 e0       	ldi	r22, 0x01	; 1
    27f6:	40 e0       	ldi	r20, 0x00	; 0
    27f8:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Yellow_Pin,DIO_LOW);
    27fc:	80 e0       	ldi	r24, 0x00	; 0
    27fe:	62 e0       	ldi	r22, 0x02	; 2
    2800:	40 e0       	ldi	r20, 0x00	; 0
    2802:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_LOW);
    2806:	80 e0       	ldi	r24, 0x00	; 0
    2808:	63 e0       	ldi	r22, 0x03	; 3
    280a:	40 e0       	ldi	r20, 0x00	; 0
    280c:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    2810:	80 e0       	ldi	r24, 0x00	; 0
    2812:	90 e0       	ldi	r25, 0x00	; 0
    2814:	a0 ea       	ldi	r26, 0xA0	; 160
    2816:	b0 e4       	ldi	r27, 0x40	; 64
    2818:	8b 87       	std	Y+11, r24	; 0x0b
    281a:	9c 87       	std	Y+12, r25	; 0x0c
    281c:	ad 87       	std	Y+13, r26	; 0x0d
    281e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2820:	6b 85       	ldd	r22, Y+11	; 0x0b
    2822:	7c 85       	ldd	r23, Y+12	; 0x0c
    2824:	8d 85       	ldd	r24, Y+13	; 0x0d
    2826:	9e 85       	ldd	r25, Y+14	; 0x0e
    2828:	20 e0       	ldi	r18, 0x00	; 0
    282a:	30 e0       	ldi	r19, 0x00	; 0
    282c:	4a ef       	ldi	r20, 0xFA	; 250
    282e:	54 e4       	ldi	r21, 0x44	; 68
    2830:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2834:	dc 01       	movw	r26, r24
    2836:	cb 01       	movw	r24, r22
    2838:	8f 83       	std	Y+7, r24	; 0x07
    283a:	98 87       	std	Y+8, r25	; 0x08
    283c:	a9 87       	std	Y+9, r26	; 0x09
    283e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2840:	6f 81       	ldd	r22, Y+7	; 0x07
    2842:	78 85       	ldd	r23, Y+8	; 0x08
    2844:	89 85       	ldd	r24, Y+9	; 0x09
    2846:	9a 85       	ldd	r25, Y+10	; 0x0a
    2848:	20 e0       	ldi	r18, 0x00	; 0
    284a:	30 e0       	ldi	r19, 0x00	; 0
    284c:	40 e8       	ldi	r20, 0x80	; 128
    284e:	5f e3       	ldi	r21, 0x3F	; 63
    2850:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2854:	88 23       	and	r24, r24
    2856:	2c f4       	brge	.+10     	; 0x2862 <Stpr_voidMove+0xa88>
		__ticks = 1;
    2858:	81 e0       	ldi	r24, 0x01	; 1
    285a:	90 e0       	ldi	r25, 0x00	; 0
    285c:	9e 83       	std	Y+6, r25	; 0x06
    285e:	8d 83       	std	Y+5, r24	; 0x05
    2860:	3f c0       	rjmp	.+126    	; 0x28e0 <Stpr_voidMove+0xb06>
	else if (__tmp > 65535)
    2862:	6f 81       	ldd	r22, Y+7	; 0x07
    2864:	78 85       	ldd	r23, Y+8	; 0x08
    2866:	89 85       	ldd	r24, Y+9	; 0x09
    2868:	9a 85       	ldd	r25, Y+10	; 0x0a
    286a:	20 e0       	ldi	r18, 0x00	; 0
    286c:	3f ef       	ldi	r19, 0xFF	; 255
    286e:	4f e7       	ldi	r20, 0x7F	; 127
    2870:	57 e4       	ldi	r21, 0x47	; 71
    2872:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2876:	18 16       	cp	r1, r24
    2878:	4c f5       	brge	.+82     	; 0x28cc <Stpr_voidMove+0xaf2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    287a:	6b 85       	ldd	r22, Y+11	; 0x0b
    287c:	7c 85       	ldd	r23, Y+12	; 0x0c
    287e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2880:	9e 85       	ldd	r25, Y+14	; 0x0e
    2882:	20 e0       	ldi	r18, 0x00	; 0
    2884:	30 e0       	ldi	r19, 0x00	; 0
    2886:	40 e2       	ldi	r20, 0x20	; 32
    2888:	51 e4       	ldi	r21, 0x41	; 65
    288a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    288e:	dc 01       	movw	r26, r24
    2890:	cb 01       	movw	r24, r22
    2892:	bc 01       	movw	r22, r24
    2894:	cd 01       	movw	r24, r26
    2896:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    289a:	dc 01       	movw	r26, r24
    289c:	cb 01       	movw	r24, r22
    289e:	9e 83       	std	Y+6, r25	; 0x06
    28a0:	8d 83       	std	Y+5, r24	; 0x05
    28a2:	0f c0       	rjmp	.+30     	; 0x28c2 <Stpr_voidMove+0xae8>
    28a4:	88 ec       	ldi	r24, 0xC8	; 200
    28a6:	90 e0       	ldi	r25, 0x00	; 0
    28a8:	9c 83       	std	Y+4, r25	; 0x04
    28aa:	8b 83       	std	Y+3, r24	; 0x03
    28ac:	8b 81       	ldd	r24, Y+3	; 0x03
    28ae:	9c 81       	ldd	r25, Y+4	; 0x04
    28b0:	01 97       	sbiw	r24, 0x01	; 1
    28b2:	f1 f7       	brne	.-4      	; 0x28b0 <Stpr_voidMove+0xad6>
    28b4:	9c 83       	std	Y+4, r25	; 0x04
    28b6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28b8:	8d 81       	ldd	r24, Y+5	; 0x05
    28ba:	9e 81       	ldd	r25, Y+6	; 0x06
    28bc:	01 97       	sbiw	r24, 0x01	; 1
    28be:	9e 83       	std	Y+6, r25	; 0x06
    28c0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28c2:	8d 81       	ldd	r24, Y+5	; 0x05
    28c4:	9e 81       	ldd	r25, Y+6	; 0x06
    28c6:	00 97       	sbiw	r24, 0x00	; 0
    28c8:	69 f7       	brne	.-38     	; 0x28a4 <Stpr_voidMove+0xaca>
    28ca:	14 c0       	rjmp	.+40     	; 0x28f4 <Stpr_voidMove+0xb1a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28cc:	6f 81       	ldd	r22, Y+7	; 0x07
    28ce:	78 85       	ldd	r23, Y+8	; 0x08
    28d0:	89 85       	ldd	r24, Y+9	; 0x09
    28d2:	9a 85       	ldd	r25, Y+10	; 0x0a
    28d4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    28d8:	dc 01       	movw	r26, r24
    28da:	cb 01       	movw	r24, r22
    28dc:	9e 83       	std	Y+6, r25	; 0x06
    28de:	8d 83       	std	Y+5, r24	; 0x05
    28e0:	8d 81       	ldd	r24, Y+5	; 0x05
    28e2:	9e 81       	ldd	r25, Y+6	; 0x06
    28e4:	9a 83       	std	Y+2, r25	; 0x02
    28e6:	89 83       	std	Y+1, r24	; 0x01
    28e8:	89 81       	ldd	r24, Y+1	; 0x01
    28ea:	9a 81       	ldd	r25, Y+2	; 0x02
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	f1 f7       	brne	.-4      	; 0x28ec <Stpr_voidMove+0xb12>
    28f0:	9a 83       	std	Y+2, r25	; 0x02
    28f2:	89 83       	std	Y+1, r24	; 0x01
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_HIGH);
			_delay_ms(4);
		}
		break;
	case CCW:
		for(u16 i=0;i<step;i++)
    28f4:	de 01       	movw	r26, r28
    28f6:	af 58       	subi	r26, 0x8F	; 143
    28f8:	bf 4f       	sbci	r27, 0xFF	; 255
    28fa:	fe 01       	movw	r30, r28
    28fc:	ef 58       	subi	r30, 0x8F	; 143
    28fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2900:	80 81       	ld	r24, Z
    2902:	91 81       	ldd	r25, Z+1	; 0x01
    2904:	01 96       	adiw	r24, 0x01	; 1
    2906:	8d 93       	st	X+, r24
    2908:	9c 93       	st	X, r25
    290a:	fe 01       	movw	r30, r28
    290c:	ef 58       	subi	r30, 0x8F	; 143
    290e:	ff 4f       	sbci	r31, 0xFF	; 255
    2910:	de 01       	movw	r26, r28
    2912:	ab 58       	subi	r26, 0x8B	; 139
    2914:	bf 4f       	sbci	r27, 0xFF	; 255
    2916:	20 81       	ld	r18, Z
    2918:	31 81       	ldd	r19, Z+1	; 0x01
    291a:	8d 91       	ld	r24, X+
    291c:	9c 91       	ld	r25, X
    291e:	11 97       	sbiw	r26, 0x01	; 1
    2920:	28 17       	cp	r18, r24
    2922:	39 07       	cpc	r19, r25
    2924:	08 f4       	brcc	.+2      	; 0x2928 <Stpr_voidMove+0xb4e>
    2926:	ce cd       	rjmp	.-1124   	; 0x24c4 <Stpr_voidMove+0x6ea>
			Dio_voidSetPinValue(Stpr_Port,Orange_Pin,DIO_LOW);
			_delay_ms(5);
		}
		break;
	}
}
    2928:	c5 58       	subi	r28, 0x85	; 133
    292a:	df 4f       	sbci	r29, 0xFF	; 255
    292c:	0f b6       	in	r0, 0x3f	; 63
    292e:	f8 94       	cli
    2930:	de bf       	out	0x3e, r29	; 62
    2932:	0f be       	out	0x3f, r0	; 63
    2934:	cd bf       	out	0x3d, r28	; 61
    2936:	cf 91       	pop	r28
    2938:	df 91       	pop	r29
    293a:	1f 91       	pop	r17
    293c:	0f 91       	pop	r16
    293e:	08 95       	ret

00002940 <UART_VoidInit>:

void (*CallbackFunc)(void);
u8 *callBackPtr=NULL;

void UART_VoidInit(u8 U8parityMode,u8 U8StopBits,u8 U8DataBits)
{
    2940:	df 93       	push	r29
    2942:	cf 93       	push	r28
    2944:	cd b7       	in	r28, 0x3d	; 61
    2946:	de b7       	in	r29, 0x3e	; 62
    2948:	2a 97       	sbiw	r28, 0x0a	; 10
    294a:	0f b6       	in	r0, 0x3f	; 63
    294c:	f8 94       	cli
    294e:	de bf       	out	0x3e, r29	; 62
    2950:	0f be       	out	0x3f, r0	; 63
    2952:	cd bf       	out	0x3d, r28	; 61
    2954:	8a 83       	std	Y+2, r24	; 0x02
    2956:	6b 83       	std	Y+3, r22	; 0x03
    2958:	4c 83       	std	Y+4, r20	; 0x04
	u8 Cpy_UCSRC=0b10000000;
    295a:	80 e8       	ldi	r24, 0x80	; 128
    295c:	89 83       	std	Y+1, r24	; 0x01

	switch(U8parityMode)
    295e:	8a 81       	ldd	r24, Y+2	; 0x02
    2960:	28 2f       	mov	r18, r24
    2962:	30 e0       	ldi	r19, 0x00	; 0
    2964:	3a 87       	std	Y+10, r19	; 0x0a
    2966:	29 87       	std	Y+9, r18	; 0x09
    2968:	89 85       	ldd	r24, Y+9	; 0x09
    296a:	9a 85       	ldd	r25, Y+10	; 0x0a
    296c:	81 30       	cpi	r24, 0x01	; 1
    296e:	91 05       	cpc	r25, r1
    2970:	31 f0       	breq	.+12     	; 0x297e <UART_VoidInit+0x3e>
    2972:	29 85       	ldd	r18, Y+9	; 0x09
    2974:	3a 85       	ldd	r19, Y+10	; 0x0a
    2976:	22 30       	cpi	r18, 0x02	; 2
    2978:	31 05       	cpc	r19, r1
    297a:	29 f0       	breq	.+10     	; 0x2986 <UART_VoidInit+0x46>
    297c:	07 c0       	rjmp	.+14     	; 0x298c <UART_VoidInit+0x4c>
	{
	case Disable:
		Cpy_UCSRC|=0b00000000;
		break;
	case Odd:
		Cpy_UCSRC|=0b00110000;
    297e:	89 81       	ldd	r24, Y+1	; 0x01
    2980:	80 63       	ori	r24, 0x30	; 48
    2982:	89 83       	std	Y+1, r24	; 0x01
    2984:	03 c0       	rjmp	.+6      	; 0x298c <UART_VoidInit+0x4c>
		break;
	case Even:
		Cpy_UCSRC|=0b00100000;
    2986:	89 81       	ldd	r24, Y+1	; 0x01
    2988:	80 62       	ori	r24, 0x20	; 32
    298a:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	switch(U8StopBits)
    298c:	8b 81       	ldd	r24, Y+3	; 0x03
    298e:	28 2f       	mov	r18, r24
    2990:	30 e0       	ldi	r19, 0x00	; 0
    2992:	38 87       	std	Y+8, r19	; 0x08
    2994:	2f 83       	std	Y+7, r18	; 0x07
    2996:	8f 81       	ldd	r24, Y+7	; 0x07
    2998:	98 85       	ldd	r25, Y+8	; 0x08
    299a:	81 30       	cpi	r24, 0x01	; 1
    299c:	91 05       	cpc	r25, r1
    299e:	41 f0       	breq	.+16     	; 0x29b0 <UART_VoidInit+0x70>
    29a0:	2f 81       	ldd	r18, Y+7	; 0x07
    29a2:	38 85       	ldd	r19, Y+8	; 0x08
    29a4:	22 30       	cpi	r18, 0x02	; 2
    29a6:	31 05       	cpc	r19, r1
    29a8:	19 f4       	brne	.+6      	; 0x29b0 <UART_VoidInit+0x70>
	{
	case 1:
		Cpy_UCSRC|=0b00000000;
		break;
	case 2:
		Cpy_UCSRC|=0b00001000;
    29aa:	89 81       	ldd	r24, Y+1	; 0x01
    29ac:	88 60       	ori	r24, 0x08	; 8
    29ae:	89 83       	std	Y+1, r24	; 0x01
		break;
	}
	switch(U8DataBits)
    29b0:	8c 81       	ldd	r24, Y+4	; 0x04
    29b2:	28 2f       	mov	r18, r24
    29b4:	30 e0       	ldi	r19, 0x00	; 0
    29b6:	3e 83       	std	Y+6, r19	; 0x06
    29b8:	2d 83       	std	Y+5, r18	; 0x05
    29ba:	8d 81       	ldd	r24, Y+5	; 0x05
    29bc:	9e 81       	ldd	r25, Y+6	; 0x06
    29be:	87 30       	cpi	r24, 0x07	; 7
    29c0:	91 05       	cpc	r25, r1
    29c2:	71 f1       	breq	.+92     	; 0x2a20 <UART_VoidInit+0xe0>
    29c4:	2d 81       	ldd	r18, Y+5	; 0x05
    29c6:	3e 81       	ldd	r19, Y+6	; 0x06
    29c8:	28 30       	cpi	r18, 0x08	; 8
    29ca:	31 05       	cpc	r19, r1
    29cc:	5c f4       	brge	.+22     	; 0x29e4 <UART_VoidInit+0xa4>
    29ce:	8d 81       	ldd	r24, Y+5	; 0x05
    29d0:	9e 81       	ldd	r25, Y+6	; 0x06
    29d2:	85 30       	cpi	r24, 0x05	; 5
    29d4:	91 05       	cpc	r25, r1
    29d6:	89 f0       	breq	.+34     	; 0x29fa <UART_VoidInit+0xba>
    29d8:	2d 81       	ldd	r18, Y+5	; 0x05
    29da:	3e 81       	ldd	r19, Y+6	; 0x06
    29dc:	26 30       	cpi	r18, 0x06	; 6
    29de:	31 05       	cpc	r19, r1
    29e0:	a1 f0       	breq	.+40     	; 0x2a0a <UART_VoidInit+0xca>
    29e2:	3e c0       	rjmp	.+124    	; 0x2a60 <UART_VoidInit+0x120>
    29e4:	8d 81       	ldd	r24, Y+5	; 0x05
    29e6:	9e 81       	ldd	r25, Y+6	; 0x06
    29e8:	88 30       	cpi	r24, 0x08	; 8
    29ea:	91 05       	cpc	r25, r1
    29ec:	21 f1       	breq	.+72     	; 0x2a36 <UART_VoidInit+0xf6>
    29ee:	2d 81       	ldd	r18, Y+5	; 0x05
    29f0:	3e 81       	ldd	r19, Y+6	; 0x06
    29f2:	29 30       	cpi	r18, 0x09	; 9
    29f4:	31 05       	cpc	r19, r1
    29f6:	51 f1       	breq	.+84     	; 0x2a4c <UART_VoidInit+0x10c>
    29f8:	33 c0       	rjmp	.+102    	; 0x2a60 <UART_VoidInit+0x120>
	{
	case 5:
		clear_Bit(UCSRB,UCSZ2);
    29fa:	aa e2       	ldi	r26, 0x2A	; 42
    29fc:	b0 e0       	ldi	r27, 0x00	; 0
    29fe:	ea e2       	ldi	r30, 0x2A	; 42
    2a00:	f0 e0       	ldi	r31, 0x00	; 0
    2a02:	80 81       	ld	r24, Z
    2a04:	8b 7f       	andi	r24, 0xFB	; 251
    2a06:	8c 93       	st	X, r24
    2a08:	2b c0       	rjmp	.+86     	; 0x2a60 <UART_VoidInit+0x120>
		Cpy_UCSRC|=0b00000000;
		break;
	case 6:
		clear_Bit(UCSRB,UCSZ2);
    2a0a:	aa e2       	ldi	r26, 0x2A	; 42
    2a0c:	b0 e0       	ldi	r27, 0x00	; 0
    2a0e:	ea e2       	ldi	r30, 0x2A	; 42
    2a10:	f0 e0       	ldi	r31, 0x00	; 0
    2a12:	80 81       	ld	r24, Z
    2a14:	8b 7f       	andi	r24, 0xFB	; 251
    2a16:	8c 93       	st	X, r24
		Cpy_UCSRC|=0b00000010;
    2a18:	89 81       	ldd	r24, Y+1	; 0x01
    2a1a:	82 60       	ori	r24, 0x02	; 2
    2a1c:	89 83       	std	Y+1, r24	; 0x01
    2a1e:	20 c0       	rjmp	.+64     	; 0x2a60 <UART_VoidInit+0x120>
		break;
	case 7:
		clear_Bit(UCSRB,UCSZ2);
    2a20:	aa e2       	ldi	r26, 0x2A	; 42
    2a22:	b0 e0       	ldi	r27, 0x00	; 0
    2a24:	ea e2       	ldi	r30, 0x2A	; 42
    2a26:	f0 e0       	ldi	r31, 0x00	; 0
    2a28:	80 81       	ld	r24, Z
    2a2a:	8b 7f       	andi	r24, 0xFB	; 251
    2a2c:	8c 93       	st	X, r24
		Cpy_UCSRC|=0b00000100;
    2a2e:	89 81       	ldd	r24, Y+1	; 0x01
    2a30:	84 60       	ori	r24, 0x04	; 4
    2a32:	89 83       	std	Y+1, r24	; 0x01
    2a34:	15 c0       	rjmp	.+42     	; 0x2a60 <UART_VoidInit+0x120>
		break;
	case 8:
		clear_Bit(UCSRB,UCSZ2);
    2a36:	aa e2       	ldi	r26, 0x2A	; 42
    2a38:	b0 e0       	ldi	r27, 0x00	; 0
    2a3a:	ea e2       	ldi	r30, 0x2A	; 42
    2a3c:	f0 e0       	ldi	r31, 0x00	; 0
    2a3e:	80 81       	ld	r24, Z
    2a40:	8b 7f       	andi	r24, 0xFB	; 251
    2a42:	8c 93       	st	X, r24
		Cpy_UCSRC|=0b00000110;
    2a44:	89 81       	ldd	r24, Y+1	; 0x01
    2a46:	86 60       	ori	r24, 0x06	; 6
    2a48:	89 83       	std	Y+1, r24	; 0x01
    2a4a:	0a c0       	rjmp	.+20     	; 0x2a60 <UART_VoidInit+0x120>
		break;
	case 9:
		set_Bit(UCSRB,UCSZ2);
    2a4c:	aa e2       	ldi	r26, 0x2A	; 42
    2a4e:	b0 e0       	ldi	r27, 0x00	; 0
    2a50:	ea e2       	ldi	r30, 0x2A	; 42
    2a52:	f0 e0       	ldi	r31, 0x00	; 0
    2a54:	80 81       	ld	r24, Z
    2a56:	84 60       	ori	r24, 0x04	; 4
    2a58:	8c 93       	st	X, r24
		Cpy_UCSRC|=0b00001110;
    2a5a:	89 81       	ldd	r24, Y+1	; 0x01
    2a5c:	8e 60       	ori	r24, 0x0E	; 14
    2a5e:	89 83       	std	Y+1, r24	; 0x01
		break;
	}

	set_Bit(UCSRB,RXEN);
    2a60:	aa e2       	ldi	r26, 0x2A	; 42
    2a62:	b0 e0       	ldi	r27, 0x00	; 0
    2a64:	ea e2       	ldi	r30, 0x2A	; 42
    2a66:	f0 e0       	ldi	r31, 0x00	; 0
    2a68:	80 81       	ld	r24, Z
    2a6a:	80 61       	ori	r24, 0x10	; 16
    2a6c:	8c 93       	st	X, r24
	set_Bit(UCSRB,TXEN);
    2a6e:	aa e2       	ldi	r26, 0x2A	; 42
    2a70:	b0 e0       	ldi	r27, 0x00	; 0
    2a72:	ea e2       	ldi	r30, 0x2A	; 42
    2a74:	f0 e0       	ldi	r31, 0x00	; 0
    2a76:	80 81       	ld	r24, Z
    2a78:	88 60       	ori	r24, 0x08	; 8
    2a7a:	8c 93       	st	X, r24
	UCSRC=Cpy_UCSRC;
    2a7c:	e0 e4       	ldi	r30, 0x40	; 64
    2a7e:	f0 e0       	ldi	r31, 0x00	; 0
    2a80:	89 81       	ldd	r24, Y+1	; 0x01
    2a82:	80 83       	st	Z, r24
	UBRRL=51;
    2a84:	e9 e2       	ldi	r30, 0x29	; 41
    2a86:	f0 e0       	ldi	r31, 0x00	; 0
    2a88:	83 e3       	ldi	r24, 0x33	; 51
    2a8a:	80 83       	st	Z, r24
	/* Set to 8 bit mode
		 * No parity
	 	 * One stop bit
	 	 * UCSRC=0b10000110 */

}
    2a8c:	2a 96       	adiw	r28, 0x0a	; 10
    2a8e:	0f b6       	in	r0, 0x3f	; 63
    2a90:	f8 94       	cli
    2a92:	de bf       	out	0x3e, r29	; 62
    2a94:	0f be       	out	0x3f, r0	; 63
    2a96:	cd bf       	out	0x3d, r28	; 61
    2a98:	cf 91       	pop	r28
    2a9a:	df 91       	pop	r29
    2a9c:	08 95       	ret

00002a9e <UART_voidSend>:



void UART_voidSend(u8 Cpy_data)
{
    2a9e:	df 93       	push	r29
    2aa0:	cf 93       	push	r28
    2aa2:	0f 92       	push	r0
    2aa4:	cd b7       	in	r28, 0x3d	; 61
    2aa6:	de b7       	in	r29, 0x3e	; 62
    2aa8:	89 83       	std	Y+1, r24	; 0x01
	while (get_Bit(UCSRA , UDRE) == 0);
    2aaa:	eb e2       	ldi	r30, 0x2B	; 43
    2aac:	f0 e0       	ldi	r31, 0x00	; 0
    2aae:	80 81       	ld	r24, Z
    2ab0:	82 95       	swap	r24
    2ab2:	86 95       	lsr	r24
    2ab4:	87 70       	andi	r24, 0x07	; 7
    2ab6:	88 2f       	mov	r24, r24
    2ab8:	90 e0       	ldi	r25, 0x00	; 0
    2aba:	81 70       	andi	r24, 0x01	; 1
    2abc:	90 70       	andi	r25, 0x00	; 0
    2abe:	00 97       	sbiw	r24, 0x00	; 0
    2ac0:	a1 f3       	breq	.-24     	; 0x2aaa <UART_voidSend+0xc>
	UDR = Cpy_data ;
    2ac2:	ec e2       	ldi	r30, 0x2C	; 44
    2ac4:	f0 e0       	ldi	r31, 0x00	; 0
    2ac6:	89 81       	ldd	r24, Y+1	; 0x01
    2ac8:	80 83       	st	Z, r24
}
    2aca:	0f 90       	pop	r0
    2acc:	cf 91       	pop	r28
    2ace:	df 91       	pop	r29
    2ad0:	08 95       	ret

00002ad2 <UART_U8Receive>:



u8 UART_U8Receive(void)
{
    2ad2:	df 93       	push	r29
    2ad4:	cf 93       	push	r28
    2ad6:	cd b7       	in	r28, 0x3d	; 61
    2ad8:	de b7       	in	r29, 0x3e	; 62
	while(get_Bit(UCSRA,RXC)==0);
    2ada:	eb e2       	ldi	r30, 0x2B	; 43
    2adc:	f0 e0       	ldi	r31, 0x00	; 0
    2ade:	80 81       	ld	r24, Z
    2ae0:	88 23       	and	r24, r24
    2ae2:	dc f7       	brge	.-10     	; 0x2ada <UART_U8Receive+0x8>
	return UDR;
    2ae4:	ec e2       	ldi	r30, 0x2C	; 44
    2ae6:	f0 e0       	ldi	r31, 0x00	; 0
    2ae8:	80 81       	ld	r24, Z
}
    2aea:	cf 91       	pop	r28
    2aec:	df 91       	pop	r29
    2aee:	08 95       	ret

00002af0 <UART_VoidSendString>:



void UART_VoidSendString(u8 *StringPtr)
{
    2af0:	df 93       	push	r29
    2af2:	cf 93       	push	r28
    2af4:	00 d0       	rcall	.+0      	; 0x2af6 <UART_VoidSendString+0x6>
    2af6:	0f 92       	push	r0
    2af8:	cd b7       	in	r28, 0x3d	; 61
    2afa:	de b7       	in	r29, 0x3e	; 62
    2afc:	9b 83       	std	Y+3, r25	; 0x03
    2afe:	8a 83       	std	Y+2, r24	; 0x02
	u8 i=0;
    2b00:	19 82       	std	Y+1, r1	; 0x01
	do
	{
		UART_voidSend(StringPtr[i]);
    2b02:	89 81       	ldd	r24, Y+1	; 0x01
    2b04:	28 2f       	mov	r18, r24
    2b06:	30 e0       	ldi	r19, 0x00	; 0
    2b08:	8a 81       	ldd	r24, Y+2	; 0x02
    2b0a:	9b 81       	ldd	r25, Y+3	; 0x03
    2b0c:	fc 01       	movw	r30, r24
    2b0e:	e2 0f       	add	r30, r18
    2b10:	f3 1f       	adc	r31, r19
    2b12:	80 81       	ld	r24, Z
    2b14:	0e 94 4f 15 	call	0x2a9e	; 0x2a9e <UART_voidSend>
		i++;
    2b18:	89 81       	ldd	r24, Y+1	; 0x01
    2b1a:	8f 5f       	subi	r24, 0xFF	; 255
    2b1c:	89 83       	std	Y+1, r24	; 0x01
	}
	while(StringPtr[i]!=NULL);
    2b1e:	89 81       	ldd	r24, Y+1	; 0x01
    2b20:	28 2f       	mov	r18, r24
    2b22:	30 e0       	ldi	r19, 0x00	; 0
    2b24:	8a 81       	ldd	r24, Y+2	; 0x02
    2b26:	9b 81       	ldd	r25, Y+3	; 0x03
    2b28:	fc 01       	movw	r30, r24
    2b2a:	e2 0f       	add	r30, r18
    2b2c:	f3 1f       	adc	r31, r19
    2b2e:	80 81       	ld	r24, Z
    2b30:	88 23       	and	r24, r24
    2b32:	39 f7       	brne	.-50     	; 0x2b02 <UART_VoidSendString+0x12>
}
    2b34:	0f 90       	pop	r0
    2b36:	0f 90       	pop	r0
    2b38:	0f 90       	pop	r0
    2b3a:	cf 91       	pop	r28
    2b3c:	df 91       	pop	r29
    2b3e:	08 95       	ret

00002b40 <UART_VoidRecString>:

void UART_VoidRecString(u8 *str)
{
    2b40:	0f 93       	push	r16
    2b42:	1f 93       	push	r17
    2b44:	df 93       	push	r29
    2b46:	cf 93       	push	r28
    2b48:	00 d0       	rcall	.+0      	; 0x2b4a <UART_VoidRecString+0xa>
    2b4a:	0f 92       	push	r0
    2b4c:	cd b7       	in	r28, 0x3d	; 61
    2b4e:	de b7       	in	r29, 0x3e	; 62
    2b50:	9b 83       	std	Y+3, r25	; 0x03
    2b52:	8a 83       	std	Y+2, r24	; 0x02
	u8 i = 0;
    2b54:	19 82       	std	Y+1, r1	; 0x01
	str[i] = UART_U8Receive();
    2b56:	89 81       	ldd	r24, Y+1	; 0x01
    2b58:	28 2f       	mov	r18, r24
    2b5a:	30 e0       	ldi	r19, 0x00	; 0
    2b5c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b5e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b60:	8c 01       	movw	r16, r24
    2b62:	02 0f       	add	r16, r18
    2b64:	13 1f       	adc	r17, r19
    2b66:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_U8Receive>
    2b6a:	f8 01       	movw	r30, r16
    2b6c:	80 83       	st	Z, r24
    2b6e:	0f c0       	rjmp	.+30     	; 0x2b8e <UART_VoidRecString+0x4e>
	//will continue to receive until you send .
	while(str[i] != '\r' && str[i] != NULL)
	{
		i++;
    2b70:	89 81       	ldd	r24, Y+1	; 0x01
    2b72:	8f 5f       	subi	r24, 0xFF	; 255
    2b74:	89 83       	std	Y+1, r24	; 0x01
		str[i] = UART_U8Receive();
    2b76:	89 81       	ldd	r24, Y+1	; 0x01
    2b78:	28 2f       	mov	r18, r24
    2b7a:	30 e0       	ldi	r19, 0x00	; 0
    2b7c:	8a 81       	ldd	r24, Y+2	; 0x02
    2b7e:	9b 81       	ldd	r25, Y+3	; 0x03
    2b80:	8c 01       	movw	r16, r24
    2b82:	02 0f       	add	r16, r18
    2b84:	13 1f       	adc	r17, r19
    2b86:	0e 94 69 15 	call	0x2ad2	; 0x2ad2 <UART_U8Receive>
    2b8a:	f8 01       	movw	r30, r16
    2b8c:	80 83       	st	Z, r24
void UART_VoidRecString(u8 *str)
{
	u8 i = 0;
	str[i] = UART_U8Receive();
	//will continue to receive until you send .
	while(str[i] != '\r' && str[i] != NULL)
    2b8e:	89 81       	ldd	r24, Y+1	; 0x01
    2b90:	28 2f       	mov	r18, r24
    2b92:	30 e0       	ldi	r19, 0x00	; 0
    2b94:	8a 81       	ldd	r24, Y+2	; 0x02
    2b96:	9b 81       	ldd	r25, Y+3	; 0x03
    2b98:	fc 01       	movw	r30, r24
    2b9a:	e2 0f       	add	r30, r18
    2b9c:	f3 1f       	adc	r31, r19
    2b9e:	80 81       	ld	r24, Z
    2ba0:	8d 30       	cpi	r24, 0x0D	; 13
    2ba2:	59 f0       	breq	.+22     	; 0x2bba <UART_VoidRecString+0x7a>
    2ba4:	89 81       	ldd	r24, Y+1	; 0x01
    2ba6:	28 2f       	mov	r18, r24
    2ba8:	30 e0       	ldi	r19, 0x00	; 0
    2baa:	8a 81       	ldd	r24, Y+2	; 0x02
    2bac:	9b 81       	ldd	r25, Y+3	; 0x03
    2bae:	fc 01       	movw	r30, r24
    2bb0:	e2 0f       	add	r30, r18
    2bb2:	f3 1f       	adc	r31, r19
    2bb4:	80 81       	ld	r24, Z
    2bb6:	88 23       	and	r24, r24
    2bb8:	d9 f6       	brne	.-74     	; 0x2b70 <UART_VoidRecString+0x30>
	{
		i++;
		str[i] = UART_U8Receive();
	}
	str[i] = '\0';
    2bba:	89 81       	ldd	r24, Y+1	; 0x01
    2bbc:	28 2f       	mov	r18, r24
    2bbe:	30 e0       	ldi	r19, 0x00	; 0
    2bc0:	8a 81       	ldd	r24, Y+2	; 0x02
    2bc2:	9b 81       	ldd	r25, Y+3	; 0x03
    2bc4:	fc 01       	movw	r30, r24
    2bc6:	e2 0f       	add	r30, r18
    2bc8:	f3 1f       	adc	r31, r19
    2bca:	10 82       	st	Z, r1
}
    2bcc:	0f 90       	pop	r0
    2bce:	0f 90       	pop	r0
    2bd0:	0f 90       	pop	r0
    2bd2:	cf 91       	pop	r28
    2bd4:	df 91       	pop	r29
    2bd6:	1f 91       	pop	r17
    2bd8:	0f 91       	pop	r16
    2bda:	08 95       	ret

00002bdc <UART_voidReceiveAsynch>:


void UART_voidReceiveAsynch(u8 *Cpy_u8DataPtr,void (* Cpy_func)(void))
{
    2bdc:	df 93       	push	r29
    2bde:	cf 93       	push	r28
    2be0:	00 d0       	rcall	.+0      	; 0x2be2 <UART_voidReceiveAsynch+0x6>
    2be2:	00 d0       	rcall	.+0      	; 0x2be4 <UART_voidReceiveAsynch+0x8>
    2be4:	cd b7       	in	r28, 0x3d	; 61
    2be6:	de b7       	in	r29, 0x3e	; 62
    2be8:	9a 83       	std	Y+2, r25	; 0x02
    2bea:	89 83       	std	Y+1, r24	; 0x01
    2bec:	7c 83       	std	Y+4, r23	; 0x04
    2bee:	6b 83       	std	Y+3, r22	; 0x03
	set_Bit(UCSRB,RXCIE);//to enable interrupt
    2bf0:	aa e2       	ldi	r26, 0x2A	; 42
    2bf2:	b0 e0       	ldi	r27, 0x00	; 0
    2bf4:	ea e2       	ldi	r30, 0x2A	; 42
    2bf6:	f0 e0       	ldi	r31, 0x00	; 0
    2bf8:	80 81       	ld	r24, Z
    2bfa:	80 68       	ori	r24, 0x80	; 128
    2bfc:	8c 93       	st	X, r24
	callBackPtr=Cpy_u8DataPtr;
    2bfe:	89 81       	ldd	r24, Y+1	; 0x01
    2c00:	9a 81       	ldd	r25, Y+2	; 0x02
    2c02:	90 93 ab 01 	sts	0x01AB, r25
    2c06:	80 93 aa 01 	sts	0x01AA, r24
	CallbackFunc=Cpy_func;
    2c0a:	8b 81       	ldd	r24, Y+3	; 0x03
    2c0c:	9c 81       	ldd	r25, Y+4	; 0x04
    2c0e:	90 93 ad 01 	sts	0x01AD, r25
    2c12:	80 93 ac 01 	sts	0x01AC, r24
}
    2c16:	0f 90       	pop	r0
    2c18:	0f 90       	pop	r0
    2c1a:	0f 90       	pop	r0
    2c1c:	0f 90       	pop	r0
    2c1e:	cf 91       	pop	r28
    2c20:	df 91       	pop	r29
    2c22:	08 95       	ret

00002c24 <__vector_13>:


void __vector_13(void) __attribute__((signal)) ;
void __vector_13(void)
{
    2c24:	1f 92       	push	r1
    2c26:	0f 92       	push	r0
    2c28:	0f b6       	in	r0, 0x3f	; 63
    2c2a:	0f 92       	push	r0
    2c2c:	11 24       	eor	r1, r1
    2c2e:	2f 93       	push	r18
    2c30:	3f 93       	push	r19
    2c32:	4f 93       	push	r20
    2c34:	5f 93       	push	r21
    2c36:	6f 93       	push	r22
    2c38:	7f 93       	push	r23
    2c3a:	8f 93       	push	r24
    2c3c:	9f 93       	push	r25
    2c3e:	af 93       	push	r26
    2c40:	bf 93       	push	r27
    2c42:	ef 93       	push	r30
    2c44:	ff 93       	push	r31
    2c46:	df 93       	push	r29
    2c48:	cf 93       	push	r28
    2c4a:	cd b7       	in	r28, 0x3d	; 61
    2c4c:	de b7       	in	r29, 0x3e	; 62
	if((callBackPtr != NULL)&&(CallbackFunc != NULL))
    2c4e:	80 91 aa 01 	lds	r24, 0x01AA
    2c52:	90 91 ab 01 	lds	r25, 0x01AB
    2c56:	00 97       	sbiw	r24, 0x00	; 0
    2c58:	99 f0       	breq	.+38     	; 0x2c80 <__vector_13+0x5c>
    2c5a:	80 91 ac 01 	lds	r24, 0x01AC
    2c5e:	90 91 ad 01 	lds	r25, 0x01AD
    2c62:	00 97       	sbiw	r24, 0x00	; 0
    2c64:	69 f0       	breq	.+26     	; 0x2c80 <__vector_13+0x5c>
	{
		*callBackPtr=UDR;
    2c66:	a0 91 aa 01 	lds	r26, 0x01AA
    2c6a:	b0 91 ab 01 	lds	r27, 0x01AB
    2c6e:	ec e2       	ldi	r30, 0x2C	; 44
    2c70:	f0 e0       	ldi	r31, 0x00	; 0
    2c72:	80 81       	ld	r24, Z
    2c74:	8c 93       	st	X, r24
		CallbackFunc();
    2c76:	e0 91 ac 01 	lds	r30, 0x01AC
    2c7a:	f0 91 ad 01 	lds	r31, 0x01AD
    2c7e:	09 95       	icall
	}
}
    2c80:	cf 91       	pop	r28
    2c82:	df 91       	pop	r29
    2c84:	ff 91       	pop	r31
    2c86:	ef 91       	pop	r30
    2c88:	bf 91       	pop	r27
    2c8a:	af 91       	pop	r26
    2c8c:	9f 91       	pop	r25
    2c8e:	8f 91       	pop	r24
    2c90:	7f 91       	pop	r23
    2c92:	6f 91       	pop	r22
    2c94:	5f 91       	pop	r21
    2c96:	4f 91       	pop	r20
    2c98:	3f 91       	pop	r19
    2c9a:	2f 91       	pop	r18
    2c9c:	0f 90       	pop	r0
    2c9e:	0f be       	out	0x3f, r0	; 63
    2ca0:	0f 90       	pop	r0
    2ca2:	1f 90       	pop	r1
    2ca4:	18 95       	reti

00002ca6 <main>:
/*****************************************************/

#include "project_interface.h"

int main ()
{
    2ca6:	df 93       	push	r29
    2ca8:	cf 93       	push	r28
    2caa:	00 d0       	rcall	.+0      	; 0x2cac <main+0x6>
    2cac:	cd b7       	in	r28, 0x3d	; 61
    2cae:	de b7       	in	r29, 0x3e	; 62
	//to initialize the LEDs the buzzer
	Dio_voidSetPortDirection(PRO_PORT,DIO_OUTPUT);
    2cb0:	82 e0       	ldi	r24, 0x02	; 2
    2cb2:	61 e0       	ldi	r22, 0x01	; 1
    2cb4:	0e 94 1d 08 	call	0x103a	; 0x103a <Dio_voidSetPortDirection>
	//to initialize the stepper that will open the door
	Stpr_voidInit();
    2cb8:	0e 94 d2 0e 	call	0x1da4	; 0x1da4 <Stpr_voidInit>
	//to initialize the UART that will communicate with the PC
	UART_VoidInit(Disable,1,8);
    2cbc:	80 e0       	ldi	r24, 0x00	; 0
    2cbe:	61 e0       	ldi	r22, 0x01	; 1
    2cc0:	48 e0       	ldi	r20, 0x08	; 8
    2cc2:	0e 94 a0 14 	call	0x2940	; 0x2940 <UART_VoidInit>
	//to initialize the LCD
	Lcd_Init();
    2cc6:	0e 94 39 0b 	call	0x1672	; 0x1672 <Lcd_Init>

    while (1)
    {
    	// the default home locked
		GreenLed(Off);
    2cca:	80 e0       	ldi	r24, 0x00	; 0
    2ccc:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <GreenLed>
		redLed(On);
    2cd0:	81 e0       	ldi	r24, 0x01	; 1
    2cd2:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <redLed>

    	u8 PersonCheck=user_check();
    2cd6:	0e 94 b3 1b 	call	0x3766	; 0x3766 <user_check>
    2cda:	8a 83       	std	Y+2, r24	; 0x02

    	if (PersonCheck==Right)
    2cdc:	8a 81       	ldd	r24, Y+2	; 0x02
    2cde:	81 30       	cpi	r24, 0x01	; 1
    2ce0:	21 f4       	brne	.+8      	; 0x2cea <main+0x44>
    	{
    		u8 nouse =HomeOpen();
    2ce2:	0e 94 17 1c 	call	0x382e	; 0x382e <HomeOpen>
    2ce6:	89 83       	std	Y+1, r24	; 0x01
    2ce8:	f0 cf       	rjmp	.-32     	; 0x2cca <main+0x24>
		}
    	else
    	{
    		Lcd_voidSendCommand(clear);
    2cea:	81 e0       	ldi	r24, 0x01	; 1
    2cec:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
    		Lcd_VoidWriteString("Call the service");
    2cf0:	80 e6       	ldi	r24, 0x60	; 96
    2cf2:	90 e0       	ldi	r25, 0x00	; 0
    2cf4:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
    		AlarmThief();
    2cf8:	0e 94 0f 1a 	call	0x341e	; 0x341e <AlarmThief>
    2cfc:	ff cf       	rjmp	.-2      	; 0x2cfc <main+0x56>

00002cfe <buzzer>:
    }
}


void buzzer (u8 state)
{
    2cfe:	0f 93       	push	r16
    2d00:	1f 93       	push	r17
    2d02:	df 93       	push	r29
    2d04:	cf 93       	push	r28
    2d06:	cd b7       	in	r28, 0x3d	; 61
    2d08:	de b7       	in	r29, 0x3e	; 62
    2d0a:	c5 55       	subi	r28, 0x55	; 85
    2d0c:	d0 40       	sbci	r29, 0x00	; 0
    2d0e:	0f b6       	in	r0, 0x3f	; 63
    2d10:	f8 94       	cli
    2d12:	de bf       	out	0x3e, r29	; 62
    2d14:	0f be       	out	0x3f, r0	; 63
    2d16:	cd bf       	out	0x3d, r28	; 61
    2d18:	fe 01       	movw	r30, r28
    2d1a:	eb 5a       	subi	r30, 0xAB	; 171
    2d1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d1e:	80 83       	st	Z, r24
	if (state==Right)
    2d20:	fe 01       	movw	r30, r28
    2d22:	eb 5a       	subi	r30, 0xAB	; 171
    2d24:	ff 4f       	sbci	r31, 0xFF	; 255
    2d26:	80 81       	ld	r24, Z
    2d28:	81 30       	cpi	r24, 0x01	; 1
    2d2a:	09 f0       	breq	.+2      	; 0x2d2e <buzzer+0x30>
    2d2c:	bf c1       	rjmp	.+894    	; 0x30ac <buzzer+0x3ae>
	{
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_HIGH);
    2d2e:	82 e0       	ldi	r24, 0x02	; 2
    2d30:	63 e0       	ldi	r22, 0x03	; 3
    2d32:	41 e0       	ldi	r20, 0x01	; 1
    2d34:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    2d38:	fe 01       	movw	r30, r28
    2d3a:	ef 5a       	subi	r30, 0xAF	; 175
    2d3c:	ff 4f       	sbci	r31, 0xFF	; 255
    2d3e:	80 e0       	ldi	r24, 0x00	; 0
    2d40:	90 e0       	ldi	r25, 0x00	; 0
    2d42:	a8 ec       	ldi	r26, 0xC8	; 200
    2d44:	b2 e4       	ldi	r27, 0x42	; 66
    2d46:	80 83       	st	Z, r24
    2d48:	91 83       	std	Z+1, r25	; 0x01
    2d4a:	a2 83       	std	Z+2, r26	; 0x02
    2d4c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2d4e:	8e 01       	movw	r16, r28
    2d50:	03 5b       	subi	r16, 0xB3	; 179
    2d52:	1f 4f       	sbci	r17, 0xFF	; 255
    2d54:	fe 01       	movw	r30, r28
    2d56:	ef 5a       	subi	r30, 0xAF	; 175
    2d58:	ff 4f       	sbci	r31, 0xFF	; 255
    2d5a:	60 81       	ld	r22, Z
    2d5c:	71 81       	ldd	r23, Z+1	; 0x01
    2d5e:	82 81       	ldd	r24, Z+2	; 0x02
    2d60:	93 81       	ldd	r25, Z+3	; 0x03
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	4a ef       	ldi	r20, 0xFA	; 250
    2d68:	54 e4       	ldi	r21, 0x44	; 68
    2d6a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2d6e:	dc 01       	movw	r26, r24
    2d70:	cb 01       	movw	r24, r22
    2d72:	f8 01       	movw	r30, r16
    2d74:	80 83       	st	Z, r24
    2d76:	91 83       	std	Z+1, r25	; 0x01
    2d78:	a2 83       	std	Z+2, r26	; 0x02
    2d7a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2d7c:	fe 01       	movw	r30, r28
    2d7e:	e3 5b       	subi	r30, 0xB3	; 179
    2d80:	ff 4f       	sbci	r31, 0xFF	; 255
    2d82:	60 81       	ld	r22, Z
    2d84:	71 81       	ldd	r23, Z+1	; 0x01
    2d86:	82 81       	ldd	r24, Z+2	; 0x02
    2d88:	93 81       	ldd	r25, Z+3	; 0x03
    2d8a:	20 e0       	ldi	r18, 0x00	; 0
    2d8c:	30 e0       	ldi	r19, 0x00	; 0
    2d8e:	40 e8       	ldi	r20, 0x80	; 128
    2d90:	5f e3       	ldi	r21, 0x3F	; 63
    2d92:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2d96:	88 23       	and	r24, r24
    2d98:	44 f4       	brge	.+16     	; 0x2daa <buzzer+0xac>
		__ticks = 1;
    2d9a:	fe 01       	movw	r30, r28
    2d9c:	e5 5b       	subi	r30, 0xB5	; 181
    2d9e:	ff 4f       	sbci	r31, 0xFF	; 255
    2da0:	81 e0       	ldi	r24, 0x01	; 1
    2da2:	90 e0       	ldi	r25, 0x00	; 0
    2da4:	91 83       	std	Z+1, r25	; 0x01
    2da6:	80 83       	st	Z, r24
    2da8:	64 c0       	rjmp	.+200    	; 0x2e72 <buzzer+0x174>
	else if (__tmp > 65535)
    2daa:	fe 01       	movw	r30, r28
    2dac:	e3 5b       	subi	r30, 0xB3	; 179
    2dae:	ff 4f       	sbci	r31, 0xFF	; 255
    2db0:	60 81       	ld	r22, Z
    2db2:	71 81       	ldd	r23, Z+1	; 0x01
    2db4:	82 81       	ldd	r24, Z+2	; 0x02
    2db6:	93 81       	ldd	r25, Z+3	; 0x03
    2db8:	20 e0       	ldi	r18, 0x00	; 0
    2dba:	3f ef       	ldi	r19, 0xFF	; 255
    2dbc:	4f e7       	ldi	r20, 0x7F	; 127
    2dbe:	57 e4       	ldi	r21, 0x47	; 71
    2dc0:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2dc4:	18 16       	cp	r1, r24
    2dc6:	0c f0       	brlt	.+2      	; 0x2dca <buzzer+0xcc>
    2dc8:	43 c0       	rjmp	.+134    	; 0x2e50 <buzzer+0x152>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2dca:	fe 01       	movw	r30, r28
    2dcc:	ef 5a       	subi	r30, 0xAF	; 175
    2dce:	ff 4f       	sbci	r31, 0xFF	; 255
    2dd0:	60 81       	ld	r22, Z
    2dd2:	71 81       	ldd	r23, Z+1	; 0x01
    2dd4:	82 81       	ldd	r24, Z+2	; 0x02
    2dd6:	93 81       	ldd	r25, Z+3	; 0x03
    2dd8:	20 e0       	ldi	r18, 0x00	; 0
    2dda:	30 e0       	ldi	r19, 0x00	; 0
    2ddc:	40 e2       	ldi	r20, 0x20	; 32
    2dde:	51 e4       	ldi	r21, 0x41	; 65
    2de0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2de4:	dc 01       	movw	r26, r24
    2de6:	cb 01       	movw	r24, r22
    2de8:	8e 01       	movw	r16, r28
    2dea:	05 5b       	subi	r16, 0xB5	; 181
    2dec:	1f 4f       	sbci	r17, 0xFF	; 255
    2dee:	bc 01       	movw	r22, r24
    2df0:	cd 01       	movw	r24, r26
    2df2:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2df6:	dc 01       	movw	r26, r24
    2df8:	cb 01       	movw	r24, r22
    2dfa:	f8 01       	movw	r30, r16
    2dfc:	91 83       	std	Z+1, r25	; 0x01
    2dfe:	80 83       	st	Z, r24
    2e00:	1f c0       	rjmp	.+62     	; 0x2e40 <buzzer+0x142>
    2e02:	fe 01       	movw	r30, r28
    2e04:	e7 5b       	subi	r30, 0xB7	; 183
    2e06:	ff 4f       	sbci	r31, 0xFF	; 255
    2e08:	88 ec       	ldi	r24, 0xC8	; 200
    2e0a:	90 e0       	ldi	r25, 0x00	; 0
    2e0c:	91 83       	std	Z+1, r25	; 0x01
    2e0e:	80 83       	st	Z, r24
    2e10:	fe 01       	movw	r30, r28
    2e12:	e7 5b       	subi	r30, 0xB7	; 183
    2e14:	ff 4f       	sbci	r31, 0xFF	; 255
    2e16:	80 81       	ld	r24, Z
    2e18:	91 81       	ldd	r25, Z+1	; 0x01
    2e1a:	01 97       	sbiw	r24, 0x01	; 1
    2e1c:	f1 f7       	brne	.-4      	; 0x2e1a <buzzer+0x11c>
    2e1e:	fe 01       	movw	r30, r28
    2e20:	e7 5b       	subi	r30, 0xB7	; 183
    2e22:	ff 4f       	sbci	r31, 0xFF	; 255
    2e24:	91 83       	std	Z+1, r25	; 0x01
    2e26:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2e28:	de 01       	movw	r26, r28
    2e2a:	a5 5b       	subi	r26, 0xB5	; 181
    2e2c:	bf 4f       	sbci	r27, 0xFF	; 255
    2e2e:	fe 01       	movw	r30, r28
    2e30:	e5 5b       	subi	r30, 0xB5	; 181
    2e32:	ff 4f       	sbci	r31, 0xFF	; 255
    2e34:	80 81       	ld	r24, Z
    2e36:	91 81       	ldd	r25, Z+1	; 0x01
    2e38:	01 97       	sbiw	r24, 0x01	; 1
    2e3a:	11 96       	adiw	r26, 0x01	; 1
    2e3c:	9c 93       	st	X, r25
    2e3e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2e40:	fe 01       	movw	r30, r28
    2e42:	e5 5b       	subi	r30, 0xB5	; 181
    2e44:	ff 4f       	sbci	r31, 0xFF	; 255
    2e46:	80 81       	ld	r24, Z
    2e48:	91 81       	ldd	r25, Z+1	; 0x01
    2e4a:	00 97       	sbiw	r24, 0x00	; 0
    2e4c:	d1 f6       	brne	.-76     	; 0x2e02 <buzzer+0x104>
    2e4e:	27 c0       	rjmp	.+78     	; 0x2e9e <buzzer+0x1a0>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2e50:	8e 01       	movw	r16, r28
    2e52:	05 5b       	subi	r16, 0xB5	; 181
    2e54:	1f 4f       	sbci	r17, 0xFF	; 255
    2e56:	fe 01       	movw	r30, r28
    2e58:	e3 5b       	subi	r30, 0xB3	; 179
    2e5a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e5c:	60 81       	ld	r22, Z
    2e5e:	71 81       	ldd	r23, Z+1	; 0x01
    2e60:	82 81       	ldd	r24, Z+2	; 0x02
    2e62:	93 81       	ldd	r25, Z+3	; 0x03
    2e64:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2e68:	dc 01       	movw	r26, r24
    2e6a:	cb 01       	movw	r24, r22
    2e6c:	f8 01       	movw	r30, r16
    2e6e:	91 83       	std	Z+1, r25	; 0x01
    2e70:	80 83       	st	Z, r24
    2e72:	de 01       	movw	r26, r28
    2e74:	a9 5b       	subi	r26, 0xB9	; 185
    2e76:	bf 4f       	sbci	r27, 0xFF	; 255
    2e78:	fe 01       	movw	r30, r28
    2e7a:	e5 5b       	subi	r30, 0xB5	; 181
    2e7c:	ff 4f       	sbci	r31, 0xFF	; 255
    2e7e:	80 81       	ld	r24, Z
    2e80:	91 81       	ldd	r25, Z+1	; 0x01
    2e82:	8d 93       	st	X+, r24
    2e84:	9c 93       	st	X, r25
    2e86:	fe 01       	movw	r30, r28
    2e88:	e9 5b       	subi	r30, 0xB9	; 185
    2e8a:	ff 4f       	sbci	r31, 0xFF	; 255
    2e8c:	80 81       	ld	r24, Z
    2e8e:	91 81       	ldd	r25, Z+1	; 0x01
    2e90:	01 97       	sbiw	r24, 0x01	; 1
    2e92:	f1 f7       	brne	.-4      	; 0x2e90 <buzzer+0x192>
    2e94:	fe 01       	movw	r30, r28
    2e96:	e9 5b       	subi	r30, 0xB9	; 185
    2e98:	ff 4f       	sbci	r31, 0xFF	; 255
    2e9a:	91 83       	std	Z+1, r25	; 0x01
    2e9c:	80 83       	st	Z, r24
		_delay_ms(100);
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_LOW);
    2e9e:	82 e0       	ldi	r24, 0x02	; 2
    2ea0:	63 e0       	ldi	r22, 0x03	; 3
    2ea2:	40 e0       	ldi	r20, 0x00	; 0
    2ea4:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    2ea8:	fe 01       	movw	r30, r28
    2eaa:	ed 5b       	subi	r30, 0xBD	; 189
    2eac:	ff 4f       	sbci	r31, 0xFF	; 255
    2eae:	80 e0       	ldi	r24, 0x00	; 0
    2eb0:	90 e0       	ldi	r25, 0x00	; 0
    2eb2:	a8 e4       	ldi	r26, 0x48	; 72
    2eb4:	b3 e4       	ldi	r27, 0x43	; 67
    2eb6:	80 83       	st	Z, r24
    2eb8:	91 83       	std	Z+1, r25	; 0x01
    2eba:	a2 83       	std	Z+2, r26	; 0x02
    2ebc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2ebe:	8e 01       	movw	r16, r28
    2ec0:	01 5c       	subi	r16, 0xC1	; 193
    2ec2:	1f 4f       	sbci	r17, 0xFF	; 255
    2ec4:	fe 01       	movw	r30, r28
    2ec6:	ed 5b       	subi	r30, 0xBD	; 189
    2ec8:	ff 4f       	sbci	r31, 0xFF	; 255
    2eca:	60 81       	ld	r22, Z
    2ecc:	71 81       	ldd	r23, Z+1	; 0x01
    2ece:	82 81       	ldd	r24, Z+2	; 0x02
    2ed0:	93 81       	ldd	r25, Z+3	; 0x03
    2ed2:	20 e0       	ldi	r18, 0x00	; 0
    2ed4:	30 e0       	ldi	r19, 0x00	; 0
    2ed6:	4a ef       	ldi	r20, 0xFA	; 250
    2ed8:	54 e4       	ldi	r21, 0x44	; 68
    2eda:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2ede:	dc 01       	movw	r26, r24
    2ee0:	cb 01       	movw	r24, r22
    2ee2:	f8 01       	movw	r30, r16
    2ee4:	80 83       	st	Z, r24
    2ee6:	91 83       	std	Z+1, r25	; 0x01
    2ee8:	a2 83       	std	Z+2, r26	; 0x02
    2eea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2eec:	fe 01       	movw	r30, r28
    2eee:	ff 96       	adiw	r30, 0x3f	; 63
    2ef0:	60 81       	ld	r22, Z
    2ef2:	71 81       	ldd	r23, Z+1	; 0x01
    2ef4:	82 81       	ldd	r24, Z+2	; 0x02
    2ef6:	93 81       	ldd	r25, Z+3	; 0x03
    2ef8:	20 e0       	ldi	r18, 0x00	; 0
    2efa:	30 e0       	ldi	r19, 0x00	; 0
    2efc:	40 e8       	ldi	r20, 0x80	; 128
    2efe:	5f e3       	ldi	r21, 0x3F	; 63
    2f00:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    2f04:	88 23       	and	r24, r24
    2f06:	2c f4       	brge	.+10     	; 0x2f12 <buzzer+0x214>
		__ticks = 1;
    2f08:	81 e0       	ldi	r24, 0x01	; 1
    2f0a:	90 e0       	ldi	r25, 0x00	; 0
    2f0c:	9e af       	std	Y+62, r25	; 0x3e
    2f0e:	8d af       	std	Y+61, r24	; 0x3d
    2f10:	46 c0       	rjmp	.+140    	; 0x2f9e <buzzer+0x2a0>
	else if (__tmp > 65535)
    2f12:	fe 01       	movw	r30, r28
    2f14:	ff 96       	adiw	r30, 0x3f	; 63
    2f16:	60 81       	ld	r22, Z
    2f18:	71 81       	ldd	r23, Z+1	; 0x01
    2f1a:	82 81       	ldd	r24, Z+2	; 0x02
    2f1c:	93 81       	ldd	r25, Z+3	; 0x03
    2f1e:	20 e0       	ldi	r18, 0x00	; 0
    2f20:	3f ef       	ldi	r19, 0xFF	; 255
    2f22:	4f e7       	ldi	r20, 0x7F	; 127
    2f24:	57 e4       	ldi	r21, 0x47	; 71
    2f26:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    2f2a:	18 16       	cp	r1, r24
    2f2c:	64 f5       	brge	.+88     	; 0x2f86 <buzzer+0x288>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2f2e:	fe 01       	movw	r30, r28
    2f30:	ed 5b       	subi	r30, 0xBD	; 189
    2f32:	ff 4f       	sbci	r31, 0xFF	; 255
    2f34:	60 81       	ld	r22, Z
    2f36:	71 81       	ldd	r23, Z+1	; 0x01
    2f38:	82 81       	ldd	r24, Z+2	; 0x02
    2f3a:	93 81       	ldd	r25, Z+3	; 0x03
    2f3c:	20 e0       	ldi	r18, 0x00	; 0
    2f3e:	30 e0       	ldi	r19, 0x00	; 0
    2f40:	40 e2       	ldi	r20, 0x20	; 32
    2f42:	51 e4       	ldi	r21, 0x41	; 65
    2f44:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2f48:	dc 01       	movw	r26, r24
    2f4a:	cb 01       	movw	r24, r22
    2f4c:	bc 01       	movw	r22, r24
    2f4e:	cd 01       	movw	r24, r26
    2f50:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f54:	dc 01       	movw	r26, r24
    2f56:	cb 01       	movw	r24, r22
    2f58:	9e af       	std	Y+62, r25	; 0x3e
    2f5a:	8d af       	std	Y+61, r24	; 0x3d
    2f5c:	0f c0       	rjmp	.+30     	; 0x2f7c <buzzer+0x27e>
    2f5e:	88 ec       	ldi	r24, 0xC8	; 200
    2f60:	90 e0       	ldi	r25, 0x00	; 0
    2f62:	9c af       	std	Y+60, r25	; 0x3c
    2f64:	8b af       	std	Y+59, r24	; 0x3b
    2f66:	8b ad       	ldd	r24, Y+59	; 0x3b
    2f68:	9c ad       	ldd	r25, Y+60	; 0x3c
    2f6a:	01 97       	sbiw	r24, 0x01	; 1
    2f6c:	f1 f7       	brne	.-4      	; 0x2f6a <buzzer+0x26c>
    2f6e:	9c af       	std	Y+60, r25	; 0x3c
    2f70:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2f72:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f74:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f76:	01 97       	sbiw	r24, 0x01	; 1
    2f78:	9e af       	std	Y+62, r25	; 0x3e
    2f7a:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2f7c:	8d ad       	ldd	r24, Y+61	; 0x3d
    2f7e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2f80:	00 97       	sbiw	r24, 0x00	; 0
    2f82:	69 f7       	brne	.-38     	; 0x2f5e <buzzer+0x260>
    2f84:	16 c0       	rjmp	.+44     	; 0x2fb2 <buzzer+0x2b4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2f86:	fe 01       	movw	r30, r28
    2f88:	ff 96       	adiw	r30, 0x3f	; 63
    2f8a:	60 81       	ld	r22, Z
    2f8c:	71 81       	ldd	r23, Z+1	; 0x01
    2f8e:	82 81       	ldd	r24, Z+2	; 0x02
    2f90:	93 81       	ldd	r25, Z+3	; 0x03
    2f92:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    2f96:	dc 01       	movw	r26, r24
    2f98:	cb 01       	movw	r24, r22
    2f9a:	9e af       	std	Y+62, r25	; 0x3e
    2f9c:	8d af       	std	Y+61, r24	; 0x3d
    2f9e:	8d ad       	ldd	r24, Y+61	; 0x3d
    2fa0:	9e ad       	ldd	r25, Y+62	; 0x3e
    2fa2:	9a af       	std	Y+58, r25	; 0x3a
    2fa4:	89 af       	std	Y+57, r24	; 0x39
    2fa6:	89 ad       	ldd	r24, Y+57	; 0x39
    2fa8:	9a ad       	ldd	r25, Y+58	; 0x3a
    2faa:	01 97       	sbiw	r24, 0x01	; 1
    2fac:	f1 f7       	brne	.-4      	; 0x2faa <buzzer+0x2ac>
    2fae:	9a af       	std	Y+58, r25	; 0x3a
    2fb0:	89 af       	std	Y+57, r24	; 0x39
		_delay_ms(200);
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_HIGH);
    2fb2:	82 e0       	ldi	r24, 0x02	; 2
    2fb4:	63 e0       	ldi	r22, 0x03	; 3
    2fb6:	41 e0       	ldi	r20, 0x01	; 1
    2fb8:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    2fbc:	80 e0       	ldi	r24, 0x00	; 0
    2fbe:	90 e0       	ldi	r25, 0x00	; 0
    2fc0:	a8 ec       	ldi	r26, 0xC8	; 200
    2fc2:	b2 e4       	ldi	r27, 0x42	; 66
    2fc4:	8d ab       	std	Y+53, r24	; 0x35
    2fc6:	9e ab       	std	Y+54, r25	; 0x36
    2fc8:	af ab       	std	Y+55, r26	; 0x37
    2fca:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2fcc:	6d a9       	ldd	r22, Y+53	; 0x35
    2fce:	7e a9       	ldd	r23, Y+54	; 0x36
    2fd0:	8f a9       	ldd	r24, Y+55	; 0x37
    2fd2:	98 ad       	ldd	r25, Y+56	; 0x38
    2fd4:	20 e0       	ldi	r18, 0x00	; 0
    2fd6:	30 e0       	ldi	r19, 0x00	; 0
    2fd8:	4a ef       	ldi	r20, 0xFA	; 250
    2fda:	54 e4       	ldi	r21, 0x44	; 68
    2fdc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    2fe0:	dc 01       	movw	r26, r24
    2fe2:	cb 01       	movw	r24, r22
    2fe4:	89 ab       	std	Y+49, r24	; 0x31
    2fe6:	9a ab       	std	Y+50, r25	; 0x32
    2fe8:	ab ab       	std	Y+51, r26	; 0x33
    2fea:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2fec:	69 a9       	ldd	r22, Y+49	; 0x31
    2fee:	7a a9       	ldd	r23, Y+50	; 0x32
    2ff0:	8b a9       	ldd	r24, Y+51	; 0x33
    2ff2:	9c a9       	ldd	r25, Y+52	; 0x34
    2ff4:	20 e0       	ldi	r18, 0x00	; 0
    2ff6:	30 e0       	ldi	r19, 0x00	; 0
    2ff8:	40 e8       	ldi	r20, 0x80	; 128
    2ffa:	5f e3       	ldi	r21, 0x3F	; 63
    2ffc:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3000:	88 23       	and	r24, r24
    3002:	2c f4       	brge	.+10     	; 0x300e <buzzer+0x310>
		__ticks = 1;
    3004:	81 e0       	ldi	r24, 0x01	; 1
    3006:	90 e0       	ldi	r25, 0x00	; 0
    3008:	98 ab       	std	Y+48, r25	; 0x30
    300a:	8f a7       	std	Y+47, r24	; 0x2f
    300c:	3f c0       	rjmp	.+126    	; 0x308c <buzzer+0x38e>
	else if (__tmp > 65535)
    300e:	69 a9       	ldd	r22, Y+49	; 0x31
    3010:	7a a9       	ldd	r23, Y+50	; 0x32
    3012:	8b a9       	ldd	r24, Y+51	; 0x33
    3014:	9c a9       	ldd	r25, Y+52	; 0x34
    3016:	20 e0       	ldi	r18, 0x00	; 0
    3018:	3f ef       	ldi	r19, 0xFF	; 255
    301a:	4f e7       	ldi	r20, 0x7F	; 127
    301c:	57 e4       	ldi	r21, 0x47	; 71
    301e:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3022:	18 16       	cp	r1, r24
    3024:	4c f5       	brge	.+82     	; 0x3078 <buzzer+0x37a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    3026:	6d a9       	ldd	r22, Y+53	; 0x35
    3028:	7e a9       	ldd	r23, Y+54	; 0x36
    302a:	8f a9       	ldd	r24, Y+55	; 0x37
    302c:	98 ad       	ldd	r25, Y+56	; 0x38
    302e:	20 e0       	ldi	r18, 0x00	; 0
    3030:	30 e0       	ldi	r19, 0x00	; 0
    3032:	40 e2       	ldi	r20, 0x20	; 32
    3034:	51 e4       	ldi	r21, 0x41	; 65
    3036:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    303a:	dc 01       	movw	r26, r24
    303c:	cb 01       	movw	r24, r22
    303e:	bc 01       	movw	r22, r24
    3040:	cd 01       	movw	r24, r26
    3042:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3046:	dc 01       	movw	r26, r24
    3048:	cb 01       	movw	r24, r22
    304a:	98 ab       	std	Y+48, r25	; 0x30
    304c:	8f a7       	std	Y+47, r24	; 0x2f
    304e:	0f c0       	rjmp	.+30     	; 0x306e <buzzer+0x370>
    3050:	88 ec       	ldi	r24, 0xC8	; 200
    3052:	90 e0       	ldi	r25, 0x00	; 0
    3054:	9e a7       	std	Y+46, r25	; 0x2e
    3056:	8d a7       	std	Y+45, r24	; 0x2d
    3058:	8d a5       	ldd	r24, Y+45	; 0x2d
    305a:	9e a5       	ldd	r25, Y+46	; 0x2e
    305c:	01 97       	sbiw	r24, 0x01	; 1
    305e:	f1 f7       	brne	.-4      	; 0x305c <buzzer+0x35e>
    3060:	9e a7       	std	Y+46, r25	; 0x2e
    3062:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3064:	8f a5       	ldd	r24, Y+47	; 0x2f
    3066:	98 a9       	ldd	r25, Y+48	; 0x30
    3068:	01 97       	sbiw	r24, 0x01	; 1
    306a:	98 ab       	std	Y+48, r25	; 0x30
    306c:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    306e:	8f a5       	ldd	r24, Y+47	; 0x2f
    3070:	98 a9       	ldd	r25, Y+48	; 0x30
    3072:	00 97       	sbiw	r24, 0x00	; 0
    3074:	69 f7       	brne	.-38     	; 0x3050 <buzzer+0x352>
    3076:	14 c0       	rjmp	.+40     	; 0x30a0 <buzzer+0x3a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3078:	69 a9       	ldd	r22, Y+49	; 0x31
    307a:	7a a9       	ldd	r23, Y+50	; 0x32
    307c:	8b a9       	ldd	r24, Y+51	; 0x33
    307e:	9c a9       	ldd	r25, Y+52	; 0x34
    3080:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3084:	dc 01       	movw	r26, r24
    3086:	cb 01       	movw	r24, r22
    3088:	98 ab       	std	Y+48, r25	; 0x30
    308a:	8f a7       	std	Y+47, r24	; 0x2f
    308c:	8f a5       	ldd	r24, Y+47	; 0x2f
    308e:	98 a9       	ldd	r25, Y+48	; 0x30
    3090:	9c a7       	std	Y+44, r25	; 0x2c
    3092:	8b a7       	std	Y+43, r24	; 0x2b
    3094:	8b a5       	ldd	r24, Y+43	; 0x2b
    3096:	9c a5       	ldd	r25, Y+44	; 0x2c
    3098:	01 97       	sbiw	r24, 0x01	; 1
    309a:	f1 f7       	brne	.-4      	; 0x3098 <buzzer+0x39a>
    309c:	9c a7       	std	Y+44, r25	; 0x2c
    309e:	8b a7       	std	Y+43, r24	; 0x2b
		_delay_ms(100);
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_LOW);
    30a0:	82 e0       	ldi	r24, 0x02	; 2
    30a2:	63 e0       	ldi	r22, 0x03	; 3
    30a4:	40 e0       	ldi	r20, 0x00	; 0
    30a6:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    30aa:	71 c1       	rjmp	.+738    	; 0x338e <buzzer+0x690>
	}
	else if (state==Wrong)
    30ac:	fe 01       	movw	r30, r28
    30ae:	eb 5a       	subi	r30, 0xAB	; 171
    30b0:	ff 4f       	sbci	r31, 0xFF	; 255
    30b2:	80 81       	ld	r24, Z
    30b4:	82 30       	cpi	r24, 0x02	; 2
    30b6:	09 f0       	breq	.+2      	; 0x30ba <buzzer+0x3bc>
    30b8:	6a c1       	rjmp	.+724    	; 0x338e <buzzer+0x690>
	{
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_HIGH);
    30ba:	82 e0       	ldi	r24, 0x02	; 2
    30bc:	63 e0       	ldi	r22, 0x03	; 3
    30be:	41 e0       	ldi	r20, 0x01	; 1
    30c0:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    30c4:	80 e0       	ldi	r24, 0x00	; 0
    30c6:	90 e0       	ldi	r25, 0x00	; 0
    30c8:	a8 ec       	ldi	r26, 0xC8	; 200
    30ca:	b2 e4       	ldi	r27, 0x42	; 66
    30cc:	8f a3       	std	Y+39, r24	; 0x27
    30ce:	98 a7       	std	Y+40, r25	; 0x28
    30d0:	a9 a7       	std	Y+41, r26	; 0x29
    30d2:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    30d4:	6f a1       	ldd	r22, Y+39	; 0x27
    30d6:	78 a5       	ldd	r23, Y+40	; 0x28
    30d8:	89 a5       	ldd	r24, Y+41	; 0x29
    30da:	9a a5       	ldd	r25, Y+42	; 0x2a
    30dc:	20 e0       	ldi	r18, 0x00	; 0
    30de:	30 e0       	ldi	r19, 0x00	; 0
    30e0:	4a ef       	ldi	r20, 0xFA	; 250
    30e2:	54 e4       	ldi	r21, 0x44	; 68
    30e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    30e8:	dc 01       	movw	r26, r24
    30ea:	cb 01       	movw	r24, r22
    30ec:	8b a3       	std	Y+35, r24	; 0x23
    30ee:	9c a3       	std	Y+36, r25	; 0x24
    30f0:	ad a3       	std	Y+37, r26	; 0x25
    30f2:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    30f4:	6b a1       	ldd	r22, Y+35	; 0x23
    30f6:	7c a1       	ldd	r23, Y+36	; 0x24
    30f8:	8d a1       	ldd	r24, Y+37	; 0x25
    30fa:	9e a1       	ldd	r25, Y+38	; 0x26
    30fc:	20 e0       	ldi	r18, 0x00	; 0
    30fe:	30 e0       	ldi	r19, 0x00	; 0
    3100:	40 e8       	ldi	r20, 0x80	; 128
    3102:	5f e3       	ldi	r21, 0x3F	; 63
    3104:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3108:	88 23       	and	r24, r24
    310a:	2c f4       	brge	.+10     	; 0x3116 <buzzer+0x418>
		__ticks = 1;
    310c:	81 e0       	ldi	r24, 0x01	; 1
    310e:	90 e0       	ldi	r25, 0x00	; 0
    3110:	9a a3       	std	Y+34, r25	; 0x22
    3112:	89 a3       	std	Y+33, r24	; 0x21
    3114:	3f c0       	rjmp	.+126    	; 0x3194 <buzzer+0x496>
	else if (__tmp > 65535)
    3116:	6b a1       	ldd	r22, Y+35	; 0x23
    3118:	7c a1       	ldd	r23, Y+36	; 0x24
    311a:	8d a1       	ldd	r24, Y+37	; 0x25
    311c:	9e a1       	ldd	r25, Y+38	; 0x26
    311e:	20 e0       	ldi	r18, 0x00	; 0
    3120:	3f ef       	ldi	r19, 0xFF	; 255
    3122:	4f e7       	ldi	r20, 0x7F	; 127
    3124:	57 e4       	ldi	r21, 0x47	; 71
    3126:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    312a:	18 16       	cp	r1, r24
    312c:	4c f5       	brge	.+82     	; 0x3180 <buzzer+0x482>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    312e:	6f a1       	ldd	r22, Y+39	; 0x27
    3130:	78 a5       	ldd	r23, Y+40	; 0x28
    3132:	89 a5       	ldd	r24, Y+41	; 0x29
    3134:	9a a5       	ldd	r25, Y+42	; 0x2a
    3136:	20 e0       	ldi	r18, 0x00	; 0
    3138:	30 e0       	ldi	r19, 0x00	; 0
    313a:	40 e2       	ldi	r20, 0x20	; 32
    313c:	51 e4       	ldi	r21, 0x41	; 65
    313e:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3142:	dc 01       	movw	r26, r24
    3144:	cb 01       	movw	r24, r22
    3146:	bc 01       	movw	r22, r24
    3148:	cd 01       	movw	r24, r26
    314a:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    314e:	dc 01       	movw	r26, r24
    3150:	cb 01       	movw	r24, r22
    3152:	9a a3       	std	Y+34, r25	; 0x22
    3154:	89 a3       	std	Y+33, r24	; 0x21
    3156:	0f c0       	rjmp	.+30     	; 0x3176 <buzzer+0x478>
    3158:	88 ec       	ldi	r24, 0xC8	; 200
    315a:	90 e0       	ldi	r25, 0x00	; 0
    315c:	98 a3       	std	Y+32, r25	; 0x20
    315e:	8f 8f       	std	Y+31, r24	; 0x1f
    3160:	8f 8d       	ldd	r24, Y+31	; 0x1f
    3162:	98 a1       	ldd	r25, Y+32	; 0x20
    3164:	01 97       	sbiw	r24, 0x01	; 1
    3166:	f1 f7       	brne	.-4      	; 0x3164 <buzzer+0x466>
    3168:	98 a3       	std	Y+32, r25	; 0x20
    316a:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    316c:	89 a1       	ldd	r24, Y+33	; 0x21
    316e:	9a a1       	ldd	r25, Y+34	; 0x22
    3170:	01 97       	sbiw	r24, 0x01	; 1
    3172:	9a a3       	std	Y+34, r25	; 0x22
    3174:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3176:	89 a1       	ldd	r24, Y+33	; 0x21
    3178:	9a a1       	ldd	r25, Y+34	; 0x22
    317a:	00 97       	sbiw	r24, 0x00	; 0
    317c:	69 f7       	brne	.-38     	; 0x3158 <buzzer+0x45a>
    317e:	14 c0       	rjmp	.+40     	; 0x31a8 <buzzer+0x4aa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3180:	6b a1       	ldd	r22, Y+35	; 0x23
    3182:	7c a1       	ldd	r23, Y+36	; 0x24
    3184:	8d a1       	ldd	r24, Y+37	; 0x25
    3186:	9e a1       	ldd	r25, Y+38	; 0x26
    3188:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    318c:	dc 01       	movw	r26, r24
    318e:	cb 01       	movw	r24, r22
    3190:	9a a3       	std	Y+34, r25	; 0x22
    3192:	89 a3       	std	Y+33, r24	; 0x21
    3194:	89 a1       	ldd	r24, Y+33	; 0x21
    3196:	9a a1       	ldd	r25, Y+34	; 0x22
    3198:	9e 8f       	std	Y+30, r25	; 0x1e
    319a:	8d 8f       	std	Y+29, r24	; 0x1d
    319c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    319e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    31a0:	01 97       	sbiw	r24, 0x01	; 1
    31a2:	f1 f7       	brne	.-4      	; 0x31a0 <buzzer+0x4a2>
    31a4:	9e 8f       	std	Y+30, r25	; 0x1e
    31a6:	8d 8f       	std	Y+29, r24	; 0x1d
		_delay_ms(100);
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_LOW);
    31a8:	82 e0       	ldi	r24, 0x02	; 2
    31aa:	63 e0       	ldi	r22, 0x03	; 3
    31ac:	40 e0       	ldi	r20, 0x00	; 0
    31ae:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    31b2:	80 e0       	ldi	r24, 0x00	; 0
    31b4:	90 e0       	ldi	r25, 0x00	; 0
    31b6:	a8 e4       	ldi	r26, 0x48	; 72
    31b8:	b3 e4       	ldi	r27, 0x43	; 67
    31ba:	89 8f       	std	Y+25, r24	; 0x19
    31bc:	9a 8f       	std	Y+26, r25	; 0x1a
    31be:	ab 8f       	std	Y+27, r26	; 0x1b
    31c0:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    31c2:	69 8d       	ldd	r22, Y+25	; 0x19
    31c4:	7a 8d       	ldd	r23, Y+26	; 0x1a
    31c6:	8b 8d       	ldd	r24, Y+27	; 0x1b
    31c8:	9c 8d       	ldd	r25, Y+28	; 0x1c
    31ca:	20 e0       	ldi	r18, 0x00	; 0
    31cc:	30 e0       	ldi	r19, 0x00	; 0
    31ce:	4a ef       	ldi	r20, 0xFA	; 250
    31d0:	54 e4       	ldi	r21, 0x44	; 68
    31d2:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    31d6:	dc 01       	movw	r26, r24
    31d8:	cb 01       	movw	r24, r22
    31da:	8d 8b       	std	Y+21, r24	; 0x15
    31dc:	9e 8b       	std	Y+22, r25	; 0x16
    31de:	af 8b       	std	Y+23, r26	; 0x17
    31e0:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    31e2:	6d 89       	ldd	r22, Y+21	; 0x15
    31e4:	7e 89       	ldd	r23, Y+22	; 0x16
    31e6:	8f 89       	ldd	r24, Y+23	; 0x17
    31e8:	98 8d       	ldd	r25, Y+24	; 0x18
    31ea:	20 e0       	ldi	r18, 0x00	; 0
    31ec:	30 e0       	ldi	r19, 0x00	; 0
    31ee:	40 e8       	ldi	r20, 0x80	; 128
    31f0:	5f e3       	ldi	r21, 0x3F	; 63
    31f2:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    31f6:	88 23       	and	r24, r24
    31f8:	2c f4       	brge	.+10     	; 0x3204 <buzzer+0x506>
		__ticks = 1;
    31fa:	81 e0       	ldi	r24, 0x01	; 1
    31fc:	90 e0       	ldi	r25, 0x00	; 0
    31fe:	9c 8b       	std	Y+20, r25	; 0x14
    3200:	8b 8b       	std	Y+19, r24	; 0x13
    3202:	3f c0       	rjmp	.+126    	; 0x3282 <buzzer+0x584>
	else if (__tmp > 65535)
    3204:	6d 89       	ldd	r22, Y+21	; 0x15
    3206:	7e 89       	ldd	r23, Y+22	; 0x16
    3208:	8f 89       	ldd	r24, Y+23	; 0x17
    320a:	98 8d       	ldd	r25, Y+24	; 0x18
    320c:	20 e0       	ldi	r18, 0x00	; 0
    320e:	3f ef       	ldi	r19, 0xFF	; 255
    3210:	4f e7       	ldi	r20, 0x7F	; 127
    3212:	57 e4       	ldi	r21, 0x47	; 71
    3214:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3218:	18 16       	cp	r1, r24
    321a:	4c f5       	brge	.+82     	; 0x326e <buzzer+0x570>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    321c:	69 8d       	ldd	r22, Y+25	; 0x19
    321e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3220:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3222:	9c 8d       	ldd	r25, Y+28	; 0x1c
    3224:	20 e0       	ldi	r18, 0x00	; 0
    3226:	30 e0       	ldi	r19, 0x00	; 0
    3228:	40 e2       	ldi	r20, 0x20	; 32
    322a:	51 e4       	ldi	r21, 0x41	; 65
    322c:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3230:	dc 01       	movw	r26, r24
    3232:	cb 01       	movw	r24, r22
    3234:	bc 01       	movw	r22, r24
    3236:	cd 01       	movw	r24, r26
    3238:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    323c:	dc 01       	movw	r26, r24
    323e:	cb 01       	movw	r24, r22
    3240:	9c 8b       	std	Y+20, r25	; 0x14
    3242:	8b 8b       	std	Y+19, r24	; 0x13
    3244:	0f c0       	rjmp	.+30     	; 0x3264 <buzzer+0x566>
    3246:	88 ec       	ldi	r24, 0xC8	; 200
    3248:	90 e0       	ldi	r25, 0x00	; 0
    324a:	9a 8b       	std	Y+18, r25	; 0x12
    324c:	89 8b       	std	Y+17, r24	; 0x11
    324e:	89 89       	ldd	r24, Y+17	; 0x11
    3250:	9a 89       	ldd	r25, Y+18	; 0x12
    3252:	01 97       	sbiw	r24, 0x01	; 1
    3254:	f1 f7       	brne	.-4      	; 0x3252 <buzzer+0x554>
    3256:	9a 8b       	std	Y+18, r25	; 0x12
    3258:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    325a:	8b 89       	ldd	r24, Y+19	; 0x13
    325c:	9c 89       	ldd	r25, Y+20	; 0x14
    325e:	01 97       	sbiw	r24, 0x01	; 1
    3260:	9c 8b       	std	Y+20, r25	; 0x14
    3262:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3264:	8b 89       	ldd	r24, Y+19	; 0x13
    3266:	9c 89       	ldd	r25, Y+20	; 0x14
    3268:	00 97       	sbiw	r24, 0x00	; 0
    326a:	69 f7       	brne	.-38     	; 0x3246 <buzzer+0x548>
    326c:	14 c0       	rjmp	.+40     	; 0x3296 <buzzer+0x598>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    326e:	6d 89       	ldd	r22, Y+21	; 0x15
    3270:	7e 89       	ldd	r23, Y+22	; 0x16
    3272:	8f 89       	ldd	r24, Y+23	; 0x17
    3274:	98 8d       	ldd	r25, Y+24	; 0x18
    3276:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    327a:	dc 01       	movw	r26, r24
    327c:	cb 01       	movw	r24, r22
    327e:	9c 8b       	std	Y+20, r25	; 0x14
    3280:	8b 8b       	std	Y+19, r24	; 0x13
    3282:	8b 89       	ldd	r24, Y+19	; 0x13
    3284:	9c 89       	ldd	r25, Y+20	; 0x14
    3286:	98 8b       	std	Y+16, r25	; 0x10
    3288:	8f 87       	std	Y+15, r24	; 0x0f
    328a:	8f 85       	ldd	r24, Y+15	; 0x0f
    328c:	98 89       	ldd	r25, Y+16	; 0x10
    328e:	01 97       	sbiw	r24, 0x01	; 1
    3290:	f1 f7       	brne	.-4      	; 0x328e <buzzer+0x590>
    3292:	98 8b       	std	Y+16, r25	; 0x10
    3294:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(200);
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_HIGH);
    3296:	82 e0       	ldi	r24, 0x02	; 2
    3298:	63 e0       	ldi	r22, 0x03	; 3
    329a:	41 e0       	ldi	r20, 0x01	; 1
    329c:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    32a0:	80 e0       	ldi	r24, 0x00	; 0
    32a2:	90 e0       	ldi	r25, 0x00	; 0
    32a4:	aa e7       	ldi	r26, 0x7A	; 122
    32a6:	b4 e4       	ldi	r27, 0x44	; 68
    32a8:	8b 87       	std	Y+11, r24	; 0x0b
    32aa:	9c 87       	std	Y+12, r25	; 0x0c
    32ac:	ad 87       	std	Y+13, r26	; 0x0d
    32ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    32b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    32b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    32b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    32b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    32b8:	20 e0       	ldi	r18, 0x00	; 0
    32ba:	30 e0       	ldi	r19, 0x00	; 0
    32bc:	4a ef       	ldi	r20, 0xFA	; 250
    32be:	54 e4       	ldi	r21, 0x44	; 68
    32c0:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    32c4:	dc 01       	movw	r26, r24
    32c6:	cb 01       	movw	r24, r22
    32c8:	8f 83       	std	Y+7, r24	; 0x07
    32ca:	98 87       	std	Y+8, r25	; 0x08
    32cc:	a9 87       	std	Y+9, r26	; 0x09
    32ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    32d0:	6f 81       	ldd	r22, Y+7	; 0x07
    32d2:	78 85       	ldd	r23, Y+8	; 0x08
    32d4:	89 85       	ldd	r24, Y+9	; 0x09
    32d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    32d8:	20 e0       	ldi	r18, 0x00	; 0
    32da:	30 e0       	ldi	r19, 0x00	; 0
    32dc:	40 e8       	ldi	r20, 0x80	; 128
    32de:	5f e3       	ldi	r21, 0x3F	; 63
    32e0:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    32e4:	88 23       	and	r24, r24
    32e6:	2c f4       	brge	.+10     	; 0x32f2 <buzzer+0x5f4>
		__ticks = 1;
    32e8:	81 e0       	ldi	r24, 0x01	; 1
    32ea:	90 e0       	ldi	r25, 0x00	; 0
    32ec:	9e 83       	std	Y+6, r25	; 0x06
    32ee:	8d 83       	std	Y+5, r24	; 0x05
    32f0:	3f c0       	rjmp	.+126    	; 0x3370 <buzzer+0x672>
	else if (__tmp > 65535)
    32f2:	6f 81       	ldd	r22, Y+7	; 0x07
    32f4:	78 85       	ldd	r23, Y+8	; 0x08
    32f6:	89 85       	ldd	r24, Y+9	; 0x09
    32f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    32fa:	20 e0       	ldi	r18, 0x00	; 0
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	4f e7       	ldi	r20, 0x7F	; 127
    3300:	57 e4       	ldi	r21, 0x47	; 71
    3302:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3306:	18 16       	cp	r1, r24
    3308:	4c f5       	brge	.+82     	; 0x335c <buzzer+0x65e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    330a:	6b 85       	ldd	r22, Y+11	; 0x0b
    330c:	7c 85       	ldd	r23, Y+12	; 0x0c
    330e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3310:	9e 85       	ldd	r25, Y+14	; 0x0e
    3312:	20 e0       	ldi	r18, 0x00	; 0
    3314:	30 e0       	ldi	r19, 0x00	; 0
    3316:	40 e2       	ldi	r20, 0x20	; 32
    3318:	51 e4       	ldi	r21, 0x41	; 65
    331a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    331e:	dc 01       	movw	r26, r24
    3320:	cb 01       	movw	r24, r22
    3322:	bc 01       	movw	r22, r24
    3324:	cd 01       	movw	r24, r26
    3326:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    332a:	dc 01       	movw	r26, r24
    332c:	cb 01       	movw	r24, r22
    332e:	9e 83       	std	Y+6, r25	; 0x06
    3330:	8d 83       	std	Y+5, r24	; 0x05
    3332:	0f c0       	rjmp	.+30     	; 0x3352 <buzzer+0x654>
    3334:	88 ec       	ldi	r24, 0xC8	; 200
    3336:	90 e0       	ldi	r25, 0x00	; 0
    3338:	9c 83       	std	Y+4, r25	; 0x04
    333a:	8b 83       	std	Y+3, r24	; 0x03
    333c:	8b 81       	ldd	r24, Y+3	; 0x03
    333e:	9c 81       	ldd	r25, Y+4	; 0x04
    3340:	01 97       	sbiw	r24, 0x01	; 1
    3342:	f1 f7       	brne	.-4      	; 0x3340 <buzzer+0x642>
    3344:	9c 83       	std	Y+4, r25	; 0x04
    3346:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3348:	8d 81       	ldd	r24, Y+5	; 0x05
    334a:	9e 81       	ldd	r25, Y+6	; 0x06
    334c:	01 97       	sbiw	r24, 0x01	; 1
    334e:	9e 83       	std	Y+6, r25	; 0x06
    3350:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3352:	8d 81       	ldd	r24, Y+5	; 0x05
    3354:	9e 81       	ldd	r25, Y+6	; 0x06
    3356:	00 97       	sbiw	r24, 0x00	; 0
    3358:	69 f7       	brne	.-38     	; 0x3334 <buzzer+0x636>
    335a:	14 c0       	rjmp	.+40     	; 0x3384 <buzzer+0x686>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    335c:	6f 81       	ldd	r22, Y+7	; 0x07
    335e:	78 85       	ldd	r23, Y+8	; 0x08
    3360:	89 85       	ldd	r24, Y+9	; 0x09
    3362:	9a 85       	ldd	r25, Y+10	; 0x0a
    3364:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3368:	dc 01       	movw	r26, r24
    336a:	cb 01       	movw	r24, r22
    336c:	9e 83       	std	Y+6, r25	; 0x06
    336e:	8d 83       	std	Y+5, r24	; 0x05
    3370:	8d 81       	ldd	r24, Y+5	; 0x05
    3372:	9e 81       	ldd	r25, Y+6	; 0x06
    3374:	9a 83       	std	Y+2, r25	; 0x02
    3376:	89 83       	std	Y+1, r24	; 0x01
    3378:	89 81       	ldd	r24, Y+1	; 0x01
    337a:	9a 81       	ldd	r25, Y+2	; 0x02
    337c:	01 97       	sbiw	r24, 0x01	; 1
    337e:	f1 f7       	brne	.-4      	; 0x337c <buzzer+0x67e>
    3380:	9a 83       	std	Y+2, r25	; 0x02
    3382:	89 83       	std	Y+1, r24	; 0x01
		_delay_ms(1000);
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_LOW);
    3384:	82 e0       	ldi	r24, 0x02	; 2
    3386:	63 e0       	ldi	r22, 0x03	; 3
    3388:	40 e0       	ldi	r20, 0x00	; 0
    338a:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
	}
}
    338e:	cb 5a       	subi	r28, 0xAB	; 171
    3390:	df 4f       	sbci	r29, 0xFF	; 255
    3392:	0f b6       	in	r0, 0x3f	; 63
    3394:	f8 94       	cli
    3396:	de bf       	out	0x3e, r29	; 62
    3398:	0f be       	out	0x3f, r0	; 63
    339a:	cd bf       	out	0x3d, r28	; 61
    339c:	cf 91       	pop	r28
    339e:	df 91       	pop	r29
    33a0:	1f 91       	pop	r17
    33a2:	0f 91       	pop	r16
    33a4:	08 95       	ret

000033a6 <GreenLed>:


void GreenLed (u8 state)
{
    33a6:	df 93       	push	r29
    33a8:	cf 93       	push	r28
    33aa:	0f 92       	push	r0
    33ac:	cd b7       	in	r28, 0x3d	; 61
    33ae:	de b7       	in	r29, 0x3e	; 62
    33b0:	89 83       	std	Y+1, r24	; 0x01
	Dio_voidSetPinValue(PRO_PORT,GreenLedPin,state);
    33b2:	82 e0       	ldi	r24, 0x02	; 2
    33b4:	61 e0       	ldi	r22, 0x01	; 1
    33b6:	49 81       	ldd	r20, Y+1	; 0x01
    33b8:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
}
    33bc:	0f 90       	pop	r0
    33be:	cf 91       	pop	r28
    33c0:	df 91       	pop	r29
    33c2:	08 95       	ret

000033c4 <redLed>:


void redLed (u8 state)
{
    33c4:	df 93       	push	r29
    33c6:	cf 93       	push	r28
    33c8:	0f 92       	push	r0
    33ca:	cd b7       	in	r28, 0x3d	; 61
    33cc:	de b7       	in	r29, 0x3e	; 62
    33ce:	89 83       	std	Y+1, r24	; 0x01
	Dio_voidSetPinValue(PRO_PORT,RedLedPin,state);
    33d0:	82 e0       	ldi	r24, 0x02	; 2
    33d2:	60 e0       	ldi	r22, 0x00	; 0
    33d4:	49 81       	ldd	r20, Y+1	; 0x01
    33d6:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
}
    33da:	0f 90       	pop	r0
    33dc:	cf 91       	pop	r28
    33de:	df 91       	pop	r29
    33e0:	08 95       	ret

000033e2 <Lights>:


void Lights (u8 state)
{
    33e2:	df 93       	push	r29
    33e4:	cf 93       	push	r28
    33e6:	0f 92       	push	r0
    33e8:	cd b7       	in	r28, 0x3d	; 61
    33ea:	de b7       	in	r29, 0x3e	; 62
    33ec:	89 83       	std	Y+1, r24	; 0x01
	Dio_voidSetPinValue(PRO_PORT,LightPin,state);
    33ee:	82 e0       	ldi	r24, 0x02	; 2
    33f0:	62 e0       	ldi	r22, 0x02	; 2
    33f2:	49 81       	ldd	r20, Y+1	; 0x01
    33f4:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
}
    33f8:	0f 90       	pop	r0
    33fa:	cf 91       	pop	r28
    33fc:	df 91       	pop	r29
    33fe:	08 95       	ret

00003400 <Fan>:


void Fan (u8 state)
{
    3400:	df 93       	push	r29
    3402:	cf 93       	push	r28
    3404:	0f 92       	push	r0
    3406:	cd b7       	in	r28, 0x3d	; 61
    3408:	de b7       	in	r29, 0x3e	; 62
    340a:	89 83       	std	Y+1, r24	; 0x01
	Dio_voidSetPinValue(PRO_PORT,FanPin,state);
    340c:	82 e0       	ldi	r24, 0x02	; 2
    340e:	64 e0       	ldi	r22, 0x04	; 4
    3410:	49 81       	ldd	r20, Y+1	; 0x01
    3412:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
}
    3416:	0f 90       	pop	r0
    3418:	cf 91       	pop	r28
    341a:	df 91       	pop	r29
    341c:	08 95       	ret

0000341e <AlarmThief>:


void AlarmThief (void)
{
    341e:	df 93       	push	r29
    3420:	cf 93       	push	r28
    3422:	cd b7       	in	r28, 0x3d	; 61
    3424:	de b7       	in	r29, 0x3e	; 62
    3426:	6e 97       	sbiw	r28, 0x1e	; 30
    3428:	0f b6       	in	r0, 0x3f	; 63
    342a:	f8 94       	cli
    342c:	de bf       	out	0x3e, r29	; 62
    342e:	0f be       	out	0x3f, r0	; 63
    3430:	cd bf       	out	0x3d, r28	; 61
	for (int i = 0; i < 10; ++i)
    3432:	1e 8e       	std	Y+30, r1	; 0x1e
    3434:	1d 8e       	std	Y+29, r1	; 0x1d
    3436:	f3 c0       	rjmp	.+486    	; 0x361e <AlarmThief+0x200>
	{
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_HIGH);
    3438:	82 e0       	ldi	r24, 0x02	; 2
    343a:	63 e0       	ldi	r22, 0x03	; 3
    343c:	41 e0       	ldi	r20, 0x01	; 1
    343e:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    3442:	80 e0       	ldi	r24, 0x00	; 0
    3444:	90 e0       	ldi	r25, 0x00	; 0
    3446:	a8 e4       	ldi	r26, 0x48	; 72
    3448:	b4 e4       	ldi	r27, 0x44	; 68
    344a:	89 8f       	std	Y+25, r24	; 0x19
    344c:	9a 8f       	std	Y+26, r25	; 0x1a
    344e:	ab 8f       	std	Y+27, r26	; 0x1b
    3450:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3452:	69 8d       	ldd	r22, Y+25	; 0x19
    3454:	7a 8d       	ldd	r23, Y+26	; 0x1a
    3456:	8b 8d       	ldd	r24, Y+27	; 0x1b
    3458:	9c 8d       	ldd	r25, Y+28	; 0x1c
    345a:	20 e0       	ldi	r18, 0x00	; 0
    345c:	30 e0       	ldi	r19, 0x00	; 0
    345e:	4a ef       	ldi	r20, 0xFA	; 250
    3460:	54 e4       	ldi	r21, 0x44	; 68
    3462:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3466:	dc 01       	movw	r26, r24
    3468:	cb 01       	movw	r24, r22
    346a:	8d 8b       	std	Y+21, r24	; 0x15
    346c:	9e 8b       	std	Y+22, r25	; 0x16
    346e:	af 8b       	std	Y+23, r26	; 0x17
    3470:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    3472:	6d 89       	ldd	r22, Y+21	; 0x15
    3474:	7e 89       	ldd	r23, Y+22	; 0x16
    3476:	8f 89       	ldd	r24, Y+23	; 0x17
    3478:	98 8d       	ldd	r25, Y+24	; 0x18
    347a:	20 e0       	ldi	r18, 0x00	; 0
    347c:	30 e0       	ldi	r19, 0x00	; 0
    347e:	40 e8       	ldi	r20, 0x80	; 128
    3480:	5f e3       	ldi	r21, 0x3F	; 63
    3482:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3486:	88 23       	and	r24, r24
    3488:	2c f4       	brge	.+10     	; 0x3494 <AlarmThief+0x76>
		__ticks = 1;
    348a:	81 e0       	ldi	r24, 0x01	; 1
    348c:	90 e0       	ldi	r25, 0x00	; 0
    348e:	9c 8b       	std	Y+20, r25	; 0x14
    3490:	8b 8b       	std	Y+19, r24	; 0x13
    3492:	3f c0       	rjmp	.+126    	; 0x3512 <AlarmThief+0xf4>
	else if (__tmp > 65535)
    3494:	6d 89       	ldd	r22, Y+21	; 0x15
    3496:	7e 89       	ldd	r23, Y+22	; 0x16
    3498:	8f 89       	ldd	r24, Y+23	; 0x17
    349a:	98 8d       	ldd	r25, Y+24	; 0x18
    349c:	20 e0       	ldi	r18, 0x00	; 0
    349e:	3f ef       	ldi	r19, 0xFF	; 255
    34a0:	4f e7       	ldi	r20, 0x7F	; 127
    34a2:	57 e4       	ldi	r21, 0x47	; 71
    34a4:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    34a8:	18 16       	cp	r1, r24
    34aa:	4c f5       	brge	.+82     	; 0x34fe <AlarmThief+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    34ac:	69 8d       	ldd	r22, Y+25	; 0x19
    34ae:	7a 8d       	ldd	r23, Y+26	; 0x1a
    34b0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    34b2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    34b4:	20 e0       	ldi	r18, 0x00	; 0
    34b6:	30 e0       	ldi	r19, 0x00	; 0
    34b8:	40 e2       	ldi	r20, 0x20	; 32
    34ba:	51 e4       	ldi	r21, 0x41	; 65
    34bc:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    34c0:	dc 01       	movw	r26, r24
    34c2:	cb 01       	movw	r24, r22
    34c4:	bc 01       	movw	r22, r24
    34c6:	cd 01       	movw	r24, r26
    34c8:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    34cc:	dc 01       	movw	r26, r24
    34ce:	cb 01       	movw	r24, r22
    34d0:	9c 8b       	std	Y+20, r25	; 0x14
    34d2:	8b 8b       	std	Y+19, r24	; 0x13
    34d4:	0f c0       	rjmp	.+30     	; 0x34f4 <AlarmThief+0xd6>
    34d6:	88 ec       	ldi	r24, 0xC8	; 200
    34d8:	90 e0       	ldi	r25, 0x00	; 0
    34da:	9a 8b       	std	Y+18, r25	; 0x12
    34dc:	89 8b       	std	Y+17, r24	; 0x11
    34de:	89 89       	ldd	r24, Y+17	; 0x11
    34e0:	9a 89       	ldd	r25, Y+18	; 0x12
    34e2:	01 97       	sbiw	r24, 0x01	; 1
    34e4:	f1 f7       	brne	.-4      	; 0x34e2 <AlarmThief+0xc4>
    34e6:	9a 8b       	std	Y+18, r25	; 0x12
    34e8:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    34ea:	8b 89       	ldd	r24, Y+19	; 0x13
    34ec:	9c 89       	ldd	r25, Y+20	; 0x14
    34ee:	01 97       	sbiw	r24, 0x01	; 1
    34f0:	9c 8b       	std	Y+20, r25	; 0x14
    34f2:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    34f4:	8b 89       	ldd	r24, Y+19	; 0x13
    34f6:	9c 89       	ldd	r25, Y+20	; 0x14
    34f8:	00 97       	sbiw	r24, 0x00	; 0
    34fa:	69 f7       	brne	.-38     	; 0x34d6 <AlarmThief+0xb8>
    34fc:	14 c0       	rjmp	.+40     	; 0x3526 <AlarmThief+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    34fe:	6d 89       	ldd	r22, Y+21	; 0x15
    3500:	7e 89       	ldd	r23, Y+22	; 0x16
    3502:	8f 89       	ldd	r24, Y+23	; 0x17
    3504:	98 8d       	ldd	r25, Y+24	; 0x18
    3506:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    350a:	dc 01       	movw	r26, r24
    350c:	cb 01       	movw	r24, r22
    350e:	9c 8b       	std	Y+20, r25	; 0x14
    3510:	8b 8b       	std	Y+19, r24	; 0x13
    3512:	8b 89       	ldd	r24, Y+19	; 0x13
    3514:	9c 89       	ldd	r25, Y+20	; 0x14
    3516:	98 8b       	std	Y+16, r25	; 0x10
    3518:	8f 87       	std	Y+15, r24	; 0x0f
    351a:	8f 85       	ldd	r24, Y+15	; 0x0f
    351c:	98 89       	ldd	r25, Y+16	; 0x10
    351e:	01 97       	sbiw	r24, 0x01	; 1
    3520:	f1 f7       	brne	.-4      	; 0x351e <AlarmThief+0x100>
    3522:	98 8b       	std	Y+16, r25	; 0x10
    3524:	8f 87       	std	Y+15, r24	; 0x0f
		_delay_ms(800);
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_LOW);
    3526:	82 e0       	ldi	r24, 0x02	; 2
    3528:	63 e0       	ldi	r22, 0x03	; 3
    352a:	40 e0       	ldi	r20, 0x00	; 0
    352c:	0e 94 a3 06 	call	0xd46	; 0xd46 <Dio_voidSetPinValue>
    3530:	80 e0       	ldi	r24, 0x00	; 0
    3532:	90 e0       	ldi	r25, 0x00	; 0
    3534:	a8 e4       	ldi	r26, 0x48	; 72
    3536:	b3 e4       	ldi	r27, 0x43	; 67
    3538:	8b 87       	std	Y+11, r24	; 0x0b
    353a:	9c 87       	std	Y+12, r25	; 0x0c
    353c:	ad 87       	std	Y+13, r26	; 0x0d
    353e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    3540:	6b 85       	ldd	r22, Y+11	; 0x0b
    3542:	7c 85       	ldd	r23, Y+12	; 0x0c
    3544:	8d 85       	ldd	r24, Y+13	; 0x0d
    3546:	9e 85       	ldd	r25, Y+14	; 0x0e
    3548:	20 e0       	ldi	r18, 0x00	; 0
    354a:	30 e0       	ldi	r19, 0x00	; 0
    354c:	4a ef       	ldi	r20, 0xFA	; 250
    354e:	54 e4       	ldi	r21, 0x44	; 68
    3550:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    3554:	dc 01       	movw	r26, r24
    3556:	cb 01       	movw	r24, r22
    3558:	8f 83       	std	Y+7, r24	; 0x07
    355a:	98 87       	std	Y+8, r25	; 0x08
    355c:	a9 87       	std	Y+9, r26	; 0x09
    355e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    3560:	6f 81       	ldd	r22, Y+7	; 0x07
    3562:	78 85       	ldd	r23, Y+8	; 0x08
    3564:	89 85       	ldd	r24, Y+9	; 0x09
    3566:	9a 85       	ldd	r25, Y+10	; 0x0a
    3568:	20 e0       	ldi	r18, 0x00	; 0
    356a:	30 e0       	ldi	r19, 0x00	; 0
    356c:	40 e8       	ldi	r20, 0x80	; 128
    356e:	5f e3       	ldi	r21, 0x3F	; 63
    3570:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    3574:	88 23       	and	r24, r24
    3576:	2c f4       	brge	.+10     	; 0x3582 <AlarmThief+0x164>
		__ticks = 1;
    3578:	81 e0       	ldi	r24, 0x01	; 1
    357a:	90 e0       	ldi	r25, 0x00	; 0
    357c:	9e 83       	std	Y+6, r25	; 0x06
    357e:	8d 83       	std	Y+5, r24	; 0x05
    3580:	3f c0       	rjmp	.+126    	; 0x3600 <AlarmThief+0x1e2>
	else if (__tmp > 65535)
    3582:	6f 81       	ldd	r22, Y+7	; 0x07
    3584:	78 85       	ldd	r23, Y+8	; 0x08
    3586:	89 85       	ldd	r24, Y+9	; 0x09
    3588:	9a 85       	ldd	r25, Y+10	; 0x0a
    358a:	20 e0       	ldi	r18, 0x00	; 0
    358c:	3f ef       	ldi	r19, 0xFF	; 255
    358e:	4f e7       	ldi	r20, 0x7F	; 127
    3590:	57 e4       	ldi	r21, 0x47	; 71
    3592:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    3596:	18 16       	cp	r1, r24
    3598:	4c f5       	brge	.+82     	; 0x35ec <AlarmThief+0x1ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    359a:	6b 85       	ldd	r22, Y+11	; 0x0b
    359c:	7c 85       	ldd	r23, Y+12	; 0x0c
    359e:	8d 85       	ldd	r24, Y+13	; 0x0d
    35a0:	9e 85       	ldd	r25, Y+14	; 0x0e
    35a2:	20 e0       	ldi	r18, 0x00	; 0
    35a4:	30 e0       	ldi	r19, 0x00	; 0
    35a6:	40 e2       	ldi	r20, 0x20	; 32
    35a8:	51 e4       	ldi	r21, 0x41	; 65
    35aa:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    35ae:	dc 01       	movw	r26, r24
    35b0:	cb 01       	movw	r24, r22
    35b2:	bc 01       	movw	r22, r24
    35b4:	cd 01       	movw	r24, r26
    35b6:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35ba:	dc 01       	movw	r26, r24
    35bc:	cb 01       	movw	r24, r22
    35be:	9e 83       	std	Y+6, r25	; 0x06
    35c0:	8d 83       	std	Y+5, r24	; 0x05
    35c2:	0f c0       	rjmp	.+30     	; 0x35e2 <AlarmThief+0x1c4>
    35c4:	88 ec       	ldi	r24, 0xC8	; 200
    35c6:	90 e0       	ldi	r25, 0x00	; 0
    35c8:	9c 83       	std	Y+4, r25	; 0x04
    35ca:	8b 83       	std	Y+3, r24	; 0x03
    35cc:	8b 81       	ldd	r24, Y+3	; 0x03
    35ce:	9c 81       	ldd	r25, Y+4	; 0x04
    35d0:	01 97       	sbiw	r24, 0x01	; 1
    35d2:	f1 f7       	brne	.-4      	; 0x35d0 <AlarmThief+0x1b2>
    35d4:	9c 83       	std	Y+4, r25	; 0x04
    35d6:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    35d8:	8d 81       	ldd	r24, Y+5	; 0x05
    35da:	9e 81       	ldd	r25, Y+6	; 0x06
    35dc:	01 97       	sbiw	r24, 0x01	; 1
    35de:	9e 83       	std	Y+6, r25	; 0x06
    35e0:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    35e2:	8d 81       	ldd	r24, Y+5	; 0x05
    35e4:	9e 81       	ldd	r25, Y+6	; 0x06
    35e6:	00 97       	sbiw	r24, 0x00	; 0
    35e8:	69 f7       	brne	.-38     	; 0x35c4 <AlarmThief+0x1a6>
    35ea:	14 c0       	rjmp	.+40     	; 0x3614 <AlarmThief+0x1f6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    35ec:	6f 81       	ldd	r22, Y+7	; 0x07
    35ee:	78 85       	ldd	r23, Y+8	; 0x08
    35f0:	89 85       	ldd	r24, Y+9	; 0x09
    35f2:	9a 85       	ldd	r25, Y+10	; 0x0a
    35f4:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    35f8:	dc 01       	movw	r26, r24
    35fa:	cb 01       	movw	r24, r22
    35fc:	9e 83       	std	Y+6, r25	; 0x06
    35fe:	8d 83       	std	Y+5, r24	; 0x05
    3600:	8d 81       	ldd	r24, Y+5	; 0x05
    3602:	9e 81       	ldd	r25, Y+6	; 0x06
    3604:	9a 83       	std	Y+2, r25	; 0x02
    3606:	89 83       	std	Y+1, r24	; 0x01
    3608:	89 81       	ldd	r24, Y+1	; 0x01
    360a:	9a 81       	ldd	r25, Y+2	; 0x02
    360c:	01 97       	sbiw	r24, 0x01	; 1
    360e:	f1 f7       	brne	.-4      	; 0x360c <AlarmThief+0x1ee>
    3610:	9a 83       	std	Y+2, r25	; 0x02
    3612:	89 83       	std	Y+1, r24	; 0x01
}


void AlarmThief (void)
{
	for (int i = 0; i < 10; ++i)
    3614:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3616:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3618:	01 96       	adiw	r24, 0x01	; 1
    361a:	9e 8f       	std	Y+30, r25	; 0x1e
    361c:	8d 8f       	std	Y+29, r24	; 0x1d
    361e:	8d 8d       	ldd	r24, Y+29	; 0x1d
    3620:	9e 8d       	ldd	r25, Y+30	; 0x1e
    3622:	8a 30       	cpi	r24, 0x0A	; 10
    3624:	91 05       	cpc	r25, r1
    3626:	0c f4       	brge	.+2      	; 0x362a <AlarmThief+0x20c>
    3628:	07 cf       	rjmp	.-498    	; 0x3438 <AlarmThief+0x1a>
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_HIGH);
		_delay_ms(800);
		Dio_voidSetPinValue(PRO_PORT,BuzzerPin,DIO_LOW);
		_delay_ms(200);
	}
}
    362a:	6e 96       	adiw	r28, 0x1e	; 30
    362c:	0f b6       	in	r0, 0x3f	; 63
    362e:	f8 94       	cli
    3630:	de bf       	out	0x3e, r29	; 62
    3632:	0f be       	out	0x3f, r0	; 63
    3634:	cd bf       	out	0x3d, r28	; 61
    3636:	cf 91       	pop	r28
    3638:	df 91       	pop	r29
    363a:	08 95       	ret

0000363c <Gate>:


void Gate (u8 state)
{
    363c:	df 93       	push	r29
    363e:	cf 93       	push	r28
    3640:	0f 92       	push	r0
    3642:	cd b7       	in	r28, 0x3d	; 61
    3644:	de b7       	in	r29, 0x3e	; 62
    3646:	89 83       	std	Y+1, r24	; 0x01

	if(state==Open)
    3648:	89 81       	ldd	r24, Y+1	; 0x01
    364a:	81 30       	cpi	r24, 0x01	; 1
    364c:	69 f4       	brne	.+26     	; 0x3668 <Gate+0x2c>
	{
		if (Stpr_previous_state==Close)
    364e:	80 91 a9 01 	lds	r24, 0x01A9
    3652:	82 30       	cpi	r24, 0x02	; 2
    3654:	c1 f4       	brne	.+48     	; 0x3686 <Gate+0x4a>
		{
			Stpr_voidMove(120,CW);
    3656:	88 e7       	ldi	r24, 0x78	; 120
    3658:	90 e0       	ldi	r25, 0x00	; 0
    365a:	61 e0       	ldi	r22, 0x01	; 1
    365c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Stpr_voidMove>
			Stpr_previous_state=Open;
    3660:	81 e0       	ldi	r24, 0x01	; 1
    3662:	80 93 a9 01 	sts	0x01A9, r24
    3666:	0f c0       	rjmp	.+30     	; 0x3686 <Gate+0x4a>
		}
	}
	else if(state==Close)
    3668:	89 81       	ldd	r24, Y+1	; 0x01
    366a:	82 30       	cpi	r24, 0x02	; 2
    366c:	61 f4       	brne	.+24     	; 0x3686 <Gate+0x4a>
	{
		if (Stpr_previous_state==Open)
    366e:	80 91 a9 01 	lds	r24, 0x01A9
    3672:	81 30       	cpi	r24, 0x01	; 1
    3674:	41 f4       	brne	.+16     	; 0x3686 <Gate+0x4a>
		{
			Stpr_voidMove(120,CCW);
    3676:	88 e7       	ldi	r24, 0x78	; 120
    3678:	90 e0       	ldi	r25, 0x00	; 0
    367a:	62 e0       	ldi	r22, 0x02	; 2
    367c:	0e 94 ed 0e 	call	0x1dda	; 0x1dda <Stpr_voidMove>
			Stpr_previous_state=Close;
    3680:	82 e0       	ldi	r24, 0x02	; 2
    3682:	80 93 a9 01 	sts	0x01A9, r24
		}
	}
}
    3686:	0f 90       	pop	r0
    3688:	cf 91       	pop	r28
    368a:	df 91       	pop	r29
    368c:	08 95       	ret

0000368e <password_check>:


u8 password_check(u8 y)
{
    368e:	df 93       	push	r29
    3690:	cf 93       	push	r28
    3692:	cd b7       	in	r28, 0x3d	; 61
    3694:	de b7       	in	r29, 0x3e	; 62
    3696:	2c 97       	sbiw	r28, 0x0c	; 12
    3698:	0f b6       	in	r0, 0x3f	; 63
    369a:	f8 94       	cli
    369c:	de bf       	out	0x3e, r29	; 62
    369e:	0f be       	out	0x3f, r0	; 63
    36a0:	cd bf       	out	0x3d, r28	; 61
    36a2:	8b 87       	std	Y+11, r24	; 0x0b
	u8 usernum=y;
    36a4:	8b 85       	ldd	r24, Y+11	; 0x0b
    36a6:	8a 83       	std	Y+2, r24	; 0x02
	Lcd_voidSendCommand(clear);
    36a8:	81 e0       	ldi	r24, 0x01	; 1
    36aa:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
	Lcd_VoidWriteString("Locked ");
    36ae:	81 e7       	ldi	r24, 0x71	; 113
    36b0:	90 e0       	ldi	r25, 0x00	; 0
    36b2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
	Lcd_GoToXY(1,0);
    36b6:	81 e0       	ldi	r24, 0x01	; 1
    36b8:	60 e0       	ldi	r22, 0x00	; 0
    36ba:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <Lcd_GoToXY>
	Lcd_VoidWriteString("Type Password ");
    36be:	89 e7       	ldi	r24, 0x79	; 121
    36c0:	90 e0       	ldi	r25, 0x00	; 0
    36c2:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
	for (u8 i=0;i<3;i++)
    36c6:	19 82       	std	Y+1, r1	; 0x01
    36c8:	3e c0       	rjmp	.+124    	; 0x3746 <password_check+0xb8>
	{
		u8 Password [PASS_SIZE];
		UART_VoidRecString(Password);
    36ca:	ce 01       	movw	r24, r28
    36cc:	03 96       	adiw	r24, 0x03	; 3
    36ce:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_VoidRecString>
		if(strcmp(Password, loginPass[usernum]) == 0)
    36d2:	29 e5       	ldi	r18, 0x59	; 89
    36d4:	31 e0       	ldi	r19, 0x01	; 1
    36d6:	8a 81       	ldd	r24, Y+2	; 0x02
    36d8:	88 2f       	mov	r24, r24
    36da:	90 e0       	ldi	r25, 0x00	; 0
    36dc:	88 0f       	add	r24, r24
    36de:	99 1f       	adc	r25, r25
    36e0:	88 0f       	add	r24, r24
    36e2:	99 1f       	adc	r25, r25
    36e4:	88 0f       	add	r24, r24
    36e6:	99 1f       	adc	r25, r25
    36e8:	28 0f       	add	r18, r24
    36ea:	39 1f       	adc	r19, r25
    36ec:	ce 01       	movw	r24, r28
    36ee:	03 96       	adiw	r24, 0x03	; 3
    36f0:	b9 01       	movw	r22, r18
    36f2:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <strcmp>
    36f6:	00 97       	sbiw	r24, 0x00	; 0
    36f8:	b1 f4       	brne	.+44     	; 0x3726 <password_check+0x98>
		{
			Lcd_voidSendCommand(clear);
    36fa:	81 e0       	ldi	r24, 0x01	; 1
    36fc:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
			Lcd_VoidWriteString("welcome");
    3700:	88 e8       	ldi	r24, 0x88	; 136
    3702:	90 e0       	ldi	r25, 0x00	; 0
    3704:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
			GreenLed(On);
    3708:	81 e0       	ldi	r24, 0x01	; 1
    370a:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <GreenLed>
			redLed(Off);
    370e:	80 e0       	ldi	r24, 0x00	; 0
    3710:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <redLed>
			buzzer(Right);
    3714:	81 e0       	ldi	r24, 0x01	; 1
    3716:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <buzzer>
			Gate(Open);
    371a:	81 e0       	ldi	r24, 0x01	; 1
    371c:	0e 94 1e 1b 	call	0x363c	; 0x363c <Gate>
			return Right;
    3720:	81 e0       	ldi	r24, 0x01	; 1
    3722:	8c 87       	std	Y+12, r24	; 0x0c
    3724:	16 c0       	rjmp	.+44     	; 0x3752 <password_check+0xc4>
		}
		if (i<2)
    3726:	89 81       	ldd	r24, Y+1	; 0x01
    3728:	82 30       	cpi	r24, 0x02	; 2
    372a:	50 f4       	brcc	.+20     	; 0x3740 <password_check+0xb2>
		{
			Lcd_voidSendCommand(clear);
    372c:	81 e0       	ldi	r24, 0x01	; 1
    372e:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
			Lcd_VoidWriteString("Try again ");
    3732:	80 e9       	ldi	r24, 0x90	; 144
    3734:	90 e0       	ldi	r25, 0x00	; 0
    3736:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
			buzzer(Wrong);
    373a:	82 e0       	ldi	r24, 0x02	; 2
    373c:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <buzzer>
	u8 usernum=y;
	Lcd_voidSendCommand(clear);
	Lcd_VoidWriteString("Locked ");
	Lcd_GoToXY(1,0);
	Lcd_VoidWriteString("Type Password ");
	for (u8 i=0;i<3;i++)
    3740:	89 81       	ldd	r24, Y+1	; 0x01
    3742:	8f 5f       	subi	r24, 0xFF	; 255
    3744:	89 83       	std	Y+1, r24	; 0x01
    3746:	89 81       	ldd	r24, Y+1	; 0x01
    3748:	83 30       	cpi	r24, 0x03	; 3
    374a:	08 f4       	brcc	.+2      	; 0x374e <password_check+0xc0>
    374c:	be cf       	rjmp	.-132    	; 0x36ca <password_check+0x3c>
			Lcd_voidSendCommand(clear);
			Lcd_VoidWriteString("Try again ");
			buzzer(Wrong);
		}
	}
	return Wrong;
    374e:	82 e0       	ldi	r24, 0x02	; 2
    3750:	8c 87       	std	Y+12, r24	; 0x0c
    3752:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    3754:	2c 96       	adiw	r28, 0x0c	; 12
    3756:	0f b6       	in	r0, 0x3f	; 63
    3758:	f8 94       	cli
    375a:	de bf       	out	0x3e, r29	; 62
    375c:	0f be       	out	0x3f, r0	; 63
    375e:	cd bf       	out	0x3d, r28	; 61
    3760:	cf 91       	pop	r28
    3762:	df 91       	pop	r29
    3764:	08 95       	ret

00003766 <user_check>:


u8 user_check(void)
{
    3766:	df 93       	push	r29
    3768:	cf 93       	push	r28
    376a:	cd b7       	in	r28, 0x3d	; 61
    376c:	de b7       	in	r29, 0x3e	; 62
    376e:	2c 97       	sbiw	r28, 0x0c	; 12
    3770:	0f b6       	in	r0, 0x3f	; 63
    3772:	f8 94       	cli
    3774:	de bf       	out	0x3e, r29	; 62
    3776:	0f be       	out	0x3f, r0	; 63
    3778:	cd bf       	out	0x3d, r28	; 61
	Lcd_voidSendCommand(clear);
    377a:	81 e0       	ldi	r24, 0x01	; 1
    377c:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
	Lcd_VoidWriteString("Locked ");
    3780:	81 e7       	ldi	r24, 0x71	; 113
    3782:	90 e0       	ldi	r25, 0x00	; 0
    3784:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
	Lcd_GoToXY(1,0);
    3788:	81 e0       	ldi	r24, 0x01	; 1
    378a:	60 e0       	ldi	r22, 0x00	; 0
    378c:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <Lcd_GoToXY>
	Lcd_VoidWriteString("Type username ");
    3790:	8b e9       	ldi	r24, 0x9B	; 155
    3792:	90 e0       	ldi	r25, 0x00	; 0
    3794:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
	for (u8 i=0;i<3;i++)
    3798:	1b 82       	std	Y+3, r1	; 0x03
    379a:	3a c0       	rjmp	.+116    	; 0x3810 <user_check+0xaa>
	{
		u8 user [USER_SIZE];
		UART_VoidRecString(user);
    379c:	ce 01       	movw	r24, r28
    379e:	04 96       	adiw	r24, 0x04	; 4
    37a0:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_VoidRecString>
		for(u8 y=0;y<10;y++)
    37a4:	1a 82       	std	Y+2, r1	; 0x02
    37a6:	21 c0       	rjmp	.+66     	; 0x37ea <user_check+0x84>
		{
			if(strcmp(user, loginUsers[y]) == 0)
    37a8:	29 e0       	ldi	r18, 0x09	; 9
    37aa:	31 e0       	ldi	r19, 0x01	; 1
    37ac:	8a 81       	ldd	r24, Y+2	; 0x02
    37ae:	88 2f       	mov	r24, r24
    37b0:	90 e0       	ldi	r25, 0x00	; 0
    37b2:	88 0f       	add	r24, r24
    37b4:	99 1f       	adc	r25, r25
    37b6:	88 0f       	add	r24, r24
    37b8:	99 1f       	adc	r25, r25
    37ba:	88 0f       	add	r24, r24
    37bc:	99 1f       	adc	r25, r25
    37be:	28 0f       	add	r18, r24
    37c0:	39 1f       	adc	r19, r25
    37c2:	ce 01       	movw	r24, r28
    37c4:	04 96       	adiw	r24, 0x04	; 4
    37c6:	b9 01       	movw	r22, r18
    37c8:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <strcmp>
    37cc:	00 97       	sbiw	r24, 0x00	; 0
    37ce:	51 f4       	brne	.+20     	; 0x37e4 <user_check+0x7e>
			{
				buzzer(Right);
    37d0:	81 e0       	ldi	r24, 0x01	; 1
    37d2:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <buzzer>
				u8 State= password_check(y);
    37d6:	8a 81       	ldd	r24, Y+2	; 0x02
    37d8:	0e 94 47 1b 	call	0x368e	; 0x368e <password_check>
    37dc:	89 83       	std	Y+1, r24	; 0x01
				return State;
    37de:	89 81       	ldd	r24, Y+1	; 0x01
    37e0:	8c 87       	std	Y+12, r24	; 0x0c
    37e2:	1b c0       	rjmp	.+54     	; 0x381a <user_check+0xb4>
	Lcd_VoidWriteString("Type username ");
	for (u8 i=0;i<3;i++)
	{
		u8 user [USER_SIZE];
		UART_VoidRecString(user);
		for(u8 y=0;y<10;y++)
    37e4:	8a 81       	ldd	r24, Y+2	; 0x02
    37e6:	8f 5f       	subi	r24, 0xFF	; 255
    37e8:	8a 83       	std	Y+2, r24	; 0x02
    37ea:	8a 81       	ldd	r24, Y+2	; 0x02
    37ec:	8a 30       	cpi	r24, 0x0A	; 10
    37ee:	e0 f2       	brcs	.-72     	; 0x37a8 <user_check+0x42>
				buzzer(Right);
				u8 State= password_check(y);
				return State;
			}
		}
		if (i<2)
    37f0:	8b 81       	ldd	r24, Y+3	; 0x03
    37f2:	82 30       	cpi	r24, 0x02	; 2
    37f4:	50 f4       	brcc	.+20     	; 0x380a <user_check+0xa4>
		{
			Lcd_voidSendCommand(clear);
    37f6:	81 e0       	ldi	r24, 0x01	; 1
    37f8:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
			Lcd_VoidWriteString("Try again ");
    37fc:	80 e9       	ldi	r24, 0x90	; 144
    37fe:	90 e0       	ldi	r25, 0x00	; 0
    3800:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
			buzzer(Wrong);
    3804:	82 e0       	ldi	r24, 0x02	; 2
    3806:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <buzzer>
{
	Lcd_voidSendCommand(clear);
	Lcd_VoidWriteString("Locked ");
	Lcd_GoToXY(1,0);
	Lcd_VoidWriteString("Type username ");
	for (u8 i=0;i<3;i++)
    380a:	8b 81       	ldd	r24, Y+3	; 0x03
    380c:	8f 5f       	subi	r24, 0xFF	; 255
    380e:	8b 83       	std	Y+3, r24	; 0x03
    3810:	8b 81       	ldd	r24, Y+3	; 0x03
    3812:	83 30       	cpi	r24, 0x03	; 3
    3814:	18 f2       	brcs	.-122    	; 0x379c <user_check+0x36>
			Lcd_voidSendCommand(clear);
			Lcd_VoidWriteString("Try again ");
			buzzer(Wrong);
		}
	}
	return Wrong;
    3816:	82 e0       	ldi	r24, 0x02	; 2
    3818:	8c 87       	std	Y+12, r24	; 0x0c
    381a:	8c 85       	ldd	r24, Y+12	; 0x0c
}
    381c:	2c 96       	adiw	r28, 0x0c	; 12
    381e:	0f b6       	in	r0, 0x3f	; 63
    3820:	f8 94       	cli
    3822:	de bf       	out	0x3e, r29	; 62
    3824:	0f be       	out	0x3f, r0	; 63
    3826:	cd bf       	out	0x3d, r28	; 61
    3828:	cf 91       	pop	r28
    382a:	df 91       	pop	r29
    382c:	08 95       	ret

0000382e <HomeOpen>:


u8 HomeOpen (void)
{
    382e:	df 93       	push	r29
    3830:	cf 93       	push	r28
    3832:	cd b7       	in	r28, 0x3d	; 61
    3834:	de b7       	in	r29, 0x3e	; 62
    3836:	6c 97       	sbiw	r28, 0x1c	; 28
    3838:	0f b6       	in	r0, 0x3f	; 63
    383a:	f8 94       	cli
    383c:	de bf       	out	0x3e, r29	; 62
    383e:	0f be       	out	0x3f, r0	; 63
    3840:	cd bf       	out	0x3d, r28	; 61
	u8 command[14];
	Lcd_voidSendCommand(clear);
    3842:	81 e0       	ldi	r24, 0x01	; 1
    3844:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
	Lcd_VoidWriteString("opened ");
    3848:	8a ea       	ldi	r24, 0xAA	; 170
    384a:	90 e0       	ldi	r25, 0x00	; 0
    384c:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
	while(1)
	{
		UART_VoidRecString(command);
    3850:	ce 01       	movw	r24, r28
    3852:	0f 96       	adiw	r24, 0x0f	; 15
    3854:	0e 94 a0 15 	call	0x2b40	; 0x2b40 <UART_VoidRecString>

		if(strcmp(command, "Light_on")==0)
    3858:	ce 01       	movw	r24, r28
    385a:	0f 96       	adiw	r24, 0x0f	; 15
    385c:	22 eb       	ldi	r18, 0xB2	; 178
    385e:	30 e0       	ldi	r19, 0x00	; 0
    3860:	b9 01       	movw	r22, r18
    3862:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <strcmp>
    3866:	00 97       	sbiw	r24, 0x00	; 0
    3868:	21 f4       	brne	.+8      	; 0x3872 <HomeOpen+0x44>
			Lights(On);
    386a:	81 e0       	ldi	r24, 0x01	; 1
    386c:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <Lights>
    3870:	ef cf       	rjmp	.-34     	; 0x3850 <HomeOpen+0x22>
		else if(strcmp(command, "Light_off")==0)
    3872:	ce 01       	movw	r24, r28
    3874:	0f 96       	adiw	r24, 0x0f	; 15
    3876:	2b eb       	ldi	r18, 0xBB	; 187
    3878:	30 e0       	ldi	r19, 0x00	; 0
    387a:	b9 01       	movw	r22, r18
    387c:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <strcmp>
    3880:	00 97       	sbiw	r24, 0x00	; 0
    3882:	21 f4       	brne	.+8      	; 0x388c <HomeOpen+0x5e>
			Lights(Off);
    3884:	80 e0       	ldi	r24, 0x00	; 0
    3886:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <Lights>
    388a:	e2 cf       	rjmp	.-60     	; 0x3850 <HomeOpen+0x22>
		else if(strcmp(command, "Fan_on")==0)
    388c:	ce 01       	movw	r24, r28
    388e:	0f 96       	adiw	r24, 0x0f	; 15
    3890:	25 ec       	ldi	r18, 0xC5	; 197
    3892:	30 e0       	ldi	r19, 0x00	; 0
    3894:	b9 01       	movw	r22, r18
    3896:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <strcmp>
    389a:	00 97       	sbiw	r24, 0x00	; 0
    389c:	21 f4       	brne	.+8      	; 0x38a6 <HomeOpen+0x78>
			Fan(On);
    389e:	81 e0       	ldi	r24, 0x01	; 1
    38a0:	0e 94 00 1a 	call	0x3400	; 0x3400 <Fan>
    38a4:	d5 cf       	rjmp	.-86     	; 0x3850 <HomeOpen+0x22>
		else if(strcmp(command, "Fan_off")==0)
    38a6:	ce 01       	movw	r24, r28
    38a8:	0f 96       	adiw	r24, 0x0f	; 15
    38aa:	2c ec       	ldi	r18, 0xCC	; 204
    38ac:	30 e0       	ldi	r19, 0x00	; 0
    38ae:	b9 01       	movw	r22, r18
    38b0:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <strcmp>
    38b4:	00 97       	sbiw	r24, 0x00	; 0
    38b6:	21 f4       	brne	.+8      	; 0x38c0 <HomeOpen+0x92>
			Fan(Off);
    38b8:	80 e0       	ldi	r24, 0x00	; 0
    38ba:	0e 94 00 1a 	call	0x3400	; 0x3400 <Fan>
    38be:	c8 cf       	rjmp	.-112    	; 0x3850 <HomeOpen+0x22>
		else if(strcmp(command, "Gate_open")==0)
    38c0:	ce 01       	movw	r24, r28
    38c2:	0f 96       	adiw	r24, 0x0f	; 15
    38c4:	24 ed       	ldi	r18, 0xD4	; 212
    38c6:	30 e0       	ldi	r19, 0x00	; 0
    38c8:	b9 01       	movw	r22, r18
    38ca:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <strcmp>
    38ce:	00 97       	sbiw	r24, 0x00	; 0
    38d0:	21 f4       	brne	.+8      	; 0x38da <HomeOpen+0xac>
		    Gate(Open);
    38d2:	81 e0       	ldi	r24, 0x01	; 1
    38d4:	0e 94 1e 1b 	call	0x363c	; 0x363c <Gate>
    38d8:	bb cf       	rjmp	.-138    	; 0x3850 <HomeOpen+0x22>
		else if(strcmp(command, "Gate_close")==0)
    38da:	ce 01       	movw	r24, r28
    38dc:	0f 96       	adiw	r24, 0x0f	; 15
    38de:	2e ed       	ldi	r18, 0xDE	; 222
    38e0:	30 e0       	ldi	r19, 0x00	; 0
    38e2:	b9 01       	movw	r22, r18
    38e4:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <strcmp>
    38e8:	00 97       	sbiw	r24, 0x00	; 0
    38ea:	21 f4       	brne	.+8      	; 0x38f4 <HomeOpen+0xc6>
			Gate(Close);
    38ec:	82 e0       	ldi	r24, 0x02	; 2
    38ee:	0e 94 1e 1b 	call	0x363c	; 0x363c <Gate>
    38f2:	ae cf       	rjmp	.-164    	; 0x3850 <HomeOpen+0x22>
		else if(strcmp(command, "Home_lock")==0)
    38f4:	ce 01       	movw	r24, r28
    38f6:	0f 96       	adiw	r24, 0x0f	; 15
    38f8:	29 ee       	ldi	r18, 0xE9	; 233
    38fa:	30 e0       	ldi	r19, 0x00	; 0
    38fc:	b9 01       	movw	r22, r18
    38fe:	0e 94 c2 1d 	call	0x3b84	; 0x3b84 <strcmp>
    3902:	00 97       	sbiw	r24, 0x00	; 0
    3904:	59 f5       	brne	.+86     	; 0x395c <HomeOpen+0x12e>
		{
			GreenLed(Off);
    3906:	80 e0       	ldi	r24, 0x00	; 0
    3908:	0e 94 d3 19 	call	0x33a6	; 0x33a6 <GreenLed>
			redLed(On);
    390c:	81 e0       	ldi	r24, 0x01	; 1
    390e:	0e 94 e2 19 	call	0x33c4	; 0x33c4 <redLed>
			Lights(Off);
    3912:	80 e0       	ldi	r24, 0x00	; 0
    3914:	0e 94 f1 19 	call	0x33e2	; 0x33e2 <Lights>
			Fan(Off);
    3918:	80 e0       	ldi	r24, 0x00	; 0
    391a:	0e 94 00 1a 	call	0x3400	; 0x3400 <Fan>
			buzzer(Right);
    391e:	81 e0       	ldi	r24, 0x01	; 1
    3920:	0e 94 7f 16 	call	0x2cfe	; 0x2cfe <buzzer>
			Lcd_voidSendCommand(clear);
    3924:	81 e0       	ldi	r24, 0x01	; 1
    3926:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
			Lcd_VoidWriteString("Locked ");
    392a:	81 e7       	ldi	r24, 0x71	; 113
    392c:	90 e0       	ldi	r25, 0x00	; 0
    392e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
			Lcd_GoToXY(1,0);
    3932:	81 e0       	ldi	r24, 0x01	; 1
    3934:	60 e0       	ldi	r22, 0x00	; 0
    3936:	0e 94 33 0d 	call	0x1a66	; 0x1a66 <Lcd_GoToXY>
			Lcd_VoidWriteString("Type username ");
    393a:	8b e9       	ldi	r24, 0x9B	; 155
    393c:	90 e0       	ldi	r25, 0x00	; 0
    393e:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
			Gate(Close);
    3942:	82 e0       	ldi	r24, 0x02	; 2
    3944:	0e 94 1e 1b 	call	0x363c	; 0x363c <Gate>
			return 0;
    3948:	80 e0       	ldi	r24, 0x00	; 0
			Lcd_voidSendCommand(clear);
			Lcd_VoidWriteString("opened ");

		}
	}
}
    394a:	6c 96       	adiw	r28, 0x1c	; 28
    394c:	0f b6       	in	r0, 0x3f	; 63
    394e:	f8 94       	cli
    3950:	de bf       	out	0x3e, r29	; 62
    3952:	0f be       	out	0x3f, r0	; 63
    3954:	cd bf       	out	0x3d, r28	; 61
    3956:	cf 91       	pop	r28
    3958:	df 91       	pop	r29
    395a:	08 95       	ret
			Gate(Close);
			return 0;
		}
		else
		{
			Lcd_voidSendCommand(clear);
    395c:	81 e0       	ldi	r24, 0x01	; 1
    395e:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
			Lcd_VoidWriteString("Wrong choice ");
    3962:	83 ef       	ldi	r24, 0xF3	; 243
    3964:	90 e0       	ldi	r25, 0x00	; 0
    3966:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
    396a:	80 e0       	ldi	r24, 0x00	; 0
    396c:	90 e8       	ldi	r25, 0x80	; 128
    396e:	ab e3       	ldi	r26, 0x3B	; 59
    3970:	b5 e4       	ldi	r27, 0x45	; 69
    3972:	8b 87       	std	Y+11, r24	; 0x0b
    3974:	9c 87       	std	Y+12, r25	; 0x0c
    3976:	ad 87       	std	Y+13, r26	; 0x0d
    3978:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    397a:	6b 85       	ldd	r22, Y+11	; 0x0b
    397c:	7c 85       	ldd	r23, Y+12	; 0x0c
    397e:	8d 85       	ldd	r24, Y+13	; 0x0d
    3980:	9e 85       	ldd	r25, Y+14	; 0x0e
    3982:	20 e0       	ldi	r18, 0x00	; 0
    3984:	30 e0       	ldi	r19, 0x00	; 0
    3986:	4a ef       	ldi	r20, 0xFA	; 250
    3988:	54 e4       	ldi	r21, 0x44	; 68
    398a:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    398e:	dc 01       	movw	r26, r24
    3990:	cb 01       	movw	r24, r22
    3992:	8f 83       	std	Y+7, r24	; 0x07
    3994:	98 87       	std	Y+8, r25	; 0x08
    3996:	a9 87       	std	Y+9, r26	; 0x09
    3998:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    399a:	6f 81       	ldd	r22, Y+7	; 0x07
    399c:	78 85       	ldd	r23, Y+8	; 0x08
    399e:	89 85       	ldd	r24, Y+9	; 0x09
    39a0:	9a 85       	ldd	r25, Y+10	; 0x0a
    39a2:	20 e0       	ldi	r18, 0x00	; 0
    39a4:	30 e0       	ldi	r19, 0x00	; 0
    39a6:	40 e8       	ldi	r20, 0x80	; 128
    39a8:	5f e3       	ldi	r21, 0x3F	; 63
    39aa:	0e 94 79 03 	call	0x6f2	; 0x6f2 <__ltsf2>
    39ae:	88 23       	and	r24, r24
    39b0:	2c f4       	brge	.+10     	; 0x39bc <HomeOpen+0x18e>
		__ticks = 1;
    39b2:	81 e0       	ldi	r24, 0x01	; 1
    39b4:	90 e0       	ldi	r25, 0x00	; 0
    39b6:	9e 83       	std	Y+6, r25	; 0x06
    39b8:	8d 83       	std	Y+5, r24	; 0x05
    39ba:	3f c0       	rjmp	.+126    	; 0x3a3a <HomeOpen+0x20c>
	else if (__tmp > 65535)
    39bc:	6f 81       	ldd	r22, Y+7	; 0x07
    39be:	78 85       	ldd	r23, Y+8	; 0x08
    39c0:	89 85       	ldd	r24, Y+9	; 0x09
    39c2:	9a 85       	ldd	r25, Y+10	; 0x0a
    39c4:	20 e0       	ldi	r18, 0x00	; 0
    39c6:	3f ef       	ldi	r19, 0xFF	; 255
    39c8:	4f e7       	ldi	r20, 0x7F	; 127
    39ca:	57 e4       	ldi	r21, 0x47	; 71
    39cc:	0e 94 19 03 	call	0x632	; 0x632 <__gtsf2>
    39d0:	18 16       	cp	r1, r24
    39d2:	4c f5       	brge	.+82     	; 0x3a26 <HomeOpen+0x1f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    39d4:	6b 85       	ldd	r22, Y+11	; 0x0b
    39d6:	7c 85       	ldd	r23, Y+12	; 0x0c
    39d8:	8d 85       	ldd	r24, Y+13	; 0x0d
    39da:	9e 85       	ldd	r25, Y+14	; 0x0e
    39dc:	20 e0       	ldi	r18, 0x00	; 0
    39de:	30 e0       	ldi	r19, 0x00	; 0
    39e0:	40 e2       	ldi	r20, 0x20	; 32
    39e2:	51 e4       	ldi	r21, 0x41	; 65
    39e4:	0e 94 1f 02 	call	0x43e	; 0x43e <__mulsf3>
    39e8:	dc 01       	movw	r26, r24
    39ea:	cb 01       	movw	r24, r22
    39ec:	bc 01       	movw	r22, r24
    39ee:	cd 01       	movw	r24, r26
    39f0:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    39f4:	dc 01       	movw	r26, r24
    39f6:	cb 01       	movw	r24, r22
    39f8:	9e 83       	std	Y+6, r25	; 0x06
    39fa:	8d 83       	std	Y+5, r24	; 0x05
    39fc:	0f c0       	rjmp	.+30     	; 0x3a1c <HomeOpen+0x1ee>
    39fe:	88 ec       	ldi	r24, 0xC8	; 200
    3a00:	90 e0       	ldi	r25, 0x00	; 0
    3a02:	9c 83       	std	Y+4, r25	; 0x04
    3a04:	8b 83       	std	Y+3, r24	; 0x03
    3a06:	8b 81       	ldd	r24, Y+3	; 0x03
    3a08:	9c 81       	ldd	r25, Y+4	; 0x04
    3a0a:	01 97       	sbiw	r24, 0x01	; 1
    3a0c:	f1 f7       	brne	.-4      	; 0x3a0a <HomeOpen+0x1dc>
    3a0e:	9c 83       	std	Y+4, r25	; 0x04
    3a10:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    3a12:	8d 81       	ldd	r24, Y+5	; 0x05
    3a14:	9e 81       	ldd	r25, Y+6	; 0x06
    3a16:	01 97       	sbiw	r24, 0x01	; 1
    3a18:	9e 83       	std	Y+6, r25	; 0x06
    3a1a:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    3a1c:	8d 81       	ldd	r24, Y+5	; 0x05
    3a1e:	9e 81       	ldd	r25, Y+6	; 0x06
    3a20:	00 97       	sbiw	r24, 0x00	; 0
    3a22:	69 f7       	brne	.-38     	; 0x39fe <HomeOpen+0x1d0>
    3a24:	14 c0       	rjmp	.+40     	; 0x3a4e <HomeOpen+0x220>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    3a26:	6f 81       	ldd	r22, Y+7	; 0x07
    3a28:	78 85       	ldd	r23, Y+8	; 0x08
    3a2a:	89 85       	ldd	r24, Y+9	; 0x09
    3a2c:	9a 85       	ldd	r25, Y+10	; 0x0a
    3a2e:	0e 94 49 00 	call	0x92	; 0x92 <__fixunssfsi>
    3a32:	dc 01       	movw	r26, r24
    3a34:	cb 01       	movw	r24, r22
    3a36:	9e 83       	std	Y+6, r25	; 0x06
    3a38:	8d 83       	std	Y+5, r24	; 0x05
    3a3a:	8d 81       	ldd	r24, Y+5	; 0x05
    3a3c:	9e 81       	ldd	r25, Y+6	; 0x06
    3a3e:	9a 83       	std	Y+2, r25	; 0x02
    3a40:	89 83       	std	Y+1, r24	; 0x01
    3a42:	89 81       	ldd	r24, Y+1	; 0x01
    3a44:	9a 81       	ldd	r25, Y+2	; 0x02
    3a46:	01 97       	sbiw	r24, 0x01	; 1
    3a48:	f1 f7       	brne	.-4      	; 0x3a46 <HomeOpen+0x218>
    3a4a:	9a 83       	std	Y+2, r25	; 0x02
    3a4c:	89 83       	std	Y+1, r24	; 0x01
			_delay_ms(3000);
			Lcd_voidSendCommand(clear);
    3a4e:	81 e0       	ldi	r24, 0x01	; 1
    3a50:	0e 94 19 09 	call	0x1232	; 0x1232 <Lcd_voidSendCommand>
			Lcd_VoidWriteString("opened ");
    3a54:	8a ea       	ldi	r24, 0xAA	; 170
    3a56:	90 e0       	ldi	r25, 0x00	; 0
    3a58:	0e 94 55 0d 	call	0x1aaa	; 0x1aaa <Lcd_VoidWriteString>
    3a5c:	f9 ce       	rjmp	.-526    	; 0x3850 <HomeOpen+0x22>

00003a5e <__mulsi3>:
    3a5e:	62 9f       	mul	r22, r18
    3a60:	d0 01       	movw	r26, r0
    3a62:	73 9f       	mul	r23, r19
    3a64:	f0 01       	movw	r30, r0
    3a66:	82 9f       	mul	r24, r18
    3a68:	e0 0d       	add	r30, r0
    3a6a:	f1 1d       	adc	r31, r1
    3a6c:	64 9f       	mul	r22, r20
    3a6e:	e0 0d       	add	r30, r0
    3a70:	f1 1d       	adc	r31, r1
    3a72:	92 9f       	mul	r25, r18
    3a74:	f0 0d       	add	r31, r0
    3a76:	83 9f       	mul	r24, r19
    3a78:	f0 0d       	add	r31, r0
    3a7a:	74 9f       	mul	r23, r20
    3a7c:	f0 0d       	add	r31, r0
    3a7e:	65 9f       	mul	r22, r21
    3a80:	f0 0d       	add	r31, r0
    3a82:	99 27       	eor	r25, r25
    3a84:	72 9f       	mul	r23, r18
    3a86:	b0 0d       	add	r27, r0
    3a88:	e1 1d       	adc	r30, r1
    3a8a:	f9 1f       	adc	r31, r25
    3a8c:	63 9f       	mul	r22, r19
    3a8e:	b0 0d       	add	r27, r0
    3a90:	e1 1d       	adc	r30, r1
    3a92:	f9 1f       	adc	r31, r25
    3a94:	bd 01       	movw	r22, r26
    3a96:	cf 01       	movw	r24, r30
    3a98:	11 24       	eor	r1, r1
    3a9a:	08 95       	ret

00003a9c <__udivmodsi4>:
    3a9c:	a1 e2       	ldi	r26, 0x21	; 33
    3a9e:	1a 2e       	mov	r1, r26
    3aa0:	aa 1b       	sub	r26, r26
    3aa2:	bb 1b       	sub	r27, r27
    3aa4:	fd 01       	movw	r30, r26
    3aa6:	0d c0       	rjmp	.+26     	; 0x3ac2 <__udivmodsi4_ep>

00003aa8 <__udivmodsi4_loop>:
    3aa8:	aa 1f       	adc	r26, r26
    3aaa:	bb 1f       	adc	r27, r27
    3aac:	ee 1f       	adc	r30, r30
    3aae:	ff 1f       	adc	r31, r31
    3ab0:	a2 17       	cp	r26, r18
    3ab2:	b3 07       	cpc	r27, r19
    3ab4:	e4 07       	cpc	r30, r20
    3ab6:	f5 07       	cpc	r31, r21
    3ab8:	20 f0       	brcs	.+8      	; 0x3ac2 <__udivmodsi4_ep>
    3aba:	a2 1b       	sub	r26, r18
    3abc:	b3 0b       	sbc	r27, r19
    3abe:	e4 0b       	sbc	r30, r20
    3ac0:	f5 0b       	sbc	r31, r21

00003ac2 <__udivmodsi4_ep>:
    3ac2:	66 1f       	adc	r22, r22
    3ac4:	77 1f       	adc	r23, r23
    3ac6:	88 1f       	adc	r24, r24
    3ac8:	99 1f       	adc	r25, r25
    3aca:	1a 94       	dec	r1
    3acc:	69 f7       	brne	.-38     	; 0x3aa8 <__udivmodsi4_loop>
    3ace:	60 95       	com	r22
    3ad0:	70 95       	com	r23
    3ad2:	80 95       	com	r24
    3ad4:	90 95       	com	r25
    3ad6:	9b 01       	movw	r18, r22
    3ad8:	ac 01       	movw	r20, r24
    3ada:	bd 01       	movw	r22, r26
    3adc:	cf 01       	movw	r24, r30
    3ade:	08 95       	ret

00003ae0 <__divmodsi4>:
    3ae0:	97 fb       	bst	r25, 7
    3ae2:	09 2e       	mov	r0, r25
    3ae4:	05 26       	eor	r0, r21
    3ae6:	0e d0       	rcall	.+28     	; 0x3b04 <__divmodsi4_neg1>
    3ae8:	57 fd       	sbrc	r21, 7
    3aea:	04 d0       	rcall	.+8      	; 0x3af4 <__divmodsi4_neg2>
    3aec:	d7 df       	rcall	.-82     	; 0x3a9c <__udivmodsi4>
    3aee:	0a d0       	rcall	.+20     	; 0x3b04 <__divmodsi4_neg1>
    3af0:	00 1c       	adc	r0, r0
    3af2:	38 f4       	brcc	.+14     	; 0x3b02 <__divmodsi4_exit>

00003af4 <__divmodsi4_neg2>:
    3af4:	50 95       	com	r21
    3af6:	40 95       	com	r20
    3af8:	30 95       	com	r19
    3afa:	21 95       	neg	r18
    3afc:	3f 4f       	sbci	r19, 0xFF	; 255
    3afe:	4f 4f       	sbci	r20, 0xFF	; 255
    3b00:	5f 4f       	sbci	r21, 0xFF	; 255

00003b02 <__divmodsi4_exit>:
    3b02:	08 95       	ret

00003b04 <__divmodsi4_neg1>:
    3b04:	f6 f7       	brtc	.-4      	; 0x3b02 <__divmodsi4_exit>
    3b06:	90 95       	com	r25
    3b08:	80 95       	com	r24
    3b0a:	70 95       	com	r23
    3b0c:	61 95       	neg	r22
    3b0e:	7f 4f       	sbci	r23, 0xFF	; 255
    3b10:	8f 4f       	sbci	r24, 0xFF	; 255
    3b12:	9f 4f       	sbci	r25, 0xFF	; 255
    3b14:	08 95       	ret

00003b16 <__prologue_saves__>:
    3b16:	2f 92       	push	r2
    3b18:	3f 92       	push	r3
    3b1a:	4f 92       	push	r4
    3b1c:	5f 92       	push	r5
    3b1e:	6f 92       	push	r6
    3b20:	7f 92       	push	r7
    3b22:	8f 92       	push	r8
    3b24:	9f 92       	push	r9
    3b26:	af 92       	push	r10
    3b28:	bf 92       	push	r11
    3b2a:	cf 92       	push	r12
    3b2c:	df 92       	push	r13
    3b2e:	ef 92       	push	r14
    3b30:	ff 92       	push	r15
    3b32:	0f 93       	push	r16
    3b34:	1f 93       	push	r17
    3b36:	cf 93       	push	r28
    3b38:	df 93       	push	r29
    3b3a:	cd b7       	in	r28, 0x3d	; 61
    3b3c:	de b7       	in	r29, 0x3e	; 62
    3b3e:	ca 1b       	sub	r28, r26
    3b40:	db 0b       	sbc	r29, r27
    3b42:	0f b6       	in	r0, 0x3f	; 63
    3b44:	f8 94       	cli
    3b46:	de bf       	out	0x3e, r29	; 62
    3b48:	0f be       	out	0x3f, r0	; 63
    3b4a:	cd bf       	out	0x3d, r28	; 61
    3b4c:	09 94       	ijmp

00003b4e <__epilogue_restores__>:
    3b4e:	2a 88       	ldd	r2, Y+18	; 0x12
    3b50:	39 88       	ldd	r3, Y+17	; 0x11
    3b52:	48 88       	ldd	r4, Y+16	; 0x10
    3b54:	5f 84       	ldd	r5, Y+15	; 0x0f
    3b56:	6e 84       	ldd	r6, Y+14	; 0x0e
    3b58:	7d 84       	ldd	r7, Y+13	; 0x0d
    3b5a:	8c 84       	ldd	r8, Y+12	; 0x0c
    3b5c:	9b 84       	ldd	r9, Y+11	; 0x0b
    3b5e:	aa 84       	ldd	r10, Y+10	; 0x0a
    3b60:	b9 84       	ldd	r11, Y+9	; 0x09
    3b62:	c8 84       	ldd	r12, Y+8	; 0x08
    3b64:	df 80       	ldd	r13, Y+7	; 0x07
    3b66:	ee 80       	ldd	r14, Y+6	; 0x06
    3b68:	fd 80       	ldd	r15, Y+5	; 0x05
    3b6a:	0c 81       	ldd	r16, Y+4	; 0x04
    3b6c:	1b 81       	ldd	r17, Y+3	; 0x03
    3b6e:	aa 81       	ldd	r26, Y+2	; 0x02
    3b70:	b9 81       	ldd	r27, Y+1	; 0x01
    3b72:	ce 0f       	add	r28, r30
    3b74:	d1 1d       	adc	r29, r1
    3b76:	0f b6       	in	r0, 0x3f	; 63
    3b78:	f8 94       	cli
    3b7a:	de bf       	out	0x3e, r29	; 62
    3b7c:	0f be       	out	0x3f, r0	; 63
    3b7e:	cd bf       	out	0x3d, r28	; 61
    3b80:	ed 01       	movw	r28, r26
    3b82:	08 95       	ret

00003b84 <strcmp>:
    3b84:	fb 01       	movw	r30, r22
    3b86:	dc 01       	movw	r26, r24
    3b88:	8d 91       	ld	r24, X+
    3b8a:	01 90       	ld	r0, Z+
    3b8c:	80 19       	sub	r24, r0
    3b8e:	01 10       	cpse	r0, r1
    3b90:	d9 f3       	breq	.-10     	; 0x3b88 <strcmp+0x4>
    3b92:	99 0b       	sbc	r25, r25
    3b94:	08 95       	ret

00003b96 <_exit>:
    3b96:	f8 94       	cli

00003b98 <__stop_program>:
    3b98:	ff cf       	rjmp	.-2      	; 0x3b98 <__stop_program>
